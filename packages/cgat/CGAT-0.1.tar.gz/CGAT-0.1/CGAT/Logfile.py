################################################################################
#
#   MRC FGU Computational Genomics Group
#
#   $Id: cgat_script_template.py 2871 2010-03-03 10:20:44Z andreas $
#
#   Copyright (C) 2009 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
'''
Logfile.py - logfile parsing
============================

:Author: Andreas Heger
:Release: $Id$
:Date: |today|
:Tags: Python

Purpose
-------

Parse logfiles

Usage
-----

Example::

   python cgat_script_template.py --help

Type::

   python cgat_script_template.py --help

for command line help.

Documentation
-------------

Code
----

'''

import collections, re

RuntimeInformation = collections.namedtuple( "RuntimeInformation",
                                             "script options jobid host has_finished " +\
                                             "start_date end_date " +\
                                             "wall utime stime cutime cstime" )

RX_START = re.compile( "output generated by (\S+) (.*)" )
RX_JOB = re.compile( "job started at (.*) on (\S+) -- (\S+)" )
RX_FINISH = re.compile( "job finished in (\S+) seconds at (.*) --\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+) -- (\S+)")

def parse( filename ):
    
    results = []
    script, options, started, finished, host, jobid = "", "", "?", "?", "?", "?"
    wall, utime, stime, cutime, cstime = [0] * 5
    with open(filename) as inf:
        for line in inf:
            x = RX_START.search( line )
            if x:
                if script:
                    results.append( RuntimeInformation._make( (\
                                script, options, 
                                jobid, host,
                                finished != "",
                                started, finished, 
                                int(wall), float(utime), float(stime), float(cutime), float(cstime)) ) )
                script, options, started, finished, host, jobid = "", "", "?", "?", "?", ""
                wall, utime, stime, cutime, cstime = [0] * 5
                script, options = x.groups()
                continue
            x = RX_JOB.search(line)
            if x:
                started, host, jobid = x.groups() 
                continue
            x = RX_FINISH.search(line)
            if x:
                wall, finished, utime, stime, cutime, cstime, _jobid = x.groups()
                assert _jobid == jobid

    results.append( RuntimeInformation._make( (\
            script, options, 
            jobid, host,
            finished != "",
            started, finished, 
            int(wall), float(utime), float(stime), float(cutime), float(cstime)) ) )
            
    return results

