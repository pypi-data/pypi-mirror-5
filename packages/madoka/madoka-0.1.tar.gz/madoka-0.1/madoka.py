# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_madoka', [dirname(__file__)])
        except ImportError:
            import _madoka
            return _madoka
        if fp is not None:
            try:
                _mod = imp.load_module('_madoka', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _madoka = swig_import_helper()
    del swig_import_helper
else:
    import _madoka
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def bit_scan_reverse(*args):
  return _madoka.bit_scan_reverse(*args)
bit_scan_reverse = _madoka.bit_scan_reverse
MADOKA_LINE_STR = _madoka.MADOKA_LINE_STR
class Exception(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _madoka.delete_Exception
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _madoka.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _madoka.Exception_what(self)
Exception_swigregister = _madoka.Exception_swigregister
Exception_swigregister(Exception)

class Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Header, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _madoka.new_Header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _madoka.delete_Header
    __del__ = lambda self : None;
    def width(self): return _madoka.Header_width(self)
    def width_mask(self): return _madoka.Header_width_mask(self)
    def depth(self): return _madoka.Header_depth(self)
    def max_value(self): return _madoka.Header_max_value(self)
    def value_size(self): return _madoka.Header_value_size(self)
    def seed(self): return _madoka.Header_seed(self)
    def table_size(self): return _madoka.Header_table_size(self)
    def file_size(self): return _madoka.Header_file_size(self)
    def set_width(self, *args): return _madoka.Header_set_width(self, *args)
    def set_depth(self, *args): return _madoka.Header_set_depth(self, *args)
    def set_max_value(self, *args): return _madoka.Header_set_max_value(self, *args)
    def set_value_size(self, *args): return _madoka.Header_set_value_size(self, *args)
    def set_seed(self, *args): return _madoka.Header_set_seed(self, *args)
    def set_table_size(self, *args): return _madoka.Header_set_table_size(self, *args)
    def set_file_size(self, *args): return _madoka.Header_set_file_size(self, *args)
Header_swigregister = _madoka.Header_swigregister
Header_swigregister(Header)

MADOKA_FILE_CREATE = _madoka.MADOKA_FILE_CREATE
MADOKA_FILE_TRUNCATE = _madoka.MADOKA_FILE_TRUNCATE
MADOKA_FILE_READONLY = _madoka.MADOKA_FILE_READONLY
MADOKA_FILE_WRITABLE = _madoka.MADOKA_FILE_WRITABLE
MADOKA_FILE_SHARED = _madoka.MADOKA_FILE_SHARED
MADOKA_FILE_PRIVATE = _madoka.MADOKA_FILE_PRIVATE
MADOKA_FILE_ANONYMOUS = _madoka.MADOKA_FILE_ANONYMOUS
MADOKA_FILE_HUGETLB = _madoka.MADOKA_FILE_HUGETLB
MADOKA_FILE_PRELOAD = _madoka.MADOKA_FILE_PRELOAD
FILE_CREATE = _madoka.FILE_CREATE
FILE_TRUNCATE = _madoka.FILE_TRUNCATE
FILE_READONLY = _madoka.FILE_READONLY
FILE_WRITABLE = _madoka.FILE_WRITABLE
FILE_SHARED = _madoka.FILE_SHARED
FILE_PRIVATE = _madoka.FILE_PRIVATE
FILE_ANONYMOUS = _madoka.FILE_ANONYMOUS
FILE_HUGETLB = _madoka.FILE_HUGETLB
FILE_PRELOAD = _madoka.FILE_PRELOAD
class File(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, File, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, File, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _madoka.new_File()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _madoka.delete_File
    __del__ = lambda self : None;
    def create(self, *args): return _madoka.File_create(self, *args)
    def open(self, *args): return _madoka.File_open(self, *args)
    def close(self): return _madoka.File_close(self)
    def load(self, *args): return _madoka.File_load(self, *args)
    def save(self, *args): return _madoka.File_save(self, *args)
    def addr(self): return _madoka.File_addr(self)
    def size(self): return _madoka.File_size(self)
    def flags(self): return _madoka.File_flags(self)
    def swap(self, *args): return _madoka.File_swap(self, *args)
File_swigregister = _madoka.File_swigregister
File_swigregister(File)

MADOKA_SKETCH_EXACT_MODE = _madoka.MADOKA_SKETCH_EXACT_MODE
MADOKA_SKETCH_APPROX_MODE = _madoka.MADOKA_SKETCH_APPROX_MODE

def madoka_create(*args):
  return _madoka.madoka_create(*args)
madoka_create = _madoka.madoka_create

def madoka_open(*args):
  return _madoka.madoka_open(*args)
madoka_open = _madoka.madoka_open

def madoka_close(*args):
  return _madoka.madoka_close(*args)
madoka_close = _madoka.madoka_close

def madoka_load(*args):
  return _madoka.madoka_load(*args)
madoka_load = _madoka.madoka_load

def madoka_save(*args):
  return _madoka.madoka_save(*args)
madoka_save = _madoka.madoka_save

def madoka_get_width(*args):
  return _madoka.madoka_get_width(*args)
madoka_get_width = _madoka.madoka_get_width

def madoka_get_width_mask(*args):
  return _madoka.madoka_get_width_mask(*args)
madoka_get_width_mask = _madoka.madoka_get_width_mask

def madoka_get_depth(*args):
  return _madoka.madoka_get_depth(*args)
madoka_get_depth = _madoka.madoka_get_depth

def madoka_get_max_value(*args):
  return _madoka.madoka_get_max_value(*args)
madoka_get_max_value = _madoka.madoka_get_max_value

def madoka_get_value_mask(*args):
  return _madoka.madoka_get_value_mask(*args)
madoka_get_value_mask = _madoka.madoka_get_value_mask

def madoka_get_value_size(*args):
  return _madoka.madoka_get_value_size(*args)
madoka_get_value_size = _madoka.madoka_get_value_size

def madoka_get_seed(*args):
  return _madoka.madoka_get_seed(*args)
madoka_get_seed = _madoka.madoka_get_seed

def madoka_get_table_size(*args):
  return _madoka.madoka_get_table_size(*args)
madoka_get_table_size = _madoka.madoka_get_table_size

def madoka_get_file_size(*args):
  return _madoka.madoka_get_file_size(*args)
madoka_get_file_size = _madoka.madoka_get_file_size

def madoka_get_flags(*args):
  return _madoka.madoka_get_flags(*args)
madoka_get_flags = _madoka.madoka_get_flags

def madoka_get_mode(*args):
  return _madoka.madoka_get_mode(*args)
madoka_get_mode = _madoka.madoka_get_mode

def madoka_get(*args):
  return _madoka.madoka_get(*args)
madoka_get = _madoka.madoka_get

def madoka_set(*args):
  return _madoka.madoka_set(*args)
madoka_set = _madoka.madoka_set

def madoka_inc(*args):
  return _madoka.madoka_inc(*args)
madoka_inc = _madoka.madoka_inc

def madoka_add(*args):
  return _madoka.madoka_add(*args)
madoka_add = _madoka.madoka_add

def madoka_clear(*args):
  return _madoka.madoka_clear(*args)
madoka_clear = _madoka.madoka_clear

def madoka_copy(*args):
  return _madoka.madoka_copy(*args)
madoka_copy = _madoka.madoka_copy

def madoka_filter(*args):
  return _madoka.madoka_filter(*args)
madoka_filter = _madoka.madoka_filter

def madoka_shrink(*args):
  return _madoka.madoka_shrink(*args)
madoka_shrink = _madoka.madoka_shrink

def madoka_merge(*args):
  return _madoka.madoka_merge(*args)
madoka_merge = _madoka.madoka_merge

def madoka_swap(*args):
  return _madoka.madoka_swap(*args)
madoka_swap = _madoka.madoka_swap

def madoka_inner_product(*args):
  return _madoka.madoka_inner_product(*args)
madoka_inner_product = _madoka.madoka_inner_product
SKETCH_EXACT_MODE = _madoka.SKETCH_EXACT_MODE
SKETCH_APPROX_MODE = _madoka.SKETCH_APPROX_MODE
class Sketch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sketch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sketch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _madoka.new_Sketch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _madoka.delete_Sketch
    __del__ = lambda self : None;
    def create(self, width=0, max_value=0, path=None, flags=0, seed=0): return _madoka.Sketch_create(self, width, max_value, path, flags, seed)
    def open(self, *args): return _madoka.Sketch_open(self, *args)
    def close(self): return _madoka.Sketch_close(self)
    def load(self, *args): return _madoka.Sketch_load(self, *args)
    def save(self, *args): return _madoka.Sketch_save(self, *args)
    def width(self): return _madoka.Sketch_width(self)
    def width_mask(self): return _madoka.Sketch_width_mask(self)
    def depth(self): return _madoka.Sketch_depth(self)
    def max_value(self): return _madoka.Sketch_max_value(self)
    def value_mask(self): return _madoka.Sketch_value_mask(self)
    def value_size(self): return _madoka.Sketch_value_size(self)
    def seed(self): return _madoka.Sketch_seed(self)
    def table_size(self): return _madoka.Sketch_table_size(self)
    def file_size(self): return _madoka.Sketch_file_size(self)
    def flags(self): return _madoka.Sketch_flags(self)
    def mode(self): return _madoka.Sketch_mode(self)
    def get(self, *args): return _madoka.Sketch_get(self, *args)
    def set(self, *args): return _madoka.Sketch_set(self, *args)
    def inc(self, *args): return _madoka.Sketch_inc(self, *args)
    def add(self, *args): return _madoka.Sketch_add(self, *args)
    def clear(self): return _madoka.Sketch_clear(self)
    def copy(self, *args): return _madoka.Sketch_copy(self, *args)
    def filter(self, *args): return _madoka.Sketch_filter(self, *args)
    def shrink(self, *args): return _madoka.Sketch_shrink(self, *args)
    def merge(self, *args): return _madoka.Sketch_merge(self, *args)
    def swap(self, *args): return _madoka.Sketch_swap(self, *args)
    def inner_product(self, *args): return _madoka.Sketch_inner_product(self, *args)
Sketch_swigregister = _madoka.Sketch_swigregister
Sketch_swigregister(Sketch)
cvar = _madoka.cvar
SKETCH_ID_SIZE = cvar.SKETCH_ID_SIZE
SKETCH_MAX_ID = cvar.SKETCH_MAX_ID
SKETCH_ID_MASK = cvar.SKETCH_ID_MASK
SKETCH_MIN_WIDTH = cvar.SKETCH_MIN_WIDTH
SKETCH_MAX_WIDTH = cvar.SKETCH_MAX_WIDTH
SKETCH_DEFAULT_WIDTH = cvar.SKETCH_DEFAULT_WIDTH
SKETCH_MAX_MAX_VALUE = cvar.SKETCH_MAX_MAX_VALUE
SKETCH_DEFAULT_MAX_VALUE = cvar.SKETCH_DEFAULT_MAX_VALUE
SKETCH_DEPTH = cvar.SKETCH_DEPTH
SKETCH_APPROX_VALUE_SIZE = cvar.SKETCH_APPROX_VALUE_SIZE
SKETCH_OWNER_OFFSET = cvar.SKETCH_OWNER_OFFSET
SKETCH_OWNER_MASK = cvar.SKETCH_OWNER_MASK

# This file is compatible with both classic and new-style classes.


