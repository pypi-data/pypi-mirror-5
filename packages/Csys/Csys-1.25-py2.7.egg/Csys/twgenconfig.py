#!/usr/local/bin/python

# $Header: /vol/cscvs/python-Csys/twgenconfig.py,v 1.3 2013/06/11 19:55:09 csoftmgr Exp $
# $Date: 2013/06/11 19:55:09 $

import Csys, os, os.path, sys, re

from Csys.SysUtils import which, getMounted
from glob import glob
import Csys.Passwd

__doc__ = '''Celestial Software Main program prototype

usage: %s''' % Csys.Config.progname

__doc__ += '''

$Id: twgenconfig.py,v 1.3 2013/06/11 19:55:09 csoftmgr Exp $
'''

__version__='$Revision: 1.3 $'[11:-2]

def main(): #{
	# Add program options to parser here

	def setOptions(): #{
		'''Set command line options'''
		global __doc__

		parser = Csys.getopts(__doc__)

		parser.add_option('-f', '--force',
			action='store_true', dest='force', default=False,
			help='Force replace',
		)
		parser.add_option('-o', '--outfile',
			action='store', type='string', dest='outfile', default=None,
			help='Output File (default stdout)',
		)
		parser.add_option('-r', '--rerun',
			action='store_true', dest='rerun', default=False,
			help='Rerun from existing tw.config file',
		)
		parser.add_option('-x', '--exclude',
			action='append', dest='exclude', default=[],
			help='Exclude Directory',
		)
		return parser
	#} setOptions

	# get this now before getopts has at it.
	command = ' '.join(sys.argv)

	parser = setOptions()

	(options, args) = parser.parse_args()

	verbose = ''
	if options.verbose: #{
		verbose = '-v'
		sys.stdout = sys.stderr
	#}
	Csys.getoptionsEnvironment(options)

	csoft = os.path.realpath(Csys.prefix)
	openPKGInstances = [
		os.path.realpath(s.strip()) for s in open('/etc/openpkg') if s.strip()
	]

	configDir = os.path.join(csoft, 'var/tripwire')
	configFiles = Csys.CSClassBase({
		'tw_config'	: os.path.join(configDir, 'tw.config'),
	})

	if options.rerun: #{
		if not options.outfile: options.outfile = configFiles.tw_config
		commandPattern = re.compile(r'^# COMMAND:')
		commands = Csys.grep(commandPattern, open(options.outfile))
		if not commands: #{
			sys.stderr.write('No COMMAND in %s\n' % options.outfile)
			sys.exit(1)
		#}
		command = commandPattern.sub('', commands[0]).strip()
		if Csys.system(command): #{
			sys.stderr.write('%s failed\n' % command)
			sys.exit(2)
		#}
	#}
	if options.outfile: #{
		outfile = options.outfile
		if os.path.isfile(outfile): #{
			if not options.force: #{
				sys.stderr.write('%s exists and no -f option\n' % outfile)
				sys.exit(3)
			#}
			os.rename(outfile, outfile + '.old')
		#}
		fh = open(outfile, 'w')
		sys.stdout = fh
	#}
	print ('''#
# cssecscan configuration initially generated by twgenconfig.py
# Bill Campbell <bill@celestial.com>
# This is just a base implementation, and may need to be modified
# to fit a particular system.
#
# The command used to generate this file was:
# COMMAND: %s
#
	''') % command

	entries = { '/' : 1 } # entries handled

	search_dirs = set([
		'/var/adm/LST',
		'/var/lib',
		'/var/spool/cron',
	])
	for opkg in openPKGInstances: #{
		search_dirs.add(os.path.join(opkg, 'var/lib/aide'))
	#}
	if verbose: #{
		print 'search_dirs = ', sorted(search_dirs)
	#}
	exclude_dirs = set([
		'/',
		'/.am',
		'/.autofsck',
		'/.automount',
		'/.autorelabel',
		'/amd',
		'/backroot',
		'/backups',
		'/csbackup',
		'/dev',
		'/dev/pts',
		'/devices',
		'/etc/rc0.d/messages',
		'/etc/rc2.d/messages',
		'/etc/sm',
		'/etc/cups/certs',
		'/ftp/incoming',
		'/ftp/mirrors',
		'/ftp/private',
		'/ftp/pub',
		'/ftp/tmp',
		'/home',
		'/media',
		'/mnt',
		'/net',
		'/proc',
		'/service',
		'/sys',
		'/system',
		'/srv',
		'/tmp_mnt',
		'/u/usr',
		'/usr/doc',
		'/usr/lib/edge/config',
		'/usr/lib/edge/lists',
		'/usr/src/OpenServer',
		'/usr/src/redhat',
		'/usr/src',
		'/usr/src/OpenLinux',
		'/session_mm_apache0.sem',
		'/var',
		'/var/adm',
		'/var/adm/xferlog',
		'/var/adm/xferlogs',
		'/var/cache',
		'/var/catman',
		'/var/ldap',
		'/var/lib/mysql',
		'/var/lock',
		'/var/log',
		'/var/nis',
		'/var/opt',
		'/var/run',
		'/var/spool',
		'/var/spool/cron',
		'/var/spool/mail',
		'/var/spool/postfix',
		'/var/state',
		'/var/tmp',
	])
	for opkg in openPKGInstances: #{
		exclude_dirs |= (set([
			opkg,
			os.path.join(opkg, 'etc/spamassassin/bayes'),
			os.path.join(opkg, 'lib/djbdns/secondary'),
			os.path.join(opkg, 'lib/mail/digests'),
			os.path.join(opkg, 'lib/mail/lists'),
			os.path.join(opkg, 'lib/mail/majordomo'),
			os.path.join(opkg, 'lib/mail/majordomo/majordomo.cf'),
			os.path.join(opkg, 'lib/named/secondary'),
			os.path.join(opkg, 'lib/csbase/Maint'),
			os.path.join(opkg, 'lib/cops', Csys.Config.hostname_short),
		]))
	#}
	if options.exclude: #{
		exclude_dirs |= set(options.exclude)
	#}
	exclude_dirs = sorted(exclude_dirs)
	hdr = '\n# Only check directory stats\n'
	for dir in exclude_dirs: #{
		dir = os.path.realpath(dir)
		if os.path.exists(dir): #{
			print '%s=%s R' % (hdr, dir)
			hdr = ''
		#}
	#}
	if verbose: #{
		sys.stderr.write('exclude_dirs: %s' % "\n\t".join(exclude_dirs))
	#}

	# now look at amq output if it exists to exclude the directories.
	amq = which('amq')

	if amq: #{
		hdr = '\n# AMD Automounter mount points\n'
		amdDirs = []
		cmd = ('%s 2>/dev/null' % amq)
		fhamd = Csys.popen(cmd)
		amdPattern = re.compile(r'\b(toplvl)\b')
		for line in fhamd: #{
			if amdPattern.search(line): #{
				dir, type, fname, dir = line.split()
				amdDirs.append(dir)
				entries[dir] = True
				print '%s=%s R' % (hdr, dir)
				hdr = ''
			#}
		#}
		for dir in amdDirs: #{
			if not dir in exclude_dirs: exclude_dirs.append(dir)
		#}
	#}
	# root level directories

	rootentries = set(os.listdir('/'))
	for opkg in openPKGInstances: #{
		rootentries |= (set([
			os.path.join(opkg, 'bin'),
			os.path.join(opkg, 'cgi'),
			os.path.join(opkg, 'etc'),
			os.path.join(opkg, 'lib'),
			os.path.join(opkg, 'lib64'),
			os.path.join(opkg, 'libexec'),
			os.path.join(opkg, 'local/bin'),
			os.path.join(opkg, 'local/etc'),
			os.path.join(opkg, 'local/lib'),
			os.path.join(opkg, 'local/sbin'),
			os.path.join(opkg, 'sbin'),
			# os.path.join(csoft, 'share'),
			os.path.join(opkg, 'ubin'),
			os.path.join(opkg, 'ulib'),
		]))
	#}
	rootentires = sorted(rootentries)
	hdr = '\n# Root level and critical directories\n'
	for entry in rootentries: #{
		entry = os.path.join('/', entry)
		if not entry in exclude_dirs and os.path.exists(entry): #{
			if os.path.islink(entry): fmt = '%s!%s # symlink'
			else: fmt = '%s%s R'
			print fmt %(hdr, entry)
			hdr = ''
		#}
	#}

	hdr = '''\n# Lost + Found directories which should normally be empty.
# Temporary directories that are in file systems that would
# not otherwise be searched.
'''
	mounted = []
	for mountpoint, d in getMounted().items(): #{
		if not (d.pseudo or d.noexec or d.nosuid): #{
			mounted.append(mountpoint)
		#}
	#}
	mounted.sort()
	for mountpoint in mounted: #{
		if not mountpoint in search_dirs: #{
			for dir in ('tmp', 'csbackup'): #{
				tmpdir = os.path.join(mountpoint, dir)
				if os.path.isdir(tmpdir): #{
					print '%s=%s R' % (hdr, tmpdir)
					hdr = ''
				#}
			#}
			tmpdir = os.path.join(mountpoint, 'lost+found')
			if os.path.isdir(tmpdir): #{
				print '%s%s R' % (hdr, tmpdir)
				hdr = ''
			#}
		#}
	#}
	logfiles = set([
		'/.Xauthority',
		'/etc/adjtime',
		'/etc/blkid.tab',
		'/etc/blkid.tab.old',
		'/etc/defkeymap.map',
		'/etc/ioctl.save',
		'/etc/motd',
		'/etc/mtab',
		'/etc/nfsstat_data',
		'/etc/ntp.drift',
		'/etc/ssh_random_seed',
		'/root/.Xauthority',
		'/root/.exrc',
		'/root/.bash_history',
		'/root/.ssh/random_seed',
		'/unix.nlsym',
		'/usr/lib/isam/locks',
		'/var/adm/syslog',
		os.path.join(csoft, 'lib/cops/Success'),
		'/var/run/utmp',
		'/var/spool/mqueue',
	])
	for opkg in openPKGInstances: #{
		logfiles |= (set([
			os.path.join(opkg, 'etc/openpkg/uuid'),
			os.path.join(opkg, 'lib/mail/aliases'),
			os.path.join(opkg, 'lib/mail/aliases.00'),
			os.path.join(opkg, 'lib/mail/aliases.dir'),
			os.path.join(opkg, 'lib/mail/aliases.pag'),
			os.path.join(opkg, 'lib/mail/majordomo/Log'),
			os.path.join(opkg, 'var/tripwire/symlinks.gdbm'),
			os.path.join(opkg, 'var/tripwire/setuids.gdbm'),
			os.path.join(opkg, 'var/tripwire/rhosts.gdbm'),
			os.path.join(opkg, 'var/postfix/log/postfix.log'),
			os.path.join(opkg, 'var/postfix/log/postfix.sum'),
			os.path.join(opkg, 'etc/openpkg/register.conf'),
			os.path.join(opkg, 'etc/openpkg/register.prep'),
			os.path.join(opkg, 'etc/openpkg/register.tran'),
		]))
	#}
	logfiles |= (set(glob('/root/.hist*')))
	logfiles |= (set(glob('/root/.vim*')))
	logfiles = sorted(logfiles)
	hdr = "\n# Log files/changing files not to be checked fully\n";
	for logfile in logfiles: #{
		if os.path.isfile(logfile): #{
			print '%s%s L' % (hdr, logfile)
			hdr = ''
		#}
	#}

	try: #{{
		ftp = Csys.Passwd.getpwnam('ftp')
		ftphome = os.path.realpath(ftp.home)
		hdr = '\n# Anonymous ftp entries in %s\n' % ftphome
		# subdirectories and scripts that may change or be dangerous.
		for subdir in ( 'bin', 'build_ls', 'dev', 'etc', 'lib', 'shlib',): #{
			subdir = os.path.join(ftphome, subdir)
			if os.path.exists(subdir): #{
				print '%s%s $' % (hdr, subdir)
				hdr = ''
			#}
		#}
		for ignore in (
			'files.list',
			'files.list.gz',
			'ls-Rl.gz',
			'ls-lR.gz',
			'ls-tRl.gz',
			'ls-tlR.gz',
		): #{
			ignore = os.path.join(ftphome, ignore)
			if os.path.isfile(ignore): #{
				print '%s%s L' % (hdr, ignore)
				hdr = ''
			#}
		#}
	#}
	except: pass #}

	# print the final include stuff;
	print ('''
@@include "%(csoft)s/var/tripwire/tw_config_local"
# cp tw.config.old "%(csoft)s/var/tripwire/tw_config_local"
# touch "%(csoft)s/var/tripwire/tw_config_local"
@@include "%(csoft)s/var/tripwire/setuids"
@@include "%(csoft)s/var/tripwire/symlinks"
@@include "%(csoft)s/var/tripwire/rhosts"
@@include "%(csoft)s/var/tripwire/tw.ignore_files"
# %(csoft)s/bin/tw.djbdns_files.py
@@include "%(csoft)s/var/tripwire/tw.djbdns_files"
	''') % { 'csoft' : csoft }
#} main

if __name__ == '__main__': #{
	main()
#}
