Metadata-Version: 1.1
Name: cs.accreditedfile
Version: 1.5
Summary: Files that get published in a website and the publication is accredited by Izenpe (http://www.izenpe.com)
Home-page: http://www.codesyntax.com/products/cs.accreditedfile
Author: Mikel Larreategi
Author-email: mlarreategi@codesyntax.com
License: GPL
Description: cs.accreditedfile
        ------------------
        
        AccreditedFiles are files which publication is accredited by
        a third-party service.
        
        IZENPE, the Basque Government's certification service provider
        has a web service to get this kind of certification.
        
        You have to contact them to ask for an application key and
        certificate and documentation about the web service.
        
        After installing this product, you will have some configuration
        items to check in the portal_registry. You have to provide the
        application key and certificate provided by IZENPE.
        
        We use suds library to contact the webservice. Due to the limitations
        imposed by suds, each time the web service is called the certificate
        and the key have to be written to the filesystem. But we have
        write the code to safely delete those files to avoid security issues.
        
        This product uses a subscriber and a ZODB after-commit-hook to get 
        the accreditation, because IZENPE needs to see the item published on
        the site and in Zope items are not published until the transaction
        is commited, so we add an after-commit-hook to contact IZENPE.
        
        Change history
        **************
        
        Changelog
        =========
        
        1.5 (2012-12-14)
        --------------------
        - Translations
          [erral]
        
        
        1.1-1.4 (unreleased)
        -------------------
        - File extensions handling corrections
          [erral]
        
        
        1.0.1 (2010/12/22)
        ------------------
        - Fix documentation
          [erral]
        
        1.0 (2010/12/22)
        ----------------
        
        - Initial release
          ["erral"]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  
        
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.  We then ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        Finally, let's return to the front page of our site before continuing
        
            >>> browser.open(portal_url)
        
        -*- extra stuff goes here -*-
        The AccreditedFile content type
        ===============================
        
        In this section we are tesing the AccreditedFile content type by performing
        basic operations like adding, updadating and deleting AccreditedFile content
        items.
        
        Adding a new AccreditedFile content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'AccreditedFile' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('AccreditedFile').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'AccreditedFile' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'AccreditedFile Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        And we are done! We added a new 'AccreditedFile' content item to the portal.
        
        Updating an existing AccreditedFile content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
            >>> browser.getLink('Edit').click()
            >>> browser.getControl(name='title').value = 'New AccreditedFile Sample'
            >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
            >>> 'Changes saved' in browser.contents
            True
            >>> 'New AccreditedFile Sample' in browser.contents
            True
        
        Removing a/an AccreditedFile content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New AccreditedFile
        Sample' title in the global navigation tabs.
        
            >>> browser.open(portal_url)
            >>> 'New AccreditedFile Sample' in browser.contents
            True
        
        Now we are going to delete the 'New AccreditedFile Sample' object. First we
        go to the contents tab and select the 'New AccreditedFile Sample' for
        deletion.
        
            >>> browser.getLink('Contents').click()
            >>> browser.getControl('New AccreditedFile Sample').click()
        
        We click on the 'Delete' button.
        
            >>> browser.getControl('Delete').click()
            >>> 'Item(s) deleted' in browser.contents
            True
        
        So, if we go back to the home page, there is no longer a 'New AccreditedFile
        Sample' tab.
        
            >>> browser.open(portal_url)
            >>> 'New AccreditedFile Sample' in browser.contents
            False
        
        Adding a new AccreditedFile content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add AccreditedFile content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = 'contributor'
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        We select 'AccreditedFile' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('AccreditedFile').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'AccreditedFile' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'AccreditedFile Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        Done! We added a new AccreditedFile content item logged in as contributor.
        
        Finally, let's login back as manager.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        
        
        
        Contributors
        ************
        
        "Mikel Larreategi <mlarreategi@codesyntax.com>
        
        
        Download
        ********
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
