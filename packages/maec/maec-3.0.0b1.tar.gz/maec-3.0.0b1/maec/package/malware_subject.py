#MAEC Malware Subject Class

#Copyright (c) 2013, The MITRE Corporation
#All rights reserved.

#Compatible with MAEC v3.0
#Last updated 4/10/2013

import maec.bindings.maec_package_1_0 as package_binding

class MalwareSubject(object):
    def __init__(self, id, generator, malware_instance_object = None):
        if id is not None:
            self.id = id
        elif generator is not None:
            self.generator = generator
            self.id = self.generator.generate_malware_subject_id()
        else:
            raise Exception("Must specify id or generator for MalwareSubject constructor")
        #Create the MAEC Subject object
        self.subject_obj = package_binding.MalwareSubjectType(id=self.generator.generate_malware_subject_id())
        #Set the Malware Instance Object Attributes (a CybOX object) if they are not none
        self.malware_instance_object = malware_instance_object
        self.field_data = None
        #Instantiate the lists
        self.analyses = []
        self.findings_bundles = []
        self.relationships = []
        #self.analyses = package_binding.AnalysisListType()
        #self.findings_bundles = package_binding.FindingsBundleListType()

    def to_obj(self):
        malware_subject_obj = package_binding.MalwareSubjectType(id = self.id)
        if self.malware_instance_object is not None: malware_subject_obj.set_Malware_Instance_Object_Attributes(self.malware_instance_object.to_obj())
        if self.field_data is not None: malware_subject_obj.set_Field_Data(self.field_data.to_obj())
        if len(self.analyses) > 0:
            analysis_list = package_binding.AnalysisListType()
            for analysis in self.analyses:
                analysis_list.add_Analysis(analysis.to_obj())
            malware_subject_obj.set_Analyses(analysis_list)
        if len(self.findings_bundles) > 0:
            findings_bundle_list = package_binding.FindingsBundleListType()
            for findings_bundle in self.findings_bundles:
                findings_bundle_list.add_Bundle(findings_bundle.to_obj())
            malware_subject_obj.set_Findings_Bundles(findings_bundle_list)
        if len(self.relationships) > 0:
            relationships_list = package_binding.MalwareSubjectRelationshipListType()
            for relationship in self.relationships:
                relationships_list.add_Relationship(relationship.to_obj())
            malware_subject_obj.set_Relationships(relationships_list)
        return malware_subject_obj

    def to_dict(self):
        malware_subject_dict = {}

        return malware_subject_dict

    #Public methods
    #Set the Malware_Instance_Object_Attributes with a CybOX object
    def set_malware_instance_object_attributes(self, malware_instance_object):
        self.malware_instance_object = malware_instance_object

    #Add an Analysis to the Analyses
    def add_analysis(self, analysis):
        self.analyses.append(analysis)

    #Add a MAEC Bundle to the Findings Bundles
    def add_findings_bundle(self, bundle):
        self.findings_bundles.append(bundle)

    #Build the Malware Subject from the input dictionary
    @staticmethod
    def from_dict(malware_subject_dict):
        for key, value in self.malware_subject_dict.items():
            pass

    @staticmethod
    def from_obj(malware_subject_obj):
        malware_subject_dict = {}
        pass

    

