Metadata-Version: 1.1
Name: lambdaJSON
Version: 0.2.1
Summary: Use json to serialize python standard types (function, tuple, complex, bytes, dict with number keys, byte keys or tuple keys, and etc)
Home-page: https://github.com/pooya-eghbali/lambdaJSON
Author: Pooya Eghbali
Author-email: persian.writer@gmail.com
License: LGPLv3
Description: ===========
        lambdaJSON
        ===========
        Serialize python standard types (tuple, complex, bytes, dict with number keys, byte keys or tuple keys, and etc) with json.
        lambdaJSON lets you serialize python standard library objects with json.
        Typical usage::
        
            #!/usr/bin/env python
        
            >>> import lambdaJSON
            >>> myComplexData = {True: (3-5j), (3+5j): b'json', (1, 2, 3): {b'lambda': [1, 2, 3, (3, 4, 5)]}}
            >>> mySerializedData = lambdaJSON.serialize(myComplexData)
            >>> myComplexData  == lambdaJSON.deserialize(mySerializedData)
            True
        
            >>> 
        
        To pass args and kwargs to the encoder/decoder simply pass them to the serialize/deserialize function, example for json::
        
            >>> mySerializedData = lambdaJSON.serialize(myComplexData, sort_keys = True)
            >>> myComplexData  == lambdaJSON.deserialize(mySerializedData, object_hook = my_hook)
        
        It can be done for ujson too. You can also serialize python functions::
        
            >>> import lambdaJSON
            >>> def f(): print('lambdaJSON Rocks!')
            
            >>> mySerializedFunction = lambdaJSON.serialize(f)
            >>> myNewFunction  = lambdaJSON.deserialize(mySerializedFunction)
            >>> myNewFunction()
            'lambdaJSON Rocks!'
            >>>
        
        Currently Supported Types
        =========================
        
        This types are covered in this version:
        
        1. Functions
        2. Bytes
        3. Tuples
        4. Complex
        5. Dicts (With Number, Tuple, String, Bool and Byte keys)
        6. other json supported types
        
        Changes from previous
        =====================
        
        Added __builtins__ to deserialized Functions. (Next version will cover all globals inside function)
        
        Project Info
        ============
        
        Github project page: https://github.com/pooya-eghbali/lambdaJSON
        Mail me at: persian.writer [at] Gmail.com
Platform: Any
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
