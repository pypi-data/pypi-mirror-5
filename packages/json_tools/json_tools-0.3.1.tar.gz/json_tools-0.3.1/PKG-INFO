Metadata-Version: 1.1
Name: json_tools
Version: 0.3.1
Summary: A set of tools to manipulate JSON: diff, patch, pretty-printing
Home-page: https://bitbucket.org/vadim_semenov/json_tools
Author: Vadim Semenov
Author-email: protoss.player@gmail.com
License: UNKNOWN
Description: JSON tools
        ==========
        
        Manipulate JSON documents using `"JSON patch"
        format <http://tools.ietf.org/html/draft-ietf-appsawg-json-patch-02>`__.
        
        Installation
        ------------
        
        ::
        
            $ pip install json_tools
        
        Release notes
        -------------
        
        Check the project's
        `Wiki <https://bitbucket.org/vadim_semenov/json_tools/wiki/Release%20Notes>`__
        
        Usage
        -----
        
        There are two ways of using *json\_tools*:
        
        1. As a CLI utilty.
        2. As a Python module.
        
        CLI interface
        ~~~~~~~~~~~~~
        
        After you've installed *json\_tools* you can access it via ``json``
        command in the shell. It provides a pretty simple yet powerful interface
        to manipulate JSON documents:
        
        -  ``print [input_file]``
        
           Pretty-print a JSON file with syntax highlighting and keys sorting.
        
           If ``input_file`` is omitted or equals ``-``, reads JSON from STDIN.
        
           **Example:**
        
           ::
        
               $ echo '{"Hello": ["w", "o", "r", "l", "d", "!"]}' | json print
               {
                   "Hello": [
                       "w",
                       "o",
                       "r",
                       "l",
                       "d",
                       "!"
                   ]
               }
        
        -  ``diff [file1] [file2]``
        
           Calculate difference between two JSON documents and output it in JSON
           patch format.
        
           Either ``file1`` or ``file2`` can be set to ``-``, in order to read
           JSON from STDIN.
        
           **Example:**
        
           ::
        
               $ json diff doc1.json doc2.json
               [
                   {
                       "add": "/lol",
                       "value": "wut"
                   },
                   {
                       "remove": "/some/field",
                       "prev": {
                           "compound": "value"
                       }
                   }
               ]
        
        -  ``patch [options] input [patch [patch ...]]``
        
           Modify the JSON file ``input`` using a series of JSON ``patch``\ es.
        
           If ``patch`` is omitted or equals ``-``, its content is read from
           STDIN.
        
           **Options:**
        
           ``-i, --inplace``
        
           Modify ``source_file`` inplace instead of printing it to STDOUT.
        
        Pythonic interface
        ~~~~~~~~~~~~~~~~~~
        
        TBD
        
        Planned features
        ----------------
        
        1. Support more JSON patch options: currently *json\_tools* only
           supports *add*, *remove* and *replace*.
        2. Make **diff** output more human readable (not JSONish).
        3. Improve documentation.
        
        
Keywords: json
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
