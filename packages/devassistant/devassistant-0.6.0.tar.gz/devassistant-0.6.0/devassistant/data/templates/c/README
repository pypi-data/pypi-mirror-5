This package contains several programs for beginners.
It includes as sources and binaries.

Programs available here are:

Operation with files:
fileOperations .... program demonstrates how to operated with files.
Including read and writing operations

simpleThread ... demonstrates thread operations. When user run this program several times
then output will be different. It depends how threads are executed

server ... This is server side program which demonstrates how server works.
On one terminal user has to specify on which port server will listen to.
After reading message server exits.
	Example : ./server 50000
client .... This program is used as a client for server which is run on the specific port.
	Client sends message to server and response if server got that message or not.
	Example : ./client <hostname or localhost> 50000

=== How to add new C file to project ===
Here is described guide how to add new C file to automake tools.

Let's say that we have added into directory of your project
file named my_test.c. To be sure that file is compile free we need to add them into
automake tools.

Let's say that my_test.c includes openssl/ssl.h

Steps for compilation and making binaries are following:
1) Go to you project name directory named by option -n
2) Update file Makefile.am so that we will add binary name at the end into bin_PROGRAMS like
     bin_PROGRAMS = <actuall_binaries> my_test
3) Next step is to tell autotools build my my_test.c file. It is done so that
new row has to be added in Makefile.am
     my_test_SOURCES = my_test.c 
4) If your program depends on some library like libssl then add row like
    my_test_LDADD= -lssl
  and during compilation your program will be build with then library
5) If you would like to add checking whether some headers are on target system
    then add following row into configure.ac file like in our example
    AC_CHECK_HEADERS([openssl/ssl.h])
5) If you would like to add checking whether some library contains function then add 
    this row into configure.ac file like in our example
    AC_CHECK_LIB(ssl, <function_name>)
6) Now we are prepared for building sources. Go to directory with your project name and run command
   autoreconf --install
   This step will create ./configure script and all neccessary makefiles
7) Now run command ./configure which is needed for checking whether all header files, libraries
     etc are available on the system
8)  Run make for testing whether my_test.c is compilable without errors.
    In case that some errors occurs solve them.
    If some library is missing them we need to add them into configure.ac like was mentioned
    in step 5)

9) When all project is buildable and no errors occurs then you can add you binary
    to RPM so that you will modify <project_name>.spec file stored in your project name directory
    In that file add your directory in %install section so that new row will be add like:

    install -p -m 755 -D src/my_test ${RPM_BUILD_ROOT}%{_bindir}/my_test

    Also it is needed to mentioned that file in %files section so that new row
    will be added there like

    %{_bindir}/my_test

10) Update also changelog section so that Package Guidelines will be clear

11) For building RPM package leave your project name directory and run command

    devassistant c -n <your_project_name> -b <build_name>

    build_name can be obtain from mock -r command

