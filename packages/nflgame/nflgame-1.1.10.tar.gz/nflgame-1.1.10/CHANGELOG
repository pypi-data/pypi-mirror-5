1.1.10
======
  - Make the FieldPosition type constructor more accepting of
    different inputs. e.g., an integer. Also, added an add_yards
    method to FieldPosition that returns a new FieldPosition
    with the given yards added to it.
  - Make the default string representation of a game unambiguous.
  - Modified the quarter numbering correction of drives to be
    smarter by looking at all plays of a drive instead of just
    the last one.
  - Modified the play duplication logic to be heuristically smarter.
    Namely, instead of just looking at play ids, nflgame now
    inspects play data to see if two plays are semantically
    equivalent. This was necessary because duplicate plays could
    have different ids.
  - Manually corrected some seriously corrupt data in the
    Week 13 match up DET at NO. Also updated a couple other
    games from 2012 with updates from upstream.
  - Updated players.json with most recent player meta data.


1.1.9
=====
  - Manually fixed the ATL/SF 2012 playoff game so that it
    reports itself as being "over".
  - Make the license field in setup.py accurate.
  - Added "gamekey" or "gsis" identifiers to nflgame's
    schedule data. These ids are used in other services,
    like Neulion's content delivery network.
  - Added a method to the Game class that returns the season
    year that the game was played. In particular, games
    played in January or February of 2013 will still return
    2012.
  - Added a new "schedule" field to the Game class which contains
    the meta data in nflgame/schedule.py.


1.1.8
=====
Data updates:

  - Schedule (end of 2012 postseason)
  - README inconsistency.
  - Make the CSV function output consistent column headings/ordering.


1.1.7
=====
Data updates:

  - Player database (end of 2012 regular season)
  - Game data (full 2012 regular season)
  - Game schedule up to first week of 2012 postseason


1.1.6
=====
Data update. And made parsing game times a bit more robust with respect to
errant or malformed data.


1.1.5
=====
Added player team and position information to CSV output. Team information
should always be available, but position information is dependent on whether
or not the player meta data exists for that particular player. (Chances are
good.)


1.1.4
=====
Bug fixes and added game diffs to the nflgame.live callback API.

- Fixed a bug where Game.max_player_stats didn't include statistics from 
  players that only had stats recorded in play-by-play data.

- When player stats are combined over a game or multiple games, keep the 'home' 
  attribute if the two objects agree on its value.

- Added Week 2 data from the 2012 season.

- The callback function used in the nflgame.live module now requires a third 
  parameter: a list of diffs between the games reported in the last interval 
  and the games reported in the current interval. It is hopefully useful in 
  inspecting statistics and plays that have been added or changed since the 
  last inspection of the game data. (The diffs list is orthogonal to the first 
  two parameters: active and completed.)

- Fixed bug #14. Games that hadn't started yet weren't filtered out of the 
  return list of nflgame.games and related functions.

- Fixed a bug where if JSON data from NFL.com is totally unparseable, then we 
  return None when constructing a Game object rather than crash the program.

- Added a team attribute to PlayerStats objects.

- When filtering by a particular field, if that fields value is None, then 
  always return False.


1.1.3
=====
Bug fixes.

- Fixed a bug that made pytz a hard dependency when importing nflgame.


1.1.2
=====
Added a couple of convenience methods to the API and fixed a few bugs.

- Added a 'started' parameter to nflgame.{games,games_gen,one} that when set,
  will only return games that have already started or will start in five
  minutes. This is useful for preemptying 404 errors that may be too costly.

- Added a max_player_stats method to the Game class. It works by combining
  player statistics reported at the game level and player statistics reported
  at the play level. Each statistic is combined by taking the max of each
  value. (This is a heuristic designed to mitigate errors in the GameCenter
  JSON data. It is not perfect.)

- Deprecated the nflgame.combine function. It has been replaced by three
  different ways of combining player data across games: combine game level
  player statistics with nflgame.combine_game_stats, combine play level
  player statistics with nflgame.combine_play_stats and combine the maximum
  of game and play level statistics with nflgame.combine_max_stats.

- Added three two point conversion properties to player stats objects: twopta,
  twoptm and twoptmissed. These group the two point conversion statistics that
  exist only as individual passing, rushing and receiving statistics.

- Fixed a bug in the main sequence generator where decorated properties
  could not be used as a field in 'filter'. (i.e., use 'getattr' instead of
  accessing '__dict__' directly.)

- Fixed bug 9. (Updated PlayerStats.csv to work with recent API changes.)

- Added a 'defense_tds' statistical field in the nflgame.statmap module for
  convenience purposes.

