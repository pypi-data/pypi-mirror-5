Metadata-Version: 1.0
Name: Sixpack-client
Version: 0.3.0
Summary: Python client for Sixpack, an A/B testing framework under active development at SeatGeek
Home-page: http://github.com/seatgeek/sixpack-py
Author: SeatGeek
Author-email: hi@seatgeek.com
License: Copyright (c) 2013, SeatGeek, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

Neither the name of the SeatGeek nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Description: Sixpack
        =======
        
        Python client library for SeatGeak's Sixpack ab testing framework.
        
        Installation
        ------------
        
        First install in your virtual environment::
        
            $ pip install sixpack-client
        
        Usage
        -----
        
        Basic example::
        
        
            from sixpack.sixpack import Session
        
            session = Session()
        
            # Participate in a test (creates the test if necessary)
            session.participate("new-test", ["alternative-1", "alternative-2"])
        
            # Convert
            session.convert("new-test")
        
        Each session has a `client_id` associated with it that must be preserved across requests. Here's what the first request might look like::
        
            session = Session
            session.participate("new-test", ["alternative-1", "alternative-2"])
            set_cookie_in_your_web_framework("sixpack-id", session.client_id)
        
        For future requests, create the `Session` using the `client_id` stored in the cookie::
        
            client_id = get_cookie_from_web_framework("sixpack-id")
            session = Session(client_id=client_id)
            session.convert("new-test")
        
        If you already have a client_id (you can generate one using `sixpack.generate_client_id()`) you can use the `participate()` and `convert()` methods to avoid instantiating a `Session` yourself. This can help to clean up your logic a bit::
        
            from sixpack.sixpack import participate, convert
        
            partipate("new-test", ["alternative-1", "alternative-2"], client_id)
        
            convert("new-test", client_id)
        
        
        Contributing
        ------------
        
        1. Fork it
        2. Create your feature branch (`git checkout -b my-new-feature`)
        3. Commit your changes (`git commit -am 'Added some feature'`)
        4. Push to the branch (`git push origin my-new-feature`)
        5. Create new Pull Request
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2.7
