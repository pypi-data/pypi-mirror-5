
(function(){var define,requireModule;(function(){var registry={},seen={};define=function(name,deps,callback){registry[name]={deps:deps,callback:callback};};requireModule=function(name){if(seen[name]){return seen[name];}
seen[name]={};var mod,deps,callback,reified,exports;mod=registry[name];if(!mod){throw new Error("Module '"+name+"' not found.");}
deps=mod.deps;callback=mod.callback;reified=[];exports;for(var i=0,l=deps.length;i<l;i++){if(deps[i]==='exports'){reified.push(exports={});}else{reified.push(requireModule(deps[i]));}}
var value=callback.apply(this,reified);return seen[name]=exports||value;};})();(function(){if('undefined'===typeof DS){DS=Ember.Namespace.create({VERSION:'0.13'});if('undefined'!==typeof window){window.DS=DS;}}})();(function(){var get=Ember.get,set=Ember.set;DS.NewJSONSerializer=Ember.Object.extend({deserialize:function(type,data){var store=get(this,'store');type.eachRelationship(function(key,relationship){var type=relationship.type,value=data[key];if(value==null){return;}
if(relationship.kind==='belongsTo'){this.deserializeRecordId(data,key,type,value);}else if(relationship.kind==='hasMany'){this.deserializeRecordIds(data,key,type,value);}},this);return data;},deserializeRecordId:function(data,key,type,id){if(typeof id==='number'||typeof id==='string'){data[key]=get(this,'store').recordFor(type,id);}},deserializeRecordIds:function(data,key,type,ids){for(var i=0,l=ids.length;i<l;i++){this.deserializeRecordId(ids,i,type,ids[i]);}}});})();(function(){if(!Ember.DataAdapter){return;}
var get=Ember.get,capitalize=Ember.String.capitalize,underscore=Ember.String.underscore,DS=window.DS;DS.DebugAdapter=Ember.DataAdapter.extend({getFilters:function(){return[{name:'isNew',desc:'New'},{name:'isModified',desc:'Modified'},{name:'isClean',desc:'Clean'}];},detect:function(klass){return klass!==DS.Model&&DS.Model.detect(klass);},columnsForType:function(type){var columns=[{name:'id',desc:'Id'}],count=0,self=this;Ember.A(get(type,'attributes')).forEach(function(name,meta){if(count++>self.attributeLimit){return false;}
var desc=capitalize(underscore(name).replace('_',' '));columns.push({name:name,desc:desc});});return columns;},getRecords:function(type){return this.get('store').all(type);},getRecordColumnValues:function(record){var self=this,count=0,columnValues={id:get(record,'id')};record.eachAttribute(function(key){if(count++>self.attributeLimit){return false;}
var value=get(record,key);columnValues[key]=value;});return columnValues;},getRecordKeywords:function(record){var keywords=[],keys=Ember.A(['id']);record.eachAttribute(function(key){keys.push(key);});keys.forEach(function(key){keywords.push(get(record,key));});return keywords;},getRecordFilterValues:function(record){return{isNew:record.get('isNew'),isModified:record.get('isDirty')&&!record.get('isNew'),isClean:!record.get('isDirty')};},getRecordColor:function(record){var color='black';if(record.get('isNew')){color='green';}else if(record.get('isDirty')){color='blue';}
return color;},observeRecord:function(record,recordUpdated){var releaseMethods=Ember.A(),self=this,keysToObserve=Ember.A(['id','isNew','isDirty']);record.eachAttribute(function(key){keysToObserve.push(key);});keysToObserve.forEach(function(key){var handler=function(){recordUpdated(self.wrapRecord(record));};Ember.addObserver(record,key,handler);releaseMethods.push(function(){Ember.removeObserver(record,key,handler);});});var release=function(){releaseMethods.forEach(function(fn){fn();});};return release;}});})();(function(){var set=Ember.set;Ember.onLoad('Ember.Application',function(Application){Application.initializer({name:"store",initialize:function(container,application){Ember.assert("You included Ember Data but didn't define "+application.toString()+".Store",application.Store);application.register('store:main',application.Store);application.register('serializer:_default',DS.NewJSONSerializer);container.lookup('store:main');}});if(DS.DebugAdapter){Application.initializer({name:"dataAdapter",initialize:function(container,application){application.register('dataAdapter:main',DS.DebugAdapter);}});}
Application.initializer({name:"injectStore",initialize:function(container,application){application.inject('controller','store','store:main');application.inject('route','store','store:main');application.inject('dataAdapter','store','store:main');}});});})();(function(){Ember.Date=Ember.Date||{};var origParse=Date.parse,numericKeys=[1,4,5,6,7,10,11];Ember.Date.parse=function(date){var timestamp,struct,minutesOffset=0;if((struct=/^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))){for(var i=0,k;(k=numericKeys[i]);++i){struct[k]=+struct[k]||0;}
struct[2]=(+struct[2]||1)-1;struct[3]=+struct[3]||1;if(struct[8]!=='Z'&&struct[9]!==undefined){minutesOffset=struct[10]*60+struct[11];if(struct[9]==='+'){minutesOffset=0-minutesOffset;}}
timestamp=Date.UTC(struct[1],struct[2],struct[3],struct[4],struct[5]+minutesOffset,struct[6],struct[7]);}
else{timestamp=origParse?origParse(date):NaN;}
return timestamp;};if(Ember.EXTEND_PROTOTYPES===true||Ember.EXTEND_PROTOTYPES.Date){Date.parse=Ember.Date.parse;}})();(function(){})();(function(){var Evented=Ember.Evented,Deferred=Ember.DeferredMixin,run=Ember.run,get=Ember.get;var LoadPromise=Ember.Mixin.create(Evented,Deferred,{init:function(){this._super.apply(this,arguments);this.one('didLoad',this,function(){this.resolve(this);});this.one('becameError',this,function(){this.reject(this);});if(get(this,'isLoaded')){this.trigger('didLoad');}}});DS.LoadPromise=LoadPromise;})();(function(){var get=Ember.get,set=Ember.set;var LoadPromise=DS.LoadPromise;DS.RecordArray=Ember.ArrayProxy.extend(LoadPromise,{type:null,content:null,isLoaded:false,isUpdating:false,store:null,objectAtContent:function(index){var content=get(this,'content'),reference=content.objectAt(index),store=get(this,'store');if(reference instanceof DS.Model){return reference;}
if(reference){return store.recordForReference(reference);}},materializedObjectAt:function(index){var reference=get(this,'content').objectAt(index);if(!reference){return;}
if(get(this,'store').recordIsMaterialized(reference)){return this.objectAt(index);}},update:function(){if(get(this,'isUpdating')){return;}
var store=get(this,'store'),type=get(this,'type');store.fetchAll(type,this);},addReference:function(reference){get(this,'content').addObject(reference);},removeReference:function(reference){get(this,'content').removeObject(reference);}});})();(function(){var get=Ember.get;DS.FilteredRecordArray=DS.RecordArray.extend({filterFunction:null,isLoaded:true,replace:function(){var type=get(this,'type').toString();throw new Error("The result of a client-side filter (on "+type+") is immutable.");},updateFilter:Ember.observer(function(){var manager=get(this,'manager');manager.updateFilter(this,get(this,'type'),get(this,'filterFunction'));},'filterFunction')});})();(function(){var get=Ember.get,set=Ember.set;DS.AdapterPopulatedRecordArray=DS.RecordArray.extend({query:null,replace:function(){var type=get(this,'type').toString();throw new Error("The result of a server query (on "+type+") is immutable.");},load:function(references){this.setProperties({content:Ember.A(references),isLoaded:true});Ember.run.once(this,'trigger','didLoad');}});})();(function(){var get=Ember.get,set=Ember.set;var map=Ember.EnumerableUtils.map;DS.ManyArray=DS.RecordArray.extend({init:function(){this._super.apply(this,arguments);this._changesToSync=Ember.OrderedSet.create();},owner:null,isPolymorphic:false,isLoaded:false,loadingRecordsCount:function(count){this.loadingRecordsCount=count;},loadedRecord:function(){this.loadingRecordsCount--;if(this.loadingRecordsCount===0){set(this,'isLoaded',true);this.trigger('didLoad');}},fetch:function(){var references=get(this,'content'),store=get(this,'store'),owner=get(this,'owner');store.fetchUnloadedReferences(references,owner);},replaceContent:function(index,removed,added){added=map(added,function(record){Ember.assert("You can only add records of "+(get(this,'type')&&get(this,'type').toString())+" to this relationship.",!get(this,'type')||(get(this,'type').detectInstance(record)));return get(record,'_reference');},this);this._super(index,removed,added);},arrangedContentDidChange:function(){this.fetch();},arrayContentWillChange:function(index,removed,added){var owner=get(this,'owner'),name=get(this,'name');if(!owner._suspendedRelationships){for(var i=index;i<index+removed;i++){var reference=get(this,'content').objectAt(i);var change=DS.RelationshipChange.createChange(owner.get('_reference'),reference,get(this,'store'),{parentType:owner.constructor,changeType:"remove",kind:"hasMany",key:name});this._changesToSync.add(change);}}
return this._super.apply(this,arguments);},arrayContentDidChange:function(index,removed,added){this._super.apply(this,arguments);var owner=get(this,'owner'),name=get(this,'name'),store=get(this,'store');if(!owner._suspendedRelationships){for(var i=index;i<index+added;i++){var reference=get(this,'content').objectAt(i);var change=DS.RelationshipChange.createChange(owner.get('_reference'),reference,store,{parentType:owner.constructor,changeType:"add",kind:"hasMany",key:name});change.hasManyName=name;this._changesToSync.add(change);}
this._changesToSync.forEach(function(change){change.sync();});DS.OneToManyChange.ensureSameTransaction(this._changesToSync,store);this._changesToSync.clear();}},createRecord:function(hash,transaction){var owner=get(this,'owner'),store=get(owner,'store'),type=get(this,'type'),record;Ember.assert("You can not create records of "+(get(this,'type')&&get(this,'type').toString())+" on this polymorphic relationship.",!get(this,'isPolymorphic'));transaction=transaction||get(owner,'transaction');record=store.createRecord.call(store,type,hash,transaction);this.pushObject(record);return record;}});})();(function(){})();(function(){var get=Ember.get,set=Ember.set,forEach=Ember.EnumerableUtils.forEach;DS.Transaction=Ember.Object.extend({init:function(){set(this,'records',Ember.OrderedSet.create());},createRecord:function(type,hash){var store=get(this,'store');return store.createRecord(type,hash,this);},isEqualOrDefault:function(other){if(this===other||other===get(this,'store.defaultTransaction')){return true;}},isDefault:Ember.computed(function(){return this===get(this,'store.defaultTransaction');}).volatile(),add:function(record){Ember.assert("You must pass a record into transaction.add()",record instanceof DS.Model);var store=get(this,'store');var adapter=get(store,'_adapter');var serializer=get(adapter,'serializer');serializer.eachEmbeddedRecord(record,function(embeddedRecord,embeddedType){if(embeddedType==='load'){return;}
this.add(embeddedRecord);},this);this.adoptRecord(record);},relationships:Ember.computed(function(){var relationships=Ember.OrderedSet.create(),records=get(this,'records'),store=get(this,'store');forEach(records,function(record){var reference=get(record,'_reference');var changes=store.relationshipChangesFor(reference);for(var i=0;i<changes.length;i++){relationships.add(changes[i]);}});return relationships;}).volatile(),commitDetails:Ember.computed(function(){var commitDetails=Ember.MapWithDefault.create({defaultValue:function(){return{created:Ember.OrderedSet.create(),updated:Ember.OrderedSet.create(),deleted:Ember.OrderedSet.create()};}});var records=get(this,'records'),store=get(this,'store');forEach(records,function(record){if(!get(record,'isDirty'))return;record.send('willCommit');var adapter=store.adapterForType(record.constructor);commitDetails.get(adapter)[get(record,'dirtyType')].add(record);});return commitDetails;}).volatile(),commit:function(){var store=get(this,'store');if(get(this,'isDefault')){set(store,'defaultTransaction',store.transaction());}
this.removeCleanRecords();var commitDetails=get(this,'commitDetails'),relationships=get(this,'relationships');forEach(commitDetails,function(adapter,commitDetails){Ember.assert("You tried to commit records but you have no adapter",adapter);Ember.assert("You tried to commit records but your adapter does not implement `commit`",adapter.commit);adapter.commit(store,commitDetails);});relationships.forEach(function(relationship){relationship.destroy();});},rollback:function(){var references=Ember.OrderedSet.create();var relationships=get(this,'relationships');relationships.forEach(function(r){references.add(r.firstRecordReference);references.add(r.secondRecordReference);r.destroy();});var records=get(this,'records');forEach(records,function(record){if(!record.get('isDirty'))return;record.send('rollback');});this.removeCleanRecords();references.forEach(function(r){if(r&&r.record){var record=r.record;record.suspendRelationshipObservers(function(){record.reloadHasManys();});}},this);},remove:function(record){var defaultTransaction=get(this,'store.defaultTransaction');defaultTransaction.adoptRecord(record);},removeCleanRecords:function(){var records=get(this,'records');forEach(records,function(record){if(!record.get('isDirty')){this.remove(record);}},this);},adoptRecord:function(record){var oldTransaction=get(record,'transaction');if(oldTransaction){oldTransaction.removeRecord(record);}
get(this,'records').add(record);set(record,'transaction',this);},removeRecord:function(record){get(this,'records').remove(record);}});DS.Transaction.reopenClass({ensureSameTransaction:function(records){var transactions=Ember.A();forEach(records,function(record){if(record){transactions.pushObject(get(record,'transaction'));}});var transaction=transactions.reduce(function(prev,t){if(!get(t,'isDefault')){if(prev===null){return t;}
Ember.assert("All records in a changed relationship must be in the same transaction. You tried to change the relationship between records when one is in "+t+" and the other is in "+prev,t===prev);}
return prev;},null);if(transaction){forEach(records,function(record){if(record){transaction.add(record);}});}else{transaction=transactions.objectAt(0);}
return transaction;}});})();(function(){var get=Ember.get;var resolveMapConflict=function(oldValue,newValue){return oldValue;};var transformMapKey=function(key,value){return key;};var transformMapValue=function(key,value){return value;};DS._Mappable=Ember.Mixin.create({createInstanceMapFor:function(mapName){var instanceMeta=getMappableMeta(this);instanceMeta.values=instanceMeta.values||{};if(instanceMeta.values[mapName]){return instanceMeta.values[mapName];}
var instanceMap=instanceMeta.values[mapName]=new Ember.Map();var klass=this.constructor;while(klass&&klass!==DS.Store){this._copyMap(mapName,klass,instanceMap);klass=klass.superclass;}
instanceMeta.values[mapName]=instanceMap;return instanceMap;},_copyMap:function(mapName,klass,instanceMap){var classMeta=getMappableMeta(klass);var classMap=classMeta[mapName];if(classMap){classMap.forEach(eachMap,this);}
function eachMap(key,value){var transformedKey=(klass.transformMapKey||transformMapKey)(key,value);var transformedValue=(klass.transformMapValue||transformMapValue)(key,value);var oldValue=instanceMap.get(transformedKey);var newValue=transformedValue;if(oldValue){newValue=(this.constructor.resolveMapConflict||resolveMapConflict)(oldValue,newValue);}
instanceMap.set(transformedKey,newValue);}}});DS._Mappable.generateMapFunctionFor=function(mapName,transform){return function(key,value){var meta=getMappableMeta(this);var map=meta[mapName]||Ember.MapWithDefault.create({defaultValue:function(){return{};}});transform.call(this,key,value,map);meta[mapName]=map;};};function getMappableMeta(obj){var meta=Ember.meta(obj,true),keyName='DS.Mappable',value=meta[keyName];if(!value){meta[keyName]={};}
if(!meta.hasOwnProperty(keyName)){meta[keyName]=Ember.create(meta[keyName]);}
return meta[keyName];}})();(function(){var get=Ember.get,set=Ember.set;var once=Ember.run.once;var isNone=Ember.isNone;var forEach=Ember.EnumerableUtils.forEach;var indexOf=Ember.EnumerableUtils.indexOf;var map=Ember.EnumerableUtils.map;var UNLOADED='unloaded';var LOADING='loading';var MATERIALIZED={materialized:true};var CREATED={created:true};var coerceId=function(id){return id==null?null:id+'';};DS.Store=Ember.Object.extend(DS._Mappable,{init:function(){if(!get(DS,'defaultStore')||get(this,'isDefaultStore')){set(DS,'defaultStore',this);}
this.typeMaps={};this.recordArrayManager=DS.RecordArrayManager.create({store:this});this.relationshipChanges={};set(this,'currentTransaction',this.transaction());set(this,'defaultTransaction',this.transaction());},transaction:function(){return DS.Transaction.create({store:this});},materializeData:function(record){var reference=get(record,'_reference'),data=reference.data,adapter=this.adapterForType(record.constructor);reference.data=MATERIALIZED;record.setupData();if(data!==CREATED){adapter.materialize(record,data,reference.prematerialized);}},adapter:Ember.computed(function(){if(!Ember.testing){Ember.debug("A custom DS.Adapter was not provided as the 'Adapter' property of your application's Store. The default (DS.RESTAdapter) will be used.");}
return'DS.RESTAdapter';}).property(),serialize:function(record,options){return this.adapterForType(record.constructor).serialize(record,options);},_adapter:Ember.computed(function(){var adapter=get(this,'adapter');if(typeof adapter==='string'){adapter=get(this,adapter,false)||get(Ember.lookup,adapter);}
if(DS.Adapter.detect(adapter)){adapter=adapter.create();}
return adapter;}).property('adapter'),clientIdCounter:1,createRecord:function(type,properties,transaction){properties=properties||{};var record=type._create({store:this});transaction=transaction||get(this,'defaultTransaction');transaction.adoptRecord(record);var id=properties.id;if(isNone(id)){var adapter=this.adapterForType(type);if(adapter&&adapter.generateIdForRecord){id=coerceId(adapter.generateIdForRecord(this,record));properties.id=id;}}
id=coerceId(id);var reference=this.createReference(type,id);reference.data=CREATED;set(record,'_reference',reference);reference.record=record;record.loadedData();record.setupData();record.setProperties(properties);Ember.run(record,'resolve',record);return record;},deleteRecord:function(record){record.deleteRecord();},unloadRecord:function(record){record.unloadRecord();},find:function(type,id){type=this.modelFor(type);if(id===undefined){return this.findAll(type);}
if(Ember.typeOf(id)==='object'){return this.findQuery(type,id);}
return this.findById(type,coerceId(id));},findById:function(type,id){var reference;if(this.hasReferenceForId(type,id)){reference=this.referenceForId(type,id);if(reference.data!==UNLOADED){return this.recordForReference(reference);}}
if(!reference){reference=this.createReference(type,id);}
reference.data=LOADING;var record=this.legacyMaterializeRecord(reference);if(reference.data===LOADING){var adapter=this.adapterForType(type),store=this;Ember.assert("You tried to find a record but you have no adapter (for "+type+")",adapter);Ember.assert("You tried to find a record but your adapter does not implement `find`",adapter.find);var thenable=adapter.find(this,type,id);if(thenable&&thenable.then){thenable.then(null,function(error){store.recordWasError(record);});}}
return record;},reloadRecord:function(record){var type=record.constructor,adapter=this.adapterForType(type),store=this,id=get(record,'id');Ember.assert("You cannot update a record without an ID",id);Ember.assert("You tried to update a record but you have no adapter (for "+type+")",adapter);Ember.assert("You tried to update a record but your adapter does not implement `find`",adapter.find);var thenable=adapter.find(this,type,id);if(thenable&&thenable.then){thenable.then(null,function(error){store.recordWasError(record);});}},recordForReference:function(reference){var record=reference.record;if(!record){record=this.legacyMaterializeRecord(reference);}
return record;},unloadedReferences:function(references){var unloadedReferences=[];for(var i=0,l=references.length;i<l;i++){var reference=references[i];if(reference instanceof DS.Model){if(get(reference,'isEmpty')){unloadedReferences.push(reference);}
continue;}
if(reference.data===UNLOADED){unloadedReferences.push(reference);reference.data=LOADING;}}
return unloadedReferences;},fetchUnloadedReferences:function(references,owner){var unloadedReferences=this.unloadedReferences(references);this.fetchMany(unloadedReferences,owner);},fetchMany:function(references,owner){if(!references.length){return;}
var referencesByTypeMap=Ember.MapWithDefault.create({defaultValue:function(){return Ember.A();}});forEach(references,function(reference){referencesByTypeMap.get(reference.type).push(reference);});forEach(referencesByTypeMap,function(type){var references=referencesByTypeMap.get(type),ids=map(references,function(reference){return reference.id;});var adapter=this.adapterForType(type);Ember.assert("You tried to load many records but you have no adapter (for "+type+")",adapter);Ember.assert("You tried to load many records but your adapter does not implement `findMany`",adapter.findMany);adapter.findMany(this,type,ids,owner);},this);},hasReferenceForId:function(type,id){id=coerceId(id);return!!this.typeMapFor(type).idToReference[id];},referenceForId:function(type,id){id=coerceId(id);var reference=this.typeMapFor(type).idToReference[id];if(!reference){reference=this.createReference(type,id);reference.data=UNLOADED;}
return reference;},findMany:function(type,idsOrReferencesOrOpaque,record,relationship){if(!Ember.isArray(idsOrReferencesOrOpaque)){var adapter=this.adapterForType(type);if(adapter&&adapter.findHasMany){adapter.findHasMany(this,record,relationship,idsOrReferencesOrOpaque);}else if(!isNone(idsOrReferencesOrOpaque)){Ember.assert("You tried to load many records but you have no adapter (for "+type+")",adapter);Ember.assert("You tried to load many records but your adapter does not implement `findHasMany`",adapter.findHasMany);}
return this.recordArrayManager.createManyArray(type,Ember.A());}
var references=map(idsOrReferencesOrOpaque,function(reference){if(typeof reference!=='object'&&reference!==null&&!(reference instanceof DS.Model)){return this.referenceForId(type,reference);}
return reference;},this);var unloadedReferences=this.unloadedReferences(references),manyArray=this.recordArrayManager.createManyArray(type,Ember.A(references)),reference,i,l;manyArray.loadingRecordsCount(unloadedReferences.length);if(unloadedReferences.length){for(i=0,l=unloadedReferences.length;i<l;i++){reference=unloadedReferences[i];this.recordArrayManager.registerWaitingRecordArray(manyArray,reference);}
this.fetchMany(unloadedReferences,record);}else{manyArray.set('isLoaded',true);Ember.run.once(function(){manyArray.trigger('didLoad');});}
return manyArray;},findQuery:function(type,query){var array=DS.AdapterPopulatedRecordArray.create({type:type,query:query,content:Ember.A(),store:this});var adapter=this.adapterForType(type);Ember.assert("You tried to load a query but you have no adapter (for "+type+")",adapter);Ember.assert("You tried to load a query but your adapter does not implement `findQuery`",adapter.findQuery);adapter.findQuery(this,type,query,array);return array;},findAll:function(type){return this.fetchAll(type,this.all(type));},fetchAll:function(type,array){var adapter=this.adapterForType(type),sinceToken=this.typeMapFor(type).metadata.since;set(array,'isUpdating',true);Ember.assert("You tried to load all records but you have no adapter (for "+type+")",adapter);Ember.assert("You tried to load all records but your adapter does not implement `findAll`",adapter.findAll);adapter.findAll(this,type,sinceToken);return array;},metaForType:function(type,property,data){var target=this.typeMapFor(type).metadata;set(target,property,data);},didUpdateAll:function(type){var findAllCache=this.typeMapFor(type).findAllCache;set(findAllCache,'isUpdating',false);},all:function(type){var typeMap=this.typeMapFor(type),findAllCache=typeMap.findAllCache;if(findAllCache){return findAllCache;}
var array=DS.RecordArray.create({type:type,content:Ember.A(),store:this,isLoaded:true});this.recordArrayManager.registerFilteredRecordArray(array,type);typeMap.findAllCache=array;return array;},filter:function(type,query,filter){if(arguments.length===3){this.findQuery(type,query);}else if(arguments.length===2){filter=query;}
var array=DS.FilteredRecordArray.create({type:type,content:Ember.A(),store:this,manager:this.recordArrayManager,filterFunction:filter});this.recordArrayManager.registerFilteredRecordArray(array,type,filter);return array;},recordIsLoaded:function(type,id){if(!this.hasReferenceForId(type,id)){return false;}
return typeof this.referenceForId(type,id).data==='object';},dataWasUpdated:function(type,reference,record){if(get(record,'isDeleted')){return;}
if(typeof reference.data==="object"){this.recordArrayManager.referenceDidChange(reference);}},save:function(){once(this,'commitDefaultTransaction');},commit:Ember.aliasMethod('save'),commitDefaultTransaction:function(){get(this,'defaultTransaction').commit();},scheduleSave:function(record){get(this,'currentTransaction').add(record);once(this,'flushSavedRecords');},flushSavedRecords:function(){get(this,'currentTransaction').commit();set(this,'currentTransaction',this.transaction());},didSaveRecord:function(record,data){if(data){this.updateId(record,data);this.updateRecordData(record,data);}else{this.didUpdateAttributes(record);}
record.adapterDidCommit();},didSaveRecords:function(list,dataList){var i=0;forEach(list,function(record){this.didSaveRecord(record,dataList&&dataList[i++]);},this);},recordWasInvalid:function(record,errors){record.adapterDidInvalidate(errors);},recordWasError:function(record){record.adapterDidError();},didUpdateAttribute:function(record,attributeName,value){record.adapterDidUpdateAttribute(attributeName,value);},didUpdateAttributes:function(record){record.eachAttribute(function(attributeName){this.didUpdateAttribute(record,attributeName);},this);},didUpdateRelationship:function(record,relationshipName){var clientId=get(record,'_reference').clientId;var relationship=this.relationshipChangeFor(clientId,relationshipName);if(relationship){relationship.adapterDidUpdate();}},didUpdateRelationships:function(record){var changes=this.relationshipChangesFor(get(record,'_reference'));for(var name in changes){if(!changes.hasOwnProperty(name)){continue;}
changes[name].adapterDidUpdate();}},didReceiveId:function(record,id){var typeMap=this.typeMapFor(record.constructor),clientId=get(record,'clientId'),oldId=get(record,'id');Ember.assert("An adapter cannot assign a new id to a record that already has an id. "+record+" had id: "+oldId+" and you tried to update it with "+id+". This likely happened because your server returned data in response to a find or update that had a different id than the one you sent.",oldId===undefined||id===oldId);typeMap.idToCid[id]=clientId;this.clientIdToId[clientId]=id;},updateRecordData:function(record,data){get(record,'_reference').data=data;record.didChangeData();},updateId:function(record,data){var type=record.constructor,typeMap=this.typeMapFor(type),reference=get(record,'_reference'),oldId=get(record,'id'),id=this.preprocessData(type,data);Ember.assert("An adapter cannot assign a new id to a record that already has an id. "+record+" had id: "+oldId+" and you tried to update it with "+id+". This likely happened because your server returned data in response to a find or update that had a different id than the one you sent.",oldId===null||id===oldId);typeMap.idToReference[id]=reference;reference.id=id;},preprocessData:function(type,data){return this.adapterForType(type).extractId(type,data);},typeMapFor:function(type){var typeMaps=get(this,'typeMaps'),guid=Ember.guidFor(type),typeMap;typeMap=typeMaps[guid];if(typeMap){return typeMap;}
typeMap={idToReference:{},references:[],metadata:{}};typeMaps[guid]=typeMap;return typeMap;},load:function(type,data,prematerialized){var id;if(typeof data==='number'||typeof data==='string'){id=data;data=prematerialized;prematerialized=null;}
if(prematerialized&&prematerialized.id){id=prematerialized.id;}else if(id===undefined){id=this.preprocessData(type,data);}
id=coerceId(id);var reference=this.referenceForId(type,id);if(reference.record){once(reference.record,'loadedData');}
reference.data=data;reference.prematerialized=prematerialized;this.recordArrayManager.referenceDidChange(reference);return reference;},newLoad:function(type,data){var id=coerceId(data.id),reference=this.referenceForId(type,id);reference.data=MATERIALIZED;if(reference.record){reference.record.setupData(data);}
this.recordArrayManager.referenceDidChange(reference);return reference;},modelFor:function(key){if(typeof key!=='string'){return key;}
var factory=this.container.lookupFactory('model:'+key);factory.store=this;return factory;},push:function(type,data){var serializer=this.serializerFor(type);type=this.modelFor(type);data=serializer.deserialize(type,data);this.newLoad(type,data);var reference=this.referenceForId(type,data.id),record=reference.record;if(record){return record;}else{return this.materializeRecord(reference,data);}},recordFor:function(type,id){type=this.modelFor(type);var reference=this.referenceForId(type,id);if(reference.record){return reference.record;}
return this.materializeRecord(reference);},loadMany:function(type,ids,dataList){if(dataList===undefined){dataList=ids;ids=map(dataList,function(data){return this.preprocessData(type,data);},this);}
return map(ids,function(id,i){return this.load(type,id,dataList[i]);},this);},loadHasMany:function(record,key,ids){var type=record.get(key+'.type'),tuples=map(ids,function(id){return{id:id,type:type};});record.materializeHasMany(key,tuples);record.hasManyDidChange(key);var relationship=record.cacheFor(key);if(relationship){set(relationship,'isLoaded',true);relationship.trigger('didLoad');}},createReference:function(type,id){var typeMap=this.typeMapFor(type),idToReference=typeMap.idToReference;Ember.assert('The id '+id+' has already been used with another record of type '+type.toString()+'.',!id||!idToReference[id]);var reference={id:id,clientId:this.clientIdCounter++,type:type};if(id){idToReference[id]=reference;}
typeMap.references.push(reference);return reference;},materializeRecord:function(reference,data){var record=reference.type._create({id:reference.id,store:this,_reference:reference});reference.record=record;get(this,'defaultTransaction').adoptRecord(record);if(data){record.setupData(data);}
return record;},legacyMaterializeRecord:function(reference){var record=reference.type._create({id:reference.id,store:this,_reference:reference});reference.record=record;get(this,'defaultTransaction').adoptRecord(record);record.loadingData();if(typeof reference.data==='object'){record.loadedData();}
return record;},dematerializeRecord:function(record){var reference=get(record,'_reference'),type=reference.type,id=reference.id,typeMap=this.typeMapFor(type);record.updateRecordArrays();if(id){delete typeMap.idToReference[id];}
var loc=indexOf(typeMap.references,reference);typeMap.references.splice(loc,1);},willDestroy:function(){if(get(DS,'defaultStore')===this){set(DS,'defaultStore',null);}},addRelationshipChangeFor:function(clientReference,childKey,parentReference,parentKey,change){var clientId=clientReference.clientId,parentClientId=parentReference?parentReference.clientId:parentReference;var key=childKey+parentKey;var changes=this.relationshipChanges;if(!(clientId in changes)){changes[clientId]={};}
if(!(parentClientId in changes[clientId])){changes[clientId][parentClientId]={};}
if(!(key in changes[clientId][parentClientId])){changes[clientId][parentClientId][key]={};}
changes[clientId][parentClientId][key][change.changeType]=change;},removeRelationshipChangeFor:function(clientReference,childKey,parentReference,parentKey,type){var clientId=clientReference.clientId,parentClientId=parentReference?parentReference.clientId:parentReference;var changes=this.relationshipChanges;var key=childKey+parentKey;if(!(clientId in changes)||!(parentClientId in changes[clientId])||!(key in changes[clientId][parentClientId])){return;}
delete changes[clientId][parentClientId][key][type];},relationshipChangeFor:function(clientReference,childKey,parentReference,parentKey,type){var clientId=clientReference.clientId,parentClientId=parentReference?parentReference.clientId:parentReference;var changes=this.relationshipChanges;var key=childKey+parentKey;if(!(clientId in changes)||!(parentClientId in changes[clientId])){return;}
if(type){return changes[clientId][parentClientId][key][type];}
else{return changes[clientId][parentClientId][key]["add"]||changes[clientId][parentClientId][key]["remove"];}},relationshipChangePairsFor:function(reference){var toReturn=[];if(!reference){return toReturn;}
var changesObject=this.relationshipChanges[reference.clientId];for(var objKey in changesObject){if(changesObject.hasOwnProperty(objKey)){for(var changeKey in changesObject[objKey]){if(changesObject[objKey].hasOwnProperty(changeKey)){toReturn.push(changesObject[objKey][changeKey]);}}}}
return toReturn;},relationshipChangesFor:function(reference){var toReturn=[];if(!reference){return toReturn;}
var relationshipPairs=this.relationshipChangePairsFor(reference);forEach(relationshipPairs,function(pair){var addedChange=pair["add"];var removedChange=pair["remove"];if(addedChange){toReturn.push(addedChange);}
if(removedChange){toReturn.push(removedChange);}});return toReturn;},adapterForType:function(type){this._adaptersMap=this.createInstanceMapFor('adapters');var adapter=this._adaptersMap.get(type);if(adapter){return adapter;}
return this.get('_adapter');},recordAttributeDidChange:function(reference,attributeName,newValue,oldValue){var record=reference.record,dirtySet=new Ember.OrderedSet(),adapter=this.adapterForType(record.constructor);if(adapter.dirtyRecordsForAttributeChange){adapter.dirtyRecordsForAttributeChange(dirtySet,record,attributeName,newValue,oldValue);}
dirtySet.forEach(function(record){record.adapterDidDirty();});},recordBelongsToDidChange:function(dirtySet,child,relationship){var adapter=this.adapterForType(child.constructor);if(adapter.dirtyRecordsForBelongsToChange){adapter.dirtyRecordsForBelongsToChange(dirtySet,child,relationship);}},recordHasManyDidChange:function(dirtySet,parent,relationship){var adapter=this.adapterForType(parent.constructor);if(adapter.dirtyRecordsForHasManyChange){adapter.dirtyRecordsForHasManyChange(dirtySet,parent,relationship);}},serializerFor:function(type){var container=this.container;return container.lookup('serializer:'+type)||container.lookup('serializer:application')||container.lookup('serializer:_default');}});DS.Store.reopenClass({registerAdapter:DS._Mappable.generateMapFunctionFor('adapters',function(type,adapter,map){map.set(type,adapter);}),transformMapKey:function(key){if(typeof key==='string'){var transformedKey;transformedKey=get(Ember.lookup,key);Ember.assert("Could not find model at path "+key,transformedKey);return transformedKey;}else{return key;}},transformMapValue:function(key,value){if(Ember.Object.detect(value)){return value.create();}
return value;}});})();(function(){var get=Ember.get,set=Ember.set,once=Ember.run.once,arrayMap=Ember.ArrayPolyfills.map;var hasDefinedProperties=function(object){var names=Ember.keys(object);var i,l,name;for(i=0,l=names.length;i<l;i++){name=names[i];if(object.hasOwnProperty(name)&&object[name]){return true;}}
return false;};var didChangeData=function(record){record.materializeData();};var willSetProperty=function(record,context){context.oldValue=get(record,context.name);var change=DS.AttributeChange.createChange(context);record._changesToSync[context.name]=change;};var didSetProperty=function(record,context){var change=record._changesToSync[context.name];change.value=get(record,context.name);change.sync();};var DirtyState={initialState:'uncommitted',isDirty:true,uncommitted:{willSetProperty:willSetProperty,didSetProperty:didSetProperty,becomeDirty:Ember.K,willCommit:function(record){record.transitionTo('inFlight');},becameClean:function(record){record.withTransaction(function(t){t.remove(record);});record.transitionTo('loaded.materializing');},becameInvalid:function(record){record.transitionTo('invalid');},rollback:function(record){record.rollback();}},inFlight:{isSaving:true,enter:function(record){record.becameInFlight();},materializingData:function(record){set(record,'lastDirtyType',get(this,'dirtyType'));record.transitionTo('materializing');},didCommit:function(record){var dirtyType=get(this,'dirtyType');record.withTransaction(function(t){t.remove(record);});record.transitionTo('saved');record.send('invokeLifecycleCallbacks',dirtyType);},didChangeData:didChangeData,becameInvalid:function(record,errors){set(record,'errors',errors);record.transitionTo('invalid');record.send('invokeLifecycleCallbacks');},becameError:function(record){record.transitionTo('error');record.send('invokeLifecycleCallbacks');}},invalid:{isValid:false,exit:function(record){record.withTransaction(function(t){t.remove(record);});},deleteRecord:function(record){record.transitionTo('deleted.uncommitted');record.clearRelationships();},willSetProperty:willSetProperty,didSetProperty:function(record,context){var errors=get(record,'errors'),key=context.name;set(errors,key,null);if(!hasDefinedProperties(errors)){record.send('becameValid');}
didSetProperty(record,context);},becomeDirty:Ember.K,rollback:function(record){record.send('becameValid');record.send('rollback');},becameValid:function(record){record.transitionTo('uncommitted');},invokeLifecycleCallbacks:function(record){record.trigger('becameInvalid',record);}}};function deepClone(object){var clone={},value;for(var prop in object){value=object[prop];if(value&&typeof value==='object'){clone[prop]=deepClone(value);}else{clone[prop]=value;}}
return clone;}
function mixin(original,hash){for(var prop in hash){original[prop]=hash[prop];}
return original;}
function dirtyState(options){var newState=deepClone(DirtyState);return mixin(newState,options);}
var createdState=dirtyState({dirtyType:'created',isNew:true});var updatedState=dirtyState({dirtyType:'updated'});createdState.uncommitted.deleteRecord=function(record){record.clearRelationships();record.transitionTo('deleted.saved');};createdState.uncommitted.rollback=function(record){DirtyState.uncommitted.rollback.apply(this,arguments);record.transitionTo('deleted.saved');};updatedState.uncommitted.deleteRecord=function(record){record.transitionTo('deleted.uncommitted');record.clearRelationships();};var RootState={isEmpty:false,isLoading:false,isLoaded:false,isReloading:false,isDirty:false,isSaving:false,isDeleted:false,isError:false,isNew:false,isValid:true,empty:{isEmpty:true,loadingData:function(record){record.transitionTo('loading');},loadedData:function(record){record.transitionTo('loaded.created.uncommitted');},pushedData:function(record){record.transitionTo('loaded.saved');}},loading:{isLoading:true,loadedData:didChangeData,materializingData:function(record){record.transitionTo('loaded.materializing.firstTime');},becameError:function(record){record.transitionTo('error');record.send('invokeLifecycleCallbacks');}},loaded:{initialState:'saved',isLoaded:true,materializing:{willSetProperty:Ember.K,didSetProperty:Ember.K,didChangeData:didChangeData,finishedMaterializing:function(record){record.transitionTo('loaded.saved');},firstTime:{isLoaded:false,exit:function(record){once(function(){record.trigger('didLoad');});}}},reloading:{isReloading:true,enter:function(record){var store=get(record,'store');store.reloadRecord(record);},exit:function(record){once(record,'trigger','didReload');},loadedData:didChangeData,materializingData:function(record){record.transitionTo('loaded.materializing');}},saved:{willSetProperty:willSetProperty,didSetProperty:didSetProperty,didChangeData:didChangeData,loadedData:didChangeData,reloadRecord:function(record){record.transitionTo('loaded.reloading');},materializingData:function(record){record.transitionTo('loaded.materializing');},becomeDirty:function(record){record.transitionTo('updated.uncommitted');},deleteRecord:function(record){record.transitionTo('deleted.uncommitted');record.clearRelationships();},unloadRecord:function(record){record.clearRelationships();record.transitionTo('deleted.saved');},didCommit:function(record){record.withTransaction(function(t){t.remove(record);});record.send('invokeLifecycleCallbacks',get(record,'lastDirtyType'));},invokeLifecycleCallbacks:function(record,dirtyType){if(dirtyType==='created'){record.trigger('didCreate',record);}else{record.trigger('didUpdate',record);}
record.trigger('didCommit',record);}},created:createdState,updated:updatedState},deleted:{initialState:'uncommitted',dirtyType:'deleted',isDeleted:true,isLoaded:true,isDirty:true,setup:function(record){var store=get(record,'store');store.recordArrayManager.remove(record);},uncommitted:{willCommit:function(record){record.transitionTo('inFlight');},rollback:function(record){record.rollback();},becomeDirty:Ember.K,becameClean:function(record){record.withTransaction(function(t){t.remove(record);});record.transitionTo('loaded.materializing');}},inFlight:{isSaving:true,enter:function(record){record.becameInFlight();},didCommit:function(record){record.withTransaction(function(t){t.remove(record);});record.transitionTo('saved');record.send('invokeLifecycleCallbacks');}},saved:{isDirty:false,setup:function(record){var store=get(record,'store');store.dematerializeRecord(record);},invokeLifecycleCallbacks:function(record){record.trigger('didDelete',record);record.trigger('didCommit',record);}}},error:{isError:true,invokeLifecycleCallbacks:function(record){record.trigger('becameError',record);}}};var hasOwnProp={}.hasOwnProperty;function wireState(object,parent,name){object=mixin(parent?Ember.create(parent):{},object);object.parentState=parent;object.stateName=name;for(var prop in object){if(!object.hasOwnProperty(prop)||prop==='parentState'||prop==='stateName'){continue;}
if(typeof object[prop]==='object'){object[prop]=wireState(object[prop],object,name+"."+prop);}}
return object;}
RootState=wireState(RootState,null,"root");DS.RootState=RootState;})();(function(){var LoadPromise=DS.LoadPromise;var get=Ember.get,set=Ember.set,map=Ember.EnumerableUtils.map,merge=Ember.merge;var arrayMap=Ember.ArrayPolyfills.map;var retrieveFromCurrentState=Ember.computed(function(key,value){return get(get(this,'currentState'),key);}).property('currentState').readOnly();DS.Model=Ember.Object.extend(Ember.Evented,LoadPromise,{isEmpty:retrieveFromCurrentState,isLoading:retrieveFromCurrentState,isLoaded:retrieveFromCurrentState,isReloading:retrieveFromCurrentState,isDirty:retrieveFromCurrentState,isSaving:retrieveFromCurrentState,isDeleted:retrieveFromCurrentState,isError:retrieveFromCurrentState,isNew:retrieveFromCurrentState,isValid:retrieveFromCurrentState,dirtyType:retrieveFromCurrentState,clientId:null,id:null,transaction:null,currentState:null,errors:null,serialize:function(options){var store=get(this,'store');return store.serialize(this,options);},toJSON:function(options){var serializer=DS.JSONSerializer.create();return serializer.serialize(this,options);},didLoad:Ember.K,didReload:Ember.K,didUpdate:Ember.K,didCreate:Ember.K,didDelete:Ember.K,becameInvalid:Ember.K,becameError:Ember.K,data:Ember.computed(function(){if(!this._data){this.setupData();}
return this._data;}).property(),materializeData:function(){this.send('materializingData');get(this,'store').materializeData(this);this.suspendRelationshipObservers(function(){this.notifyPropertyChange('data');});},_data:null,init:function(){set(this,'currentState',DS.RootState.empty);this._super();this._setup();},_setup:function(){this._changesToSync={};},send:function(name,context){var currentState=get(this,'currentState');if(!currentState[name]){this._unhandledEvent(currentState,name,context);}
return currentState[name](this,context);},transitionTo:function(name){var pivotName=name.split(".",1),currentState=get(this,'currentState'),state=currentState;do{if(state.exit){state.exit(this);}
state=state.parentState;}while(!state.hasOwnProperty(pivotName));var path=name.split(".");var setups=[],enters=[],i,l;for(i=0,l=path.length;i<l;i++){state=state[path[i]];if(state.enter){enters.push(state);}
if(state.setup){setups.push(state);}}
for(i=0,l=enters.length;i<l;i++){enters[i].enter(this);}
set(this,'currentState',state);for(i=0,l=setups.length;i<l;i++){setups[i].setup(this);}},_unhandledEvent:function(state,name,context){var errorMessage="Attempted to handle event `"+name+"` ";errorMessage+="on "+String(this)+" while in state ";errorMessage+=state.stateName+". ";if(context!==undefined){errorMessage+="Called with "+Ember.inspect(context)+".";}
throw new Ember.Error(errorMessage);},withTransaction:function(fn){var transaction=get(this,'transaction');if(transaction){fn(transaction);}},loadingData:function(){this.send('loadingData');},loadedData:function(){this.send('loadedData');},pushedData:function(){this.send('pushedData');},didChangeData:function(){this.send('didChangeData');},deleteRecord:function(){this.send('deleteRecord');},unloadRecord:function(){Ember.assert("You can only unload a loaded, non-dirty record.",!get(this,'isDirty'));this.send('unloadRecord');},clearRelationships:function(){this.eachRelationship(function(name,relationship){if(relationship.kind==='belongsTo'){set(this,name,null);}else if(relationship.kind==='hasMany'){this.clearHasMany(relationship);}},this);},updateRecordArrays:function(){var store=get(this,'store');if(store){store.dataWasUpdated(this.constructor,get(this,'_reference'),this);}},adapterDidCommit:function(){var attributes=get(this,'data');get(this.constructor,'attributes').forEach(function(name,meta){attributes[name]=get(this,name);},this);this.send('didCommit');this.updateRecordArraysLater();},adapterDidDirty:function(){this.send('becomeDirty');this.updateRecordArraysLater();},dataDidChange:Ember.observer(function(){this.reloadHasManys();this.send('finishedMaterializing');},'data'),reloadHasManys:function(){var relationships=get(this.constructor,'relationshipsByName');this.updateRecordArraysLater();relationships.forEach(function(name,relationship){if(relationship.kind==='hasMany'){this.hasManyDidChange(relationship.key);}},this);},hasManyDidChange:function(key){var cachedValue=this.cacheFor(key);if(cachedValue){var type=get(this.constructor,'relationshipsByName').get(key).type;var store=get(this,'store');var ids=this._data[key]||[];var references=map(ids,function(id){if(typeof id==='object'){if(id.clientId){return id;}else{return store.referenceForId(id.type,id.id);}}
return store.referenceForId(type,id);});set(cachedValue,'content',Ember.A(references));}},updateRecordArraysLater:function(){Ember.run.once(this,this.updateRecordArrays);},setupData:function(data){this._data=data||{id:null};if(data){this.pushedData();}},materializeId:function(id){set(this,'id',id);},materializeAttributes:function(attributes){Ember.assert("Must pass a hash of attributes to materializeAttributes",!!attributes);merge(this._data,attributes);},materializeAttribute:function(name,value){this._data[name]=value;},materializeHasMany:function(name,tuplesOrReferencesOrOpaque){var tuplesOrReferencesOrOpaqueType=typeof tuplesOrReferencesOrOpaque;if(tuplesOrReferencesOrOpaque&&tuplesOrReferencesOrOpaqueType!=='string'&&tuplesOrReferencesOrOpaque.length>1){Ember.assert('materializeHasMany expects tuples, references or opaque token, not '+tuplesOrReferencesOrOpaque[0],tuplesOrReferencesOrOpaque[0].hasOwnProperty('id')&&tuplesOrReferencesOrOpaque[0].type);}
if(tuplesOrReferencesOrOpaqueType==="string"){this._data[name]=tuplesOrReferencesOrOpaque;}else{var references=tuplesOrReferencesOrOpaque;if(tuplesOrReferencesOrOpaque&&Ember.isArray(tuplesOrReferencesOrOpaque)){references=this._convertTuplesToReferences(tuplesOrReferencesOrOpaque);}
this._data[name]=references;}},materializeBelongsTo:function(name,tupleOrReference){if(tupleOrReference){Ember.assert('materializeBelongsTo expects a tuple or a reference, not a '+tupleOrReference,!tupleOrReference||(tupleOrReference.hasOwnProperty('id')&&tupleOrReference.hasOwnProperty('type')));}
this._data[name]=tupleOrReference;},_convertTuplesToReferences:function(tuplesOrReferences){return map(tuplesOrReferences,function(tupleOrReference){return this._convertTupleToReference(tupleOrReference);},this);},_convertTupleToReference:function(tupleOrReference){var store=get(this,'store');if(tupleOrReference.clientId){return tupleOrReference;}else{return store.referenceForId(tupleOrReference.type,tupleOrReference.id);}},rollback:function(){this._setup();this.send('becameClean');this.suspendRelationshipObservers(function(){this.notifyPropertyChange('data');});},toStringExtension:function(){return get(this,'id');},suspendRelationshipObservers:function(callback,binding){var observers=get(this.constructor,'relationshipNames').belongsTo;var self=this;try{this._suspendedRelationships=true;Ember._suspendObservers(self,observers,null,'belongsToDidChange',function(){Ember._suspendBeforeObservers(self,observers,null,'belongsToWillChange',function(){callback.call(binding||self);});});}finally{this._suspendedRelationships=false;}},becameInFlight:function(){},resolveOn:function(successEvent){var model=this;return new Ember.RSVP.Promise(function(resolve,reject){function success(){this.off('becameError',error);this.off('becameInvalid',error);resolve(this);}
function error(){this.off(successEvent,success);reject(this);}
model.one(successEvent,success);model.one('becameError',error);model.one('becameInvalid',error);});},save:function(){this.get('store').scheduleSave(this);return this.resolveOn('didCommit');},reload:function(){this.send('reloadRecord');return this.resolveOn('didReload');},adapterDidUpdateAttribute:function(attributeName,value){if(value!==undefined){get(this,'data')[attributeName]=value;this.notifyPropertyChange(attributeName);}else{value=get(this,attributeName);get(this,'data')[attributeName]=value;}
this.updateRecordArraysLater();},adapterDidInvalidate:function(errors){this.send('becameInvalid',errors);},adapterDidError:function(){this.send('becameError');},trigger:function(name){Ember.tryInvoke(this,name,[].slice.call(arguments,1));this._super.apply(this,arguments);}});var storeAlias=function(methodName){return function(){var store=get(DS,'defaultStore'),args=[].slice.call(arguments);args.unshift(this);Ember.assert("Your application does not have a 'Store' property defined. Attempts to call '"+methodName+"' on model classes will fail. Please provide one as with 'YourAppName.Store = DS.Store.extend()'",!!store);return store[methodName].apply(store,args);};};DS.Model.reopenClass({_create:DS.Model.create,create:function(){throw new Ember.Error("You should not call `create` on a model. Instead, call `createRecord` with the attributes you would like to set.");},find:storeAlias('find'),all:storeAlias('all'),query:storeAlias('findQuery'),filter:storeAlias('filter'),createRecord:storeAlias('createRecord')});})();(function(){var get=Ember.get;DS.Model.reopenClass({attributes:Ember.computed(function(){var map=Ember.Map.create();this.eachComputedProperty(function(name,meta){if(meta.isAttribute){Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from "+this.toString(),name!=='id');meta.name=name;map.set(name,meta);}});return map;})});DS.Model.reopen({eachAttribute:function(callback,binding){get(this.constructor,'attributes').forEach(function(name,meta){callback.call(binding,name,meta);},binding);},attributeWillChange:Ember.beforeObserver(function(record,key){var reference=get(record,'_reference'),store=get(record,'store');record.send('willSetProperty',{reference:reference,store:store,name:key});}),attributeDidChange:Ember.observer(function(record,key){record.send('didSetProperty',{name:key});})});function getAttr(record,options,key){var attributes=get(record,'data');var value=attributes[key];if(value===undefined){if(typeof options.defaultValue==="function"){value=options.defaultValue();}else{value=options.defaultValue;}}
return value;}
DS.attr=function(type,options){options=options||{};var meta={type:type,isAttribute:true,options:options};return Ember.computed(function(key,value,oldValue){if(arguments.length>1){Ember.assert("You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from "+this.constructor.toString(),key!=='id');}else{value=getAttr(this,options,key);}
return value;}).property('data').meta(meta);};})();(function(){})();(function(){var AttributeChange=DS.AttributeChange=function(options){this.reference=options.reference;this.store=options.store;this.name=options.name;this.oldValue=options.oldValue;};AttributeChange.createChange=function(options){return new AttributeChange(options);};AttributeChange.prototype={sync:function(){this.store.recordAttributeDidChange(this.reference,this.name,this.value,this.oldValue);this.destroy();},destroy:function(){var record=this.reference.record;delete record._changesToSync[this.name];}};})();(function(){var get=Ember.get,set=Ember.set;var forEach=Ember.EnumerableUtils.forEach;DS.RelationshipChange=function(options){this.parentReference=options.parentReference;this.childReference=options.childReference;this.firstRecordReference=options.firstRecordReference;this.firstRecordKind=options.firstRecordKind;this.firstRecordName=options.firstRecordName;this.secondRecordReference=options.secondRecordReference;this.secondRecordKind=options.secondRecordKind;this.secondRecordName=options.secondRecordName;this.changeType=options.changeType;this.store=options.store;this.committed={};};DS.RelationshipChangeAdd=function(options){DS.RelationshipChange.call(this,options);};DS.RelationshipChangeRemove=function(options){DS.RelationshipChange.call(this,options);};DS.RelationshipChange.create=function(options){return new DS.RelationshipChange(options);};DS.RelationshipChangeAdd.create=function(options){return new DS.RelationshipChangeAdd(options);};DS.RelationshipChangeRemove.create=function(options){return new DS.RelationshipChangeRemove(options);};DS.OneToManyChange={};DS.OneToNoneChange={};DS.ManyToNoneChange={};DS.OneToOneChange={};DS.ManyToManyChange={};DS.RelationshipChange._createChange=function(options){if(options.changeType==="add"){return DS.RelationshipChangeAdd.create(options);}
if(options.changeType==="remove"){return DS.RelationshipChangeRemove.create(options);}};DS.RelationshipChange.determineRelationshipType=function(recordType,knownSide){var knownKey=knownSide.key,key,otherKind;var knownKind=knownSide.kind;var inverse=recordType.inverseFor(knownKey);if(inverse){key=inverse.name;otherKind=inverse.kind;}
if(!inverse){return knownKind==="belongsTo"?"oneToNone":"manyToNone";}
else{if(otherKind==="belongsTo"){return knownKind==="belongsTo"?"oneToOne":"manyToOne";}
else{return knownKind==="belongsTo"?"oneToMany":"manyToMany";}}};DS.RelationshipChange.createChange=function(firstRecordReference,secondRecordReference,store,options){var firstRecordType=firstRecordReference.type,changeType;changeType=DS.RelationshipChange.determineRelationshipType(firstRecordType,options);if(changeType==="oneToMany"){return DS.OneToManyChange.createChange(firstRecordReference,secondRecordReference,store,options);}
else if(changeType==="manyToOne"){return DS.OneToManyChange.createChange(secondRecordReference,firstRecordReference,store,options);}
else if(changeType==="oneToNone"){return DS.OneToNoneChange.createChange(firstRecordReference,secondRecordReference,store,options);}
else if(changeType==="manyToNone"){return DS.ManyToNoneChange.createChange(firstRecordReference,secondRecordReference,store,options);}
else if(changeType==="oneToOne"){return DS.OneToOneChange.createChange(firstRecordReference,secondRecordReference,store,options);}
else if(changeType==="manyToMany"){return DS.ManyToManyChange.createChange(firstRecordReference,secondRecordReference,store,options);}};DS.OneToNoneChange.createChange=function(childReference,parentReference,store,options){var key=options.key;var change=DS.RelationshipChange._createChange({parentReference:parentReference,childReference:childReference,firstRecordReference:childReference,store:store,changeType:options.changeType,firstRecordName:key,firstRecordKind:"belongsTo"});store.addRelationshipChangeFor(childReference,key,parentReference,null,change);return change;};DS.ManyToNoneChange.createChange=function(childReference,parentReference,store,options){var key=options.key;var change=DS.RelationshipChange._createChange({parentReference:childReference,childReference:parentReference,secondRecordReference:childReference,store:store,changeType:options.changeType,secondRecordName:options.key,secondRecordKind:"hasMany"});store.addRelationshipChangeFor(childReference,key,parentReference,null,change);return change;};DS.ManyToManyChange.createChange=function(childReference,parentReference,store,options){var key=options.key;var change=DS.RelationshipChange._createChange({parentReference:parentReference,childReference:childReference,firstRecordReference:childReference,secondRecordReference:parentReference,firstRecordKind:"hasMany",secondRecordKind:"hasMany",store:store,changeType:options.changeType,firstRecordName:key});store.addRelationshipChangeFor(childReference,key,parentReference,null,change);return change;};DS.OneToOneChange.createChange=function(childReference,parentReference,store,options){var key;if(options.parentType){key=options.parentType.inverseFor(options.key).name;}else if(options.key){key=options.key;}else{Ember.assert("You must pass either a parentType or belongsToName option to OneToManyChange.forChildAndParent",false);}
var change=DS.RelationshipChange._createChange({parentReference:parentReference,childReference:childReference,firstRecordReference:childReference,secondRecordReference:parentReference,firstRecordKind:"belongsTo",secondRecordKind:"belongsTo",store:store,changeType:options.changeType,firstRecordName:key});store.addRelationshipChangeFor(childReference,key,parentReference,null,change);return change;};DS.OneToOneChange.maintainInvariant=function(options,store,childReference,key){if(options.changeType==="add"&&store.recordIsMaterialized(childReference)){var child=store.recordForReference(childReference);var oldParent=get(child,key);if(oldParent){var correspondingChange=DS.OneToOneChange.createChange(childReference,oldParent.get('_reference'),store,{parentType:options.parentType,hasManyName:options.hasManyName,changeType:"remove",key:options.key});store.addRelationshipChangeFor(childReference,key,options.parentReference,null,correspondingChange);correspondingChange.sync();}}};DS.OneToManyChange.createChange=function(childReference,parentReference,store,options){var key;if(options.parentType){key=options.parentType.inverseFor(options.key).name;DS.OneToManyChange.maintainInvariant(options,store,childReference,key);}else if(options.key){key=options.key;}else{Ember.assert("You must pass either a parentType or belongsToName option to OneToManyChange.forChildAndParent",false);}
var change=DS.RelationshipChange._createChange({parentReference:parentReference,childReference:childReference,firstRecordReference:childReference,secondRecordReference:parentReference,firstRecordKind:"belongsTo",secondRecordKind:"hasMany",store:store,changeType:options.changeType,firstRecordName:key});store.addRelationshipChangeFor(childReference,key,parentReference,change.getSecondRecordName(),change);return change;};DS.OneToManyChange.maintainInvariant=function(options,store,childReference,key){var child=childReference.record;if(options.changeType==="add"&&child){var oldParent=get(child,key);if(oldParent){var correspondingChange=DS.OneToManyChange.createChange(childReference,oldParent.get('_reference'),store,{parentType:options.parentType,hasManyName:options.hasManyName,changeType:"remove",key:options.key});store.addRelationshipChangeFor(childReference,key,options.parentReference,correspondingChange.getSecondRecordName(),correspondingChange);correspondingChange.sync();}}};DS.OneToManyChange.ensureSameTransaction=function(changes){var records=Ember.A();forEach(changes,function(change){records.addObject(change.getSecondRecord());records.addObject(change.getFirstRecord());});return DS.Transaction.ensureSameTransaction(records);};DS.RelationshipChange.prototype={getSecondRecordName:function(){var name=this.secondRecordName,parent;if(!name){parent=this.secondRecordReference;if(!parent){return;}
var childType=this.firstRecordReference.type;var inverse=childType.inverseFor(this.firstRecordName);this.secondRecordName=inverse.name;}
return this.secondRecordName;},getFirstRecordName:function(){var name=this.firstRecordName;return name;},destroy:function(){var childReference=this.childReference,belongsToName=this.getFirstRecordName(),hasManyName=this.getSecondRecordName(),store=this.store;store.removeRelationshipChangeFor(childReference,belongsToName,this.parentReference,hasManyName,this.changeType);},getByReference:function(reference){if(!reference){return reference;}
if(reference.record){return reference.record;}},getSecondRecord:function(){return this.getByReference(this.secondRecordReference);},getFirstRecord:function(){return this.getByReference(this.firstRecordReference);},ensureSameTransaction:function(){var child=this.getFirstRecord(),parentRecord=this.getSecondRecord();var transaction=DS.Transaction.ensureSameTransaction([child,parentRecord]);this.transaction=transaction;return transaction;},callChangeEvents:function(){var child=this.getFirstRecord(),parentRecord=this.getSecondRecord();var dirtySet=new Ember.OrderedSet();if(parentRecord&&get(parentRecord,'isLoaded')){this.store.recordHasManyDidChange(dirtySet,parentRecord,this);}
if(child){this.store.recordBelongsToDidChange(dirtySet,child,this);}
dirtySet.forEach(function(record){record.adapterDidDirty();});},coalesce:function(){var relationshipPairs=this.store.relationshipChangePairsFor(this.firstRecordReference);forEach(relationshipPairs,function(pair){var addedChange=pair["add"];var removedChange=pair["remove"];if(addedChange&&removedChange){addedChange.destroy();removedChange.destroy();}});}};DS.RelationshipChangeAdd.prototype=Ember.create(DS.RelationshipChange.create({}));DS.RelationshipChangeRemove.prototype=Ember.create(DS.RelationshipChange.create({}));DS.RelationshipChangeAdd.prototype.changeType="add";DS.RelationshipChangeAdd.prototype.sync=function(){var secondRecordName=this.getSecondRecordName(),firstRecordName=this.getFirstRecordName(),firstRecord=this.getFirstRecord(),secondRecord=this.getSecondRecord();this.ensureSameTransaction();this.callChangeEvents();if(secondRecord&&firstRecord){if(this.secondRecordKind==="belongsTo"){secondRecord.suspendRelationshipObservers(function(){set(secondRecord,secondRecordName,firstRecord);});}
else if(this.secondRecordKind==="hasMany"){secondRecord.suspendRelationshipObservers(function(){get(secondRecord,secondRecordName).addObject(firstRecord);});}}
if(firstRecord&&secondRecord&&get(firstRecord,firstRecordName)!==secondRecord){if(this.firstRecordKind==="belongsTo"){firstRecord.suspendRelationshipObservers(function(){set(firstRecord,firstRecordName,secondRecord);});}
else if(this.firstRecordKind==="hasMany"){firstRecord.suspendRelationshipObservers(function(){get(firstRecord,firstRecordName).addObject(secondRecord);});}}
this.coalesce();};DS.RelationshipChangeRemove.prototype.changeType="remove";DS.RelationshipChangeRemove.prototype.sync=function(){var secondRecordName=this.getSecondRecordName(),firstRecordName=this.getFirstRecordName(),firstRecord=this.getFirstRecord(),secondRecord=this.getSecondRecord();this.ensureSameTransaction(firstRecord,secondRecord,secondRecordName,firstRecordName);this.callChangeEvents();if(secondRecord&&firstRecord){if(this.secondRecordKind==="belongsTo"){secondRecord.suspendRelationshipObservers(function(){set(secondRecord,secondRecordName,null);});}
else if(this.secondRecordKind==="hasMany"){secondRecord.suspendRelationshipObservers(function(){get(secondRecord,secondRecordName).removeObject(firstRecord);});}}
if(firstRecord&&get(firstRecord,firstRecordName)){if(this.firstRecordKind==="belongsTo"){firstRecord.suspendRelationshipObservers(function(){set(firstRecord,firstRecordName,null);});}
else if(this.firstRecordKind==="hasMany"){firstRecord.suspendRelationshipObservers(function(){get(firstRecord,firstRecordName).removeObject(secondRecord);});}}
this.coalesce();};})();(function(){})();(function(){var get=Ember.get,set=Ember.set,isNone=Ember.isNone;DS.belongsTo=function(type,options){Ember.assert("The first argument DS.belongsTo must be a model type or string, like DS.belongsTo(App.Person)",!!type&&(typeof type==='string'||DS.Model.detect(type)));options=options||{};var meta={type:type,isRelationship:true,options:options,kind:'belongsTo'};return Ember.computed(function(key,value){var data=get(this,'data'),store=get(this,'store'),belongsTo;if(typeof type==='string'){if(type.indexOf(".")===-1){type=store.modelFor(type);}else{type=get(Ember.lookup,type);}}
if(arguments.length===2){Ember.assert("You can only add a record of "+type.toString()+" to this relationship",!value||type.detectInstance(value));return value===undefined?null:value;}
belongsTo=data[key];if(belongsTo instanceof DS.Model){return belongsTo;}
if(isNone(belongsTo)){return null;}
if(belongsTo.clientId){return store.recordForReference(belongsTo);}
return store.findById(belongsTo.type,belongsTo.id);}).property('data').meta(meta);};DS.Model.reopen({belongsToWillChange:Ember.beforeObserver(function(record,key){if(get(record,'isLoaded')){var oldParent=get(record,key);var childReference=get(record,'_reference'),store=get(record,'store');if(oldParent){var change=DS.RelationshipChange.createChange(childReference,get(oldParent,'_reference'),store,{key:key,kind:"belongsTo",changeType:"remove"});change.sync();this._changesToSync[key]=change;}}}),belongsToDidChange:Ember.immediateObserver(function(record,key){if(get(record,'isLoaded')){var newParent=get(record,key);if(newParent){var childReference=get(record,'_reference'),store=get(record,'store');var change=DS.RelationshipChange.createChange(childReference,get(newParent,'_reference'),store,{key:key,kind:"belongsTo",changeType:"add"});change.sync();if(this._changesToSync[key]){DS.OneToManyChange.ensureSameTransaction([change,this._changesToSync[key]],store);}}}
delete this._changesToSync[key];})});})();(function(){var get=Ember.get,set=Ember.set,forEach=Ember.EnumerableUtils.forEach;var hasRelationship=function(type,options){options=options||{};var meta={type:type,isRelationship:true,options:options,kind:'hasMany'};return Ember.computed(function(key,value){var data=get(this,'data'),store=get(this,'store'),ids,relationship;if(typeof type==='string'){if(type.indexOf(".")===-1){type=store.modelFor(type);}else{type=get(Ember.lookup,type);}}
ids=data[key];relationship=store.findMany(type,ids,this,meta);set(relationship,'owner',this);set(relationship,'name',key);set(relationship,'isPolymorphic',options.polymorphic);return relationship;}).property().meta(meta);};DS.hasMany=function(type,options){Ember.assert("The type passed to DS.hasMany must be defined",!!type);return hasRelationship(type,options);};function clearUnmaterializedHasMany(record,relationship){var data=get(record,'data');var references=data[relationship.key];if(!references){return;}
var inverse=record.constructor.inverseFor(relationship.key);if(inverse){forEach(references,function(reference){var childRecord;if(childRecord=reference.record){record.suspendRelationshipObservers(function(){set(childRecord,inverse.name,null);});}});}}
DS.Model.reopen({clearHasMany:function(relationship){var hasMany=this.cacheFor(relationship.name);if(hasMany){hasMany.clear();}else{clearUnmaterializedHasMany(this,relationship);}}});})();(function(){var get=Ember.get,set=Ember.set;DS.Model.reopen({didDefineProperty:function(proto,key,value){if(value instanceof Ember.Descriptor){var meta=value.meta();if(meta.isRelationship&&meta.kind==='belongsTo'){Ember.addObserver(proto,key,null,'belongsToDidChange');Ember.addBeforeObserver(proto,key,null,'belongsToWillChange');}
if(meta.isAttribute){Ember.addObserver(proto,key,null,'attributeDidChange');Ember.addBeforeObserver(proto,key,null,'attributeWillChange');}
meta.parentType=proto.constructor;}}});DS.Model.reopenClass({typeForRelationship:function(name){var relationship=get(this,'relationshipsByName').get(name);return relationship&&relationship.type;},inverseFor:function(name){var inverseType=this.typeForRelationship(name);if(!inverseType){return null;}
var options=this.metaForProperty(name).options;if(options.inverse===null){return null;}
var inverseName,inverseKind;if(options.inverse){inverseName=options.inverse;inverseKind=Ember.get(inverseType,'relationshipsByName').get(inverseName).kind;}else{var possibleRelationships=findPossibleInverses(this,inverseType);if(possibleRelationships.length===0){return null;}
Ember.assert("You defined the '"+name+"' relationship on "+this+", but multiple possible inverse relationships of type "+this+" were found on "+inverseType+".",possibleRelationships.length===1);inverseName=possibleRelationships[0].name;inverseKind=possibleRelationships[0].kind;}
function findPossibleInverses(type,inverseType,possibleRelationships){possibleRelationships=possibleRelationships||[];var relationshipMap=get(inverseType,'relationships');if(!relationshipMap){return;}
var relationships=relationshipMap.get(type);if(relationships){possibleRelationships.push.apply(possibleRelationships,relationshipMap.get(type));}
if(type.superclass){findPossibleInverses(type.superclass,inverseType,possibleRelationships);}
return possibleRelationships;}
return{type:inverseType,name:inverseName,kind:inverseKind};},relationships:Ember.computed(function(){var map=new Ember.MapWithDefault({defaultValue:function(){return[];}});this.eachComputedProperty(function(name,meta){if(meta.isRelationship){if(typeof meta.type==='string'){meta.type=Ember.get(Ember.lookup,meta.type);}
var relationshipsForType=map.get(meta.type);relationshipsForType.push({name:name,kind:meta.kind});}});return map;}),relationshipNames:Ember.computed(function(){var names={hasMany:[],belongsTo:[]};this.eachComputedProperty(function(name,meta){if(meta.isRelationship){names[meta.kind].push(name);}});return names;}),relatedTypes:Ember.computed(function(){var type,types=Ember.A();this.eachComputedProperty(function(name,meta){if(meta.isRelationship){type=meta.type;if(typeof type==='string'){type=get(this,type,false)||get(Ember.lookup,type);}
Ember.assert("You specified a hasMany ("+meta.type+") on "+meta.parentType+" but "+meta.type+" was not found.",type);if(!types.contains(type)){Ember.assert("Trying to sideload "+name+" on "+this.toString()+" but the type doesn't exist.",!!type);types.push(type);}}});return types;}),relationshipsByName:Ember.computed(function(){var map=Ember.Map.create(),type;this.eachComputedProperty(function(name,meta){if(meta.isRelationship){meta.key=name;type=meta.type;if(typeof type==='string'){if(type.match(/^[^A-Z]/)){type=this.store.modelFor(type);}else{type=get(this,type,false)||get(Ember.lookup,type);}
meta.type=type;}
map.set(name,meta);}});return map;}),fields:Ember.computed(function(){var map=Ember.Map.create();this.eachComputedProperty(function(name,meta){if(meta.isRelationship){map.set(name,meta.kind);}else if(meta.isAttribute){map.set(name,'attribute');}});return map;}),eachRelationship:function(callback,binding){get(this,'relationshipsByName').forEach(function(name,relationship){callback.call(binding,name,relationship);});},eachRelatedType:function(callback,binding){get(this,'relatedTypes').forEach(function(type){callback.call(binding,type);});}});DS.Model.reopen({eachRelationship:function(callback,binding){this.constructor.eachRelationship(callback,binding);}});})();(function(){})();(function(){var get=Ember.get,set=Ember.set;var once=Ember.run.once;var forEach=Ember.EnumerableUtils.forEach;DS.RecordArrayManager=Ember.Object.extend({init:function(){this.filteredRecordArrays=Ember.MapWithDefault.create({defaultValue:function(){return[];}});this.changedReferences=[];},referenceDidChange:function(reference){this.changedReferences.push(reference);once(this,this.updateRecordArrays);},recordArraysForReference:function(reference){reference.recordArrays=reference.recordArrays||Ember.OrderedSet.create();return reference.recordArrays;},updateRecordArrays:function(){forEach(this.changedReferences,function(reference){var type=reference.type,recordArrays=this.filteredRecordArrays.get(type),filter;forEach(recordArrays,function(array){filter=get(array,'filterFunction');this.updateRecordArray(array,filter,type,reference);},this);var manyArrays=reference.loadingRecordArrays;if(manyArrays){for(var i=0,l=manyArrays.length;i<l;i++){manyArrays[i].loadedRecord();}
reference.loadingRecordArrays=[];}},this);this.changedReferences=[];},updateRecordArray:function(array,filter,type,reference){var shouldBeInArray,record;if(!filter){shouldBeInArray=true;}else{record=this.store.recordForReference(reference);shouldBeInArray=filter(record);}
var recordArrays=this.recordArraysForReference(reference);if(shouldBeInArray){recordArrays.add(array);array.addReference(reference);}else if(!shouldBeInArray){recordArrays.remove(array);array.removeReference(reference);}},remove:function(record){var reference=get(record,'_reference');var recordArrays=reference.recordArrays||[];forEach(recordArrays,function(array){array.removeReference(reference);});},updateFilter:function(array,type,filter){var typeMap=this.store.typeMapFor(type),references=typeMap.references,reference,data,shouldFilter,record;for(var i=0,l=references.length;i<l;i++){reference=references[i];shouldFilter=false;data=reference.data;if(typeof data==='object'){if(record=reference.record){if(!get(record,'isDeleted')){shouldFilter=true;}}else{shouldFilter=true;}
if(shouldFilter){this.updateRecordArray(array,filter,type,reference);}}}},createManyArray:function(type,references){var manyArray=DS.ManyArray.create({type:type,content:references,store:this.store});forEach(references,function(reference){var arrays=this.recordArraysForReference(reference);arrays.add(manyArray);},this);return manyArray;},registerFilteredRecordArray:function(array,type,filter){var recordArrays=this.filteredRecordArrays.get(type);recordArrays.push(array);this.updateFilter(array,type,filter);},registerWaitingRecordArray:function(array,reference){var loadingRecordArrays=reference.loadingRecordArrays||[];loadingRecordArrays.push(array);reference.loadingRecordArrays=loadingRecordArrays;}});})();(function(){var get=Ember.get,set=Ember.set,map=Ember.ArrayPolyfills.map,isNone=Ember.isNone;function mustImplement(name){return function(){throw new Ember.Error("Your serializer "+this.toString()+" does not implement the required method "+name);};}
DS.Serializer=Ember.Object.extend({init:function(){this.mappings=Ember.Map.create();this.aliases=Ember.Map.create();this.configurations=Ember.Map.create();this.globalConfigurations={};},extract:mustImplement('extract'),extractMany:mustImplement('extractMany'),extractId:mustImplement('extractId'),extractAttribute:mustImplement('extractAttribute'),extractHasMany:mustImplement('extractHasMany'),extractBelongsTo:mustImplement('extractBelongsTo'),extractRecordRepresentation:function(loader,type,data,shouldSideload){var prematerialized={},reference;if(shouldSideload){reference=loader.sideload(type,data);}else{reference=loader.load(type,data);}
this.eachEmbeddedHasMany(type,function(name,relationship){var embeddedData=this.extractEmbeddedData(data,this.keyFor(relationship));if(!isNone(embeddedData)){this.extractEmbeddedHasMany(loader,relationship,embeddedData,reference,prematerialized);}},this);this.eachEmbeddedBelongsTo(type,function(name,relationship){var embeddedData=this.extractEmbeddedData(data,this.keyFor(relationship));if(!isNone(embeddedData)){this.extractEmbeddedBelongsTo(loader,relationship,embeddedData,reference,prematerialized);}},this);loader.prematerialize(reference,prematerialized);return reference;},extractEmbeddedHasMany:function(loader,relationship,array,parent,prematerialized){var references=map.call(array,function(item){if(!item){return;}
var foundType=this.extractEmbeddedType(relationship,item),reference=this.extractRecordRepresentation(loader,foundType,item,true);var embeddedType=this.embeddedType(parent.type,relationship.key);if(embeddedType==='always'){reference.parent=parent;}
var parentType=relationship.parentType,inverse=parentType.inverseFor(relationship.key);if(inverse){var inverseName=inverse.name;reference.prematerialized[inverseName]=parent;}
return reference;},this);prematerialized[relationship.key]=references;},extractEmbeddedBelongsTo:function(loader,relationship,data,parent,prematerialized){var foundType=this.extractEmbeddedType(relationship,data),reference=this.extractRecordRepresentation(loader,foundType,data,true);prematerialized[relationship.key]=reference;var embeddedType=this.embeddedType(parent.type,relationship.key);if(embeddedType==='always'){reference.parent=parent;}},extractEmbeddedType:function(relationship,data){return relationship.type;},extractEmbeddedData:mustImplement(),serialize:function(record,options){options=options||{};var serialized=this.createSerializedForm(),id;if(options.includeId){if(id=get(record,'id')){this._addId(serialized,record.constructor,id);}}
if(options.includeType){this.addType(serialized,record.constructor);}
this.addAttributes(serialized,record);this.addRelationships(serialized,record);return serialized;},serializeValue:function(value,attributeType){var transform=this.transforms?this.transforms[attributeType]:null;Ember.assert("You tried to use an attribute type ("+attributeType+") that has not been registered",transform);return transform.serialize(value);},serializeId:function(id){if(Ember.isEmpty(id)){return null;}
if(isNaN(+id)){return id;}
return+id;},addAttributes:function(data,record){record.eachAttribute(function(name,attribute){this._addAttribute(data,record,name,attribute.type);},this);},addAttribute:mustImplement('addAttribute'),addId:mustImplement('addId'),addType:Ember.K,createSerializedForm:function(){return{};},addRelationships:function(data,record){record.eachRelationship(function(name,relationship){if(relationship.kind==='belongsTo'){this._addBelongsTo(data,record,name,relationship);}else if(relationship.kind==='hasMany'){this._addHasMany(data,record,name,relationship);}},this);},addBelongsTo:mustImplement('addBelongsTo'),addHasMany:mustImplement('addHasMany'),keyForAttributeName:function(type,name){return name;},primaryKey:function(type){return"id";},keyForBelongsTo:function(type,name){return this.keyForAttributeName(type,name);},keyForHasMany:function(type,name){return this.keyForAttributeName(type,name);},materialize:function(record,serialized,prematerialized){var id;if(Ember.isNone(get(record,'id'))){if(prematerialized&&prematerialized.hasOwnProperty('id')){id=prematerialized.id;}else{id=this.extractId(record.constructor,serialized);}
record.materializeId(id);}
this.materializeAttributes(record,serialized,prematerialized);this.materializeRelationships(record,serialized,prematerialized);},deserializeValue:function(value,attributeType){var transform=this.transforms?this.transforms[attributeType]:null;Ember.assert("You tried to use an attribute type ("+attributeType+") that has not been registered",transform);return transform.deserialize(value);},materializeAttributes:function(record,serialized,prematerialized){record.eachAttribute(function(name,attribute){if(prematerialized&&prematerialized.hasOwnProperty(name)){record.materializeAttribute(name,prematerialized[name]);}else{this.materializeAttribute(record,serialized,name,attribute.type);}},this);},materializeAttribute:function(record,serialized,attributeName,attributeType){var value=this.extractAttribute(record.constructor,serialized,attributeName);value=this.deserializeValue(value,attributeType);record.materializeAttribute(attributeName,value);},materializeRelationships:function(record,serialized,prematerialized){record.eachRelationship(function(name,relationship){if(relationship.kind==='hasMany'){if(prematerialized&&prematerialized.hasOwnProperty(name)){var tuplesOrReferencesOrOpaque=this._convertPrematerializedHasMany(relationship.type,prematerialized[name]);record.materializeHasMany(name,tuplesOrReferencesOrOpaque);}else{this.materializeHasMany(name,record,serialized,relationship,prematerialized);}}else if(relationship.kind==='belongsTo'){if(prematerialized&&prematerialized.hasOwnProperty(name)){var tupleOrReference=this._convertTuple(relationship.type,prematerialized[name]);record.materializeBelongsTo(name,tupleOrReference);}else{this.materializeBelongsTo(name,record,serialized,relationship,prematerialized);}}},this);},materializeHasMany:function(name,record,hash,relationship){var type=record.constructor,key=this._keyForHasMany(type,relationship.key),idsOrTuples=this.extractHasMany(type,hash,key),tuples=idsOrTuples;if(idsOrTuples&&Ember.isArray(idsOrTuples)){tuples=this._convertTuples(relationship.type,idsOrTuples);}
record.materializeHasMany(name,tuples);},materializeBelongsTo:function(name,record,hash,relationship){var type=record.constructor,key=this._keyForBelongsTo(type,relationship.key),idOrTuple,tuple=null;if(relationship.options&&relationship.options.polymorphic){idOrTuple=this.extractBelongsToPolymorphic(type,hash,key);}else{idOrTuple=this.extractBelongsTo(type,hash,key);}
if(!isNone(idOrTuple)){tuple=this._convertTuple(relationship.type,idOrTuple);}
record.materializeBelongsTo(name,tuple);},_convertPrematerializedHasMany:function(type,prematerializedHasMany){var tuplesOrReferencesOrOpaque;if(typeof prematerializedHasMany==='string'){tuplesOrReferencesOrOpaque=prematerializedHasMany;}else{tuplesOrReferencesOrOpaque=this._convertTuples(type,prematerializedHasMany);}
return tuplesOrReferencesOrOpaque;},_convertTuples:function(type,idsOrTuples){return map.call(idsOrTuples,function(idOrTuple){return this._convertTuple(type,idOrTuple);},this);},_convertTuple:function(type,idOrTuple){var foundType;if(typeof idOrTuple==='object'){if(DS.Model.detect(idOrTuple.type)){return idOrTuple;}else{foundType=this.typeFromAlias(idOrTuple.type);Ember.assert("Unable to resolve type "+idOrTuple.type+".  You may need to configure your serializer aliases.",!!foundType);return{id:idOrTuple.id,type:foundType};}}
return{id:idOrTuple,type:type};},_primaryKey:function(type){var config=this.configurationForType(type),primaryKey=config&&config.primaryKey;if(primaryKey){return primaryKey;}else{return this.primaryKey(type);}},_addAttribute:function(data,record,attributeName,attributeType){var key=this._keyForAttributeName(record.constructor,attributeName);var value=get(record,attributeName);this.addAttribute(data,key,this.serializeValue(value,attributeType));},_addId:function(hash,type,id){var primaryKey=this._primaryKey(type);this.addId(hash,primaryKey,this.serializeId(id));},_keyForAttributeName:function(type,name){return this._keyFromMappingOrHook('keyForAttributeName',type,name);},_keyForBelongsTo:function(type,name){return this._keyFromMappingOrHook('keyForBelongsTo',type,name);},keyFor:function(description){var type=description.parentType,name=description.key;switch(description.kind){case'belongsTo':return this._keyForBelongsTo(type,name);case'hasMany':return this._keyForHasMany(type,name);}},_keyForHasMany:function(type,name){return this._keyFromMappingOrHook('keyForHasMany',type,name);},_addBelongsTo:function(data,record,name,relationship){var key=this._keyForBelongsTo(record.constructor,name);this.addBelongsTo(data,record,key,relationship);},_addHasMany:function(data,record,name,relationship){var key=this._keyForHasMany(record.constructor,name);this.addHasMany(data,record,key,relationship);},_keyFromMappingOrHook:function(publicMethod,type,name){var key=this.mappingOption(type,name,'key');if(key){return key;}else{return this[publicMethod](type,name);}},registerTransform:function(type,transform){this.transforms[type]=transform;},registerEnumTransform:function(type,objects){var transform={deserialize:function(serialized){return Ember.A(objects).objectAt(serialized);},serialize:function(deserialized){return Ember.EnumerableUtils.indexOf(objects,deserialized);},values:objects};this.registerTransform(type,transform);},map:function(type,mappings){this.mappings.set(type,mappings);},configure:function(type,configuration){if(type&&!configuration){Ember.merge(this.globalConfigurations,type);return;}
var config,alias;if(configuration.alias){alias=configuration.alias;this.aliases.set(alias,type);delete configuration.alias;}
config=Ember.create(this.globalConfigurations);Ember.merge(config,configuration);this.configurations.set(type,config);},typeFromAlias:function(alias){this._completeAliases();return this.aliases.get(alias);},mappingForType:function(type){this._reifyMappings();return this.mappings.get(type)||{};},configurationForType:function(type){this._reifyConfigurations();return this.configurations.get(type)||this.globalConfigurations;},_completeAliases:function(){this._pluralizeAliases();this._reifyAliases();},_pluralizeAliases:function(){if(this._didPluralizeAliases){return;}
var aliases=this.aliases,sideloadMapping=this.aliases.sideloadMapping,plural,self=this;aliases.forEach(function(key,type){plural=self.pluralize(key);Ember.assert("The '"+key+"' alias has already been defined",!aliases.get(plural));aliases.set(plural,type);});if(sideloadMapping){sideloadMapping.forEach(function(key,type){Ember.assert("The '"+key+"' alias has already been defined",!aliases.get(key)||(aliases.get(key)===type));aliases.set(key,type);});delete this.aliases.sideloadMapping;}
this._didPluralizeAliases=true;},_reifyAliases:function(){if(this._didReifyAliases){return;}
var aliases=this.aliases,reifiedAliases=Ember.Map.create(),foundType;aliases.forEach(function(key,type){if(typeof type==='string'){foundType=Ember.get(Ember.lookup,type);Ember.assert("Could not find model at path "+key,type);reifiedAliases.set(key,foundType);}else{reifiedAliases.set(key,type);}});this.aliases=reifiedAliases;this._didReifyAliases=true;},_reifyMappings:function(){if(this._didReifyMappings){return;}
var mappings=this.mappings,reifiedMappings=Ember.Map.create();mappings.forEach(function(key,mapping){if(typeof key==='string'){var type=Ember.get(Ember.lookup,key);Ember.assert("Could not find model at path "+key,type);reifiedMappings.set(type,mapping);}else{reifiedMappings.set(key,mapping);}});this.mappings=reifiedMappings;this._didReifyMappings=true;},_reifyConfigurations:function(){if(this._didReifyConfigurations){return;}
var configurations=this.configurations,reifiedConfigurations=Ember.Map.create();configurations.forEach(function(key,mapping){if(typeof key==='string'&&key!=='plurals'){var type=Ember.get(Ember.lookup,key);Ember.assert("Could not find model at path "+key,type);reifiedConfigurations.set(type,mapping);}else{reifiedConfigurations.set(key,mapping);}});this.configurations=reifiedConfigurations;this._didReifyConfigurations=true;},mappingOption:function(type,name,option){var mapping=this.mappingForType(type)[name];return mapping&&mapping[option];},configOption:function(type,option){var config=this.configurationForType(type);return config[option];},embeddedType:function(type,name){return this.mappingOption(type,name,'embedded');},eachEmbeddedRecord:function(record,callback,binding){this.eachEmbeddedBelongsToRecord(record,callback,binding);this.eachEmbeddedHasManyRecord(record,callback,binding);},eachEmbeddedBelongsToRecord:function(record,callback,binding){this.eachEmbeddedBelongsTo(record.constructor,function(name,relationship,embeddedType){var embeddedRecord=get(record,name);if(embeddedRecord){callback.call(binding,embeddedRecord,embeddedType);}});},eachEmbeddedHasManyRecord:function(record,callback,binding){this.eachEmbeddedHasMany(record.constructor,function(name,relationship,embeddedType){var array=get(record,name);for(var i=0,l=get(array,'length');i<l;i++){callback.call(binding,array.objectAt(i),embeddedType);}});},eachEmbeddedHasMany:function(type,callback,binding){this.eachEmbeddedRelationship(type,'hasMany',callback,binding);},eachEmbeddedBelongsTo:function(type,callback,binding){this.eachEmbeddedRelationship(type,'belongsTo',callback,binding);},eachEmbeddedRelationship:function(type,kind,callback,binding){type.eachRelationship(function(name,relationship){var embeddedType=this.embeddedType(type,name);if(embeddedType){if(relationship.kind===kind){callback.call(binding,name,relationship,embeddedType);}}},this);},pluralize:function(name){var plurals=this.configurations.get('plurals');return(plurals&&plurals[name])||name+"s";},singularize:function(name){var plurals=this.configurations.get('plurals');if(plurals){for(var i in plurals){if(plurals[i]===name){return i;}}}
if(name.lastIndexOf('s')===name.length-1){return name.substring(0,name.length-1);}else{return name;}}});})();(function(){var isNone=Ember.isNone,isEmpty=Ember.isEmpty;DS.JSONTransforms={string:{deserialize:function(serialized){return isNone(serialized)?null:String(serialized);},serialize:function(deserialized){return isNone(deserialized)?null:String(deserialized);}},number:{deserialize:function(serialized){return isEmpty(serialized)?null:Number(serialized);},serialize:function(deserialized){return isEmpty(deserialized)?null:Number(deserialized);}},'boolean':{deserialize:function(serialized){var type=typeof serialized;if(type==="boolean"){return serialized;}else if(type==="string"){return serialized.match(/^true$|^t$|^1$/i)!==null;}else if(type==="number"){return serialized===1;}else{return false;}},serialize:function(deserialized){return Boolean(deserialized);}},date:{deserialize:function(serialized){var type=typeof serialized;if(type==="string"){return new Date(Ember.Date.parse(serialized));}else if(type==="number"){return new Date(serialized);}else if(serialized===null||serialized===undefined){return serialized;}else{return null;}},serialize:function(date){if(date instanceof Date){var days=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];var pad=function(num){return num<10?"0"+num:""+num;};var utcYear=date.getUTCFullYear(),utcMonth=date.getUTCMonth(),utcDayOfMonth=date.getUTCDate(),utcDay=date.getUTCDay(),utcHours=date.getUTCHours(),utcMinutes=date.getUTCMinutes(),utcSeconds=date.getUTCSeconds();var dayOfWeek=days[utcDay];var dayOfMonth=pad(utcDayOfMonth);var month=months[utcMonth];return dayOfWeek+", "+dayOfMonth+" "+month+" "+utcYear+" "+
pad(utcHours)+":"+pad(utcMinutes)+":"+pad(utcSeconds)+" GMT";}else{return null;}}}};})();(function(){var get=Ember.get,set=Ember.set;DS.JSONSerializer=DS.Serializer.extend({init:function(){this._super();if(!get(this,'transforms')){this.set('transforms',DS.JSONTransforms);}
this.sideloadMapping=Ember.Map.create();this.metadataMapping=Ember.Map.create();this.configure({meta:'meta',since:'since'});},configure:function(type,configuration){var key;if(type&&!configuration){for(key in type){this.metadataMapping.set(get(type,key),key);}
return this._super(type);}
var sideloadAs=configuration.sideloadAs,sideloadMapping;if(sideloadAs){sideloadMapping=this.aliases.sideloadMapping||Ember.Map.create();sideloadMapping.set(sideloadAs,type);this.aliases.sideloadMapping=sideloadMapping;delete configuration.sideloadAs;}
this._super.apply(this,arguments);},addId:function(data,key,id){data[key]=id;},addAttribute:function(hash,key,value){hash[key]=value;},extractAttribute:function(type,hash,attributeName){var key=this._keyForAttributeName(type,attributeName);return hash[key];},extractId:function(type,hash){var primaryKey=this._primaryKey(type);if(hash.hasOwnProperty(primaryKey)){return hash[primaryKey]+'';}else{return null;}},extractEmbeddedData:function(hash,key){return hash[key];},extractHasMany:function(type,hash,key){return hash[key];},extractBelongsTo:function(type,hash,key){return hash[key];},extractBelongsToPolymorphic:function(type,hash,key){var keyForId=this.keyForPolymorphicId(key),keyForType,id=hash[keyForId];if(id){keyForType=this.keyForPolymorphicType(key);return{id:id,type:hash[keyForType]};}
return null;},addBelongsTo:function(hash,record,key,relationship){var type=record.constructor,name=relationship.key,value=null,includeType=(relationship.options&&relationship.options.polymorphic),embeddedChild,child,id;if(this.embeddedType(type,name)){if(embeddedChild=get(record,name)){value=this.serialize(embeddedChild,{includeId:true,includeType:includeType});}
hash[key]=value;}else{child=get(record,relationship.key);id=get(child,'id');if(relationship.options&&relationship.options.polymorphic&&!Ember.isNone(id)){this.addBelongsToPolymorphic(hash,key,id,child.constructor);}else{hash[key]=this.serializeId(id);}}},addBelongsToPolymorphic:function(hash,key,id,type){var keyForId=this.keyForPolymorphicId(key),keyForType=this.keyForPolymorphicType(key);hash[keyForId]=id;hash[keyForType]=this.rootForType(type);},addHasMany:function(hash,record,key,relationship){var type=record.constructor,name=relationship.key,serializedHasMany=[],includeType=(relationship.options&&relationship.options.polymorphic),manyArray,embeddedType;embeddedType=this.embeddedType(type,name);if(embeddedType!=='always'){return;}
manyArray=get(record,name);manyArray.forEach(function(record){serializedHasMany.push(this.serialize(record,{includeId:true,includeType:includeType}));},this);hash[key]=serializedHasMany;},addType:function(hash,type){var keyForType=this.keyForEmbeddedType();hash[keyForType]=this.rootForType(type);},extract:function(loader,json,type,record){var root=this.rootForType(type);this.sideload(loader,type,json,root);this.extractMeta(loader,type,json);if(json[root]){if(record){loader.updateId(record,json[root]);}
this.extractRecordRepresentation(loader,type,json[root]);}else{Ember.Logger.warn("Extract requested, but no data given for "+type+". This may cause weird problems.");}},extractMany:function(loader,json,type,records){var root=this.rootForType(type);root=this.pluralize(root);this.sideload(loader,type,json,root);this.extractMeta(loader,type,json);if(json[root]){var objects=json[root],references=[];if(records){records=records.toArray();}
for(var i=0;i<objects.length;i++){if(records){loader.updateId(records[i],objects[i]);}
var reference=this.extractRecordRepresentation(loader,type,objects[i]);references.push(reference);}
loader.populateArray(references);}},extractMeta:function(loader,type,json){var meta=this.configOption(type,'meta'),data=json,value;if(meta&&json[meta]){data=json[meta];}
this.metadataMapping.forEach(function(property,key){value=data[property];if(!Ember.isNone(value)){loader.metaForType(type,key,value);}});},extractEmbeddedType:function(relationship,data){var foundType=relationship.type;if(relationship.options&&relationship.options.polymorphic){var key=this.keyFor(relationship),keyForEmbeddedType=this.keyForEmbeddedType(key);foundType=this.typeFromAlias(data[keyForEmbeddedType]);delete data[keyForEmbeddedType];}
return foundType;},sideload:function(loader,type,json,root){var sideloadedType;this.configureSideloadMappingForType(type);for(var prop in json){if(!json.hasOwnProperty(prop)||prop===root||!!this.metadataMapping.get(prop)){continue;}
sideloadedType=this.typeFromAlias(prop);Ember.assert("Your server returned a hash with the key "+prop+" but you have no mapping for it",!!sideloadedType);this.loadValue(loader,sideloadedType,json[prop]);}},configureSideloadMappingForType:function(type,configured){if(!configured){configured=Ember.A();}
configured.pushObject(type);type.eachRelatedType(function(relatedType){if(!configured.contains(relatedType)){var root=this.defaultSideloadRootForType(relatedType);this.aliases.set(root,relatedType);this.configureSideloadMappingForType(relatedType,configured);}},this);},loadValue:function(loader,type,value){if(value instanceof Array){for(var i=0;i<value.length;i++){loader.sideload(type,value[i]);}}else{loader.sideload(type,value);}},keyForPolymorphicId:function(key){return key;},keyForPolymorphicType:function(key){return this.keyForPolymorphicId(key)+'_type';},keyForEmbeddedType:function(){return'type';},rootForType:function(type){var typeString=type.toString();Ember.assert("Your model must not be anonymous. It was "+type,typeString.charAt(0)!=='(');var parts=typeString.split(".");var name=parts[parts.length-1];return name.replace(/([A-Z])/g,'_$1').toLowerCase().slice(1);},defaultSideloadRootForType:function(type){return this.pluralize(this.rootForType(type));}});})();(function(){var get=Ember.get,set=Ember.set,merge=Ember.merge;var forEach=Ember.EnumerableUtils.forEach;function loaderFor(store){return{load:function(type,data,prematerialized){return store.load(type,data,prematerialized);},loadMany:function(type,array){return store.loadMany(type,array);},updateId:function(record,data){return store.updateId(record,data);},populateArray:Ember.K,sideload:function(type,data){return store.adapterForType(type).load(store,type,data);},sideloadMany:function(type,array){return store.loadMany(type,array);},prematerialize:function(reference,prematerialized){reference.prematerialized=prematerialized;},metaForType:function(type,property,data){store.metaForType(type,property,data);}};}
DS.loaderFor=loaderFor;DS.Adapter=Ember.Object.extend(DS._Mappable,{init:function(){var serializer=get(this,'serializer');if(Ember.Object.detect(serializer)){serializer=serializer.create();set(this,'serializer',serializer);}
this._attributesMap=this.createInstanceMapFor('attributes');this._configurationsMap=this.createInstanceMapFor('configurations');this._outstandingOperations=new Ember.MapWithDefault({defaultValue:function(){return 0;}});this._dependencies=new Ember.MapWithDefault({defaultValue:function(){return new Ember.OrderedSet();}});this.registerSerializerTransforms(this.constructor,serializer,{});this.registerSerializerMappings(serializer);},load:function(store,type,payload){var loader=loaderFor(store);return get(this,'serializer').extractRecordRepresentation(loader,type,payload);},didCreateRecord:function(store,type,record,payload){store.didSaveRecord(record);if(payload){var loader=DS.loaderFor(store);loader.load=function(type,data,prematerialized){store.updateId(record,data);return store.load(type,data,prematerialized);};get(this,'serializer').extract(loader,payload,type);}},didCreateRecords:function(store,type,records,payload){records.forEach(function(record){store.didSaveRecord(record);},this);if(payload){var loader=DS.loaderFor(store);get(this,'serializer').extractMany(loader,payload,type,records);}},didSaveRecord:function(store,type,record,payload){store.didSaveRecord(record);var serializer=get(this,'serializer');serializer.eachEmbeddedRecord(record,function(embeddedRecord,embeddedType){if(embeddedType==='load'){return;}
this.didSaveRecord(store,embeddedRecord.constructor,embeddedRecord);},this);if(payload){var loader=DS.loaderFor(store);serializer.extract(loader,payload,type);}},didUpdateRecord:function(){this.didSaveRecord.apply(this,arguments);},didDeleteRecord:function(){this.didSaveRecord.apply(this,arguments);},didSaveRecords:function(store,type,records,payload){records.forEach(function(record){store.didSaveRecord(record);},this);if(payload){var loader=DS.loaderFor(store);get(this,'serializer').extractMany(loader,payload,type);}},didUpdateRecords:function(){this.didSaveRecords.apply(this,arguments);},didDeleteRecords:function(){this.didSaveRecords.apply(this,arguments);},didFindRecord:function(store,type,payload,id){var loader=DS.loaderFor(store);loader.load=function(type,data,prematerialized){prematerialized=prematerialized||{};prematerialized.id=id;return store.load(type,data,prematerialized);};get(this,'serializer').extract(loader,payload,type);},didFindAll:function(store,type,payload){var loader=DS.loaderFor(store),serializer=get(this,'serializer');store.didUpdateAll(type);serializer.extractMany(loader,payload,type);},didFindQuery:function(store,type,payload,recordArray){var loader=DS.loaderFor(store);loader.populateArray=function(data){recordArray.load(data);};get(this,'serializer').extractMany(loader,payload,type);},didFindMany:function(store,type,payload){var loader=DS.loaderFor(store);get(this,'serializer').extractMany(loader,payload,type);},didError:function(store,type,record){store.recordWasError(record);},dirtyRecordsForAttributeChange:function(dirtySet,record,attributeName,newValue,oldValue){if(newValue!==oldValue){this.dirtyRecordsForRecordChange(dirtySet,record);}},dirtyRecordsForRecordChange:function(dirtySet,record){dirtySet.add(record);},dirtyRecordsForBelongsToChange:function(dirtySet,child){this.dirtyRecordsForRecordChange(dirtySet,child);},dirtyRecordsForHasManyChange:function(dirtySet,parent,relationship){this.dirtyRecordsForRecordChange(dirtySet,parent);},registerSerializerTransforms:function(klass,serializer,seen){var transforms=klass._registeredTransforms,superclass,prop;var enumTransforms=klass._registeredEnumTransforms;for(prop in transforms){if(!transforms.hasOwnProperty(prop)||prop in seen){continue;}
seen[prop]=true;serializer.registerTransform(prop,transforms[prop]);}
for(prop in enumTransforms){if(!enumTransforms.hasOwnProperty(prop)||prop in seen){continue;}
seen[prop]=true;serializer.registerEnumTransform(prop,enumTransforms[prop]);}
if(superclass=klass.superclass){this.registerSerializerTransforms(superclass,serializer,seen);}},registerSerializerMappings:function(serializer){var mappings=this._attributesMap,configurations=this._configurationsMap;mappings.forEach(serializer.map,serializer);configurations.forEach(serializer.configure,serializer);},find:Ember.required(Function),findAll:null,findQuery:null,serializer:DS.JSONSerializer,registerTransform:function(attributeType,transform){get(this,'serializer').registerTransform(attributeType,transform);},registerEnumTransform:function(attributeType,objects){get(this,'serializer').registerEnumTransform(attributeType,objects);},generateIdForRecord:null,materialize:function(record,data,prematerialized){get(this,'serializer').materialize(record,data,prematerialized);},serialize:function(record,options){return get(this,'serializer').serialize(record,options);},extractId:function(type,data){return get(this,'serializer').extractId(type,data);},groupByType:function(enumerable){var map=Ember.MapWithDefault.create({defaultValue:function(){return Ember.OrderedSet.create();}});forEach(enumerable,function(item){map.get(item.constructor).add(item);});return map;},commit:function(store,commitDetails){this.save(store,commitDetails);},save:function(store,commitDetails){var adapter=this;function filter(records){var filteredSet=Ember.OrderedSet.create();records.forEach(function(record){if(adapter.shouldSave(record)){filteredSet.add(record);}});return filteredSet;}
this.groupByType(commitDetails.created).forEach(function(type,set){this.createRecords(store,type,filter(set));},this);this.groupByType(commitDetails.updated).forEach(function(type,set){this.updateRecords(store,type,filter(set));},this);this.groupByType(commitDetails.deleted).forEach(function(type,set){this.deleteRecords(store,type,filter(set));},this);},shouldSave:function(record){return true;},createRecord:Ember.required(Function),createRecords:function(store,type,records){records.forEach(function(record){this.createRecord(store,type,record);},this);},updateRecord:Ember.required(Function),updateRecords:function(store,type,records){records.forEach(function(record){this.updateRecord(store,type,record);},this);},deleteRecord:Ember.required(Function),deleteRecords:function(store,type,records){records.forEach(function(record){this.deleteRecord(store,type,record);},this);},findMany:function(store,type,ids){ids.forEach(function(id){this.find(store,type,id);},this);}});DS.Adapter.reopenClass({registerTransform:function(attributeType,transform){var registeredTransforms=this._registeredTransforms||{};registeredTransforms[attributeType]=transform;this._registeredTransforms=registeredTransforms;},registerEnumTransform:function(attributeType,objects){var registeredEnumTransforms=this._registeredEnumTransforms||{};registeredEnumTransforms[attributeType]=objects;this._registeredEnumTransforms=registeredEnumTransforms;},map:DS._Mappable.generateMapFunctionFor('attributes',function(key,newValue,map){var existingValue=map.get(key);merge(existingValue,newValue);}),configure:DS._Mappable.generateMapFunctionFor('configurations',function(key,newValue,map){var existingValue=map.get(key);var mappings=newValue&&newValue.mappings;if(mappings){this.map(key,mappings);delete newValue.mappings;}
merge(existingValue,newValue);}),resolveMapConflict:function(oldValue,newValue){merge(newValue,oldValue);return newValue;}});})();(function(){var get=Ember.get,set=Ember.set;DS.FixtureSerializer=DS.Serializer.extend({deserializeValue:function(value,attributeType){return value;},serializeValue:function(value,attributeType){return value;},addId:function(data,key,id){data[key]=id;},addAttribute:function(hash,key,value){hash[key]=value;},addBelongsTo:function(hash,record,key,relationship){var id=get(record,relationship.key+'.id');if(!Ember.isNone(id)){hash[key]=id;}},addHasMany:function(hash,record,key,relationship){var ids=get(record,relationship.key).map(function(item){return item.get('id');});hash[relationship.key]=ids;},extract:function(loader,fixture,type,record){if(record){loader.updateId(record,fixture);}
this.extractRecordRepresentation(loader,type,fixture);},extractMany:function(loader,fixtures,type,records){var objects=fixtures,references=[];if(records){records=records.toArray();}
for(var i=0;i<objects.length;i++){if(records){loader.updateId(records[i],objects[i]);}
var reference=this.extractRecordRepresentation(loader,type,objects[i]);references.push(reference);}
loader.populateArray(references);},extractId:function(type,hash){var primaryKey=this._primaryKey(type);if(hash.hasOwnProperty(primaryKey)){return hash[primaryKey]+'';}else{return null;}},extractAttribute:function(type,hash,attributeName){var key=this._keyForAttributeName(type,attributeName);return hash[key];},extractHasMany:function(type,hash,key){return hash[key];},extractBelongsTo:function(type,hash,key){var val=hash[key];if(val!=null){val=val+'';}
return val;},extractBelongsToPolymorphic:function(type,hash,key){var keyForId=this.keyForPolymorphicId(key),keyForType,id=hash[keyForId];if(id){keyForType=this.keyForPolymorphicType(key);return{id:id,type:hash[keyForType]};}
return null;},keyForPolymorphicId:function(key){return key;},keyForPolymorphicType:function(key){return key+'_type';}});})();(function(){var get=Ember.get,fmt=Ember.String.fmt,indexOf=Ember.EnumerableUtils.indexOf;DS.FixtureAdapter=DS.Adapter.extend({simulateRemoteResponse:true,latency:50,serializer:DS.FixtureSerializer,fixturesForType:function(type){if(type.FIXTURES){var fixtures=Ember.A(type.FIXTURES);return fixtures.map(function(fixture){var fixtureIdType=typeof fixture.id;if(fixtureIdType!=="number"&&fixtureIdType!=="string"){throw new Error(fmt('the id property must be defined as a number or string for fixture %@',[fixture]));}
fixture.id=fixture.id+'';return fixture;});}
return null;},queryFixtures:function(fixtures,query,type){Ember.assert('Not implemented: You must override the DS.FixtureAdapter::queryFixtures method to support querying the fixture store.');},updateFixtures:function(type,fixture){if(!type.FIXTURES){type.FIXTURES=[];}
var fixtures=type.FIXTURES;this.deleteLoadedFixture(type,fixture);fixtures.push(fixture);},mockJSON:function(type,record){return this.serialize(record,{includeId:true});},generateIdForRecord:function(store,record){return Ember.guidFor(record);},find:function(store,type,id){var fixtures=this.fixturesForType(type),fixture;Ember.warn("Unable to find fixtures for model type "+type.toString(),fixtures);if(fixtures){fixture=Ember.A(fixtures).findProperty('id',id);}
if(fixture){this.simulateRemoteCall(function(){this.didFindRecord(store,type,fixture,id);},this);}},findMany:function(store,type,ids){var fixtures=this.fixturesForType(type);Ember.assert("Unable to find fixtures for model type "+type.toString(),!!fixtures);if(fixtures){fixtures=fixtures.filter(function(item){return indexOf(ids,item.id)!==-1;});}
if(fixtures){this.simulateRemoteCall(function(){this.didFindMany(store,type,fixtures);},this);}},findAll:function(store,type){var fixtures=this.fixturesForType(type);Ember.assert("Unable to find fixtures for model type "+type.toString(),!!fixtures);this.simulateRemoteCall(function(){this.didFindAll(store,type,fixtures);},this);},findQuery:function(store,type,query,array){var fixtures=this.fixturesForType(type);Ember.assert("Unable to find fixtures for model type "+type.toString(),!!fixtures);fixtures=this.queryFixtures(fixtures,query,type);if(fixtures){this.simulateRemoteCall(function(){this.didFindQuery(store,type,fixtures,array);},this);}},createRecord:function(store,type,record){var fixture=this.mockJSON(type,record);this.updateFixtures(type,fixture);this.simulateRemoteCall(function(){this.didCreateRecord(store,type,record,fixture);},this);},updateRecord:function(store,type,record){var fixture=this.mockJSON(type,record);this.updateFixtures(type,fixture);this.simulateRemoteCall(function(){this.didUpdateRecord(store,type,record,fixture);},this);},deleteRecord:function(store,type,record){var fixture=this.mockJSON(type,record);this.deleteLoadedFixture(type,fixture);this.simulateRemoteCall(function(){this.didDeleteRecord(store,type,record);},this);},deleteLoadedFixture:function(type,record){var existingFixture=this.findExistingFixture(type,record);if(existingFixture){var index=indexOf(type.FIXTURES,existingFixture);type.FIXTURES.splice(index,1);return true;}},findExistingFixture:function(type,record){var fixtures=this.fixturesForType(type);var id=this.extractId(type,record);return this.findFixtureById(fixtures,id);},findFixtureById:function(fixtures,id){return Ember.A(fixtures).find(function(r){if(''+get(r,'id')===''+id){return true;}else{return false;}});},simulateRemoteCall:function(callback,context){if(get(this,'simulateRemoteResponse')){Ember.run.later(context,callback,get(this,'latency'));}else{Ember.run.once(context,callback);}}});})();(function(){var get=Ember.get;DS.RESTSerializer=DS.JSONSerializer.extend({keyForAttributeName:function(type,name){return Ember.String.decamelize(name);},keyForBelongsTo:function(type,name){var key=this.keyForAttributeName(type,name);if(this.embeddedType(type,name)){return key;}
return key+"_id";},keyForHasMany:function(type,name){var key=this.keyForAttributeName(type,name);if(this.embeddedType(type,name)){return key;}
return this.singularize(key)+"_ids";},keyForPolymorphicId:function(key){return key;},keyForPolymorphicType:function(key){return key.replace(/_id$/,'_type');},extractValidationErrors:function(type,json){var errors={};get(type,'attributes').forEach(function(name){var key=this._keyForAttributeName(type,name);if(json['errors'].hasOwnProperty(key)){errors[name]=json['errors'][key];}},this);return errors;}});})();(function(){var get=Ember.get,set=Ember.set;DS.rejectionHandler=function(reason){Ember.Logger.assert([reason,reason.message,reason.stack]);throw reason;};DS.RESTAdapter=DS.Adapter.extend({namespace:null,bulkCommit:false,since:'since',serializer:DS.RESTSerializer,shouldSave:function(record){var reference=get(record,'_reference');return!reference.parent;},dirtyRecordsForRecordChange:function(dirtySet,record){this._dirtyTree(dirtySet,record);},dirtyRecordsForHasManyChange:function(dirtySet,record,relationship){var embeddedType=get(this,'serializer').embeddedType(record.constructor,relationship.secondRecordName);if(embeddedType==='always'){relationship.childReference.parent=relationship.parentReference;this._dirtyTree(dirtySet,record);}},_dirtyTree:function(dirtySet,record){dirtySet.add(record);get(this,'serializer').eachEmbeddedRecord(record,function(embeddedRecord,embeddedType){if(embeddedType!=='always'){return;}
if(dirtySet.has(embeddedRecord)){return;}
this._dirtyTree(dirtySet,embeddedRecord);},this);var reference=record.get('_reference');if(reference.parent){var store=get(record,'store');var parent=store.recordForReference(reference.parent);this._dirtyTree(dirtySet,parent);}},createRecord:function(store,type,record){var root=this.rootForType(type);var adapter=this;var data={};data[root]=this.serialize(record,{includeId:true});return this.ajax(this.buildURL(root),"POST",{data:data}).then(function(json){adapter.didCreateRecord(store,type,record,json);},function(xhr){adapter.didError(store,type,record,xhr);throw xhr;}).then(null,DS.rejectionHandler);},createRecords:function(store,type,records){var adapter=this;if(get(this,'bulkCommit')===false){return this._super(store,type,records);}
var root=this.rootForType(type),plural=this.pluralize(root);var data={};data[plural]=[];records.forEach(function(record){data[plural].push(this.serialize(record,{includeId:true}));},this);return this.ajax(this.buildURL(root),"POST",{data:data}).then(function(json){adapter.didCreateRecords(store,type,records,json);}).then(null,DS.rejectionHandler);},updateRecord:function(store,type,record){var id,root,adapter,data;id=get(record,'id');root=this.rootForType(type);adapter=this;data={};data[root]=this.serialize(record);return this.ajax(this.buildURL(root,id,record),"PUT",{data:data}).then(function(json){adapter.didUpdateRecord(store,type,record,json);},function(xhr){adapter.didError(store,type,record,xhr);throw xhr;}).then(null,DS.rejectionHandler);},updateRecords:function(store,type,records){var root,plural,adapter,data;if(get(this,'bulkCommit')===false){return this._super(store,type,records);}
root=this.rootForType(type);plural=this.pluralize(root);adapter=this;data={};data[plural]=[];records.forEach(function(record){data[plural].push(this.serialize(record,{includeId:true}));},this);return this.ajax(this.buildURL(root,"bulk"),"PUT",{data:data}).then(function(json){adapter.didUpdateRecords(store,type,records,json);}).then(null,DS.rejectionHandler);},deleteRecord:function(store,type,record){var id,root,adapter;id=get(record,'id');root=this.rootForType(type);adapter=this;return this.ajax(this.buildURL(root,id,record),"DELETE").then(function(json){adapter.didDeleteRecord(store,type,record,json);},function(xhr){adapter.didError(store,type,record,xhr);throw xhr;}).then(null,DS.rejectionHandler);},deleteRecords:function(store,type,records){var root,plural,serializer,adapter,data;if(get(this,'bulkCommit')===false){return this._super(store,type,records);}
root=this.rootForType(type);plural=this.pluralize(root);serializer=get(this,'serializer');adapter=this;data={};data[plural]=[];records.forEach(function(record){data[plural].push(serializer.serializeId(get(record,'id')));});return this.ajax(this.buildURL(root,'bulk'),"DELETE",{data:data}).then(function(json){adapter.didDeleteRecords(store,type,records,json);}).then(null,DS.rejectionHandler);},find:function(store,type,id){var root=this.rootForType(type),adapter=this;return this.ajax(this.buildURL(root,id),"GET").then(function(json){adapter.didFindRecord(store,type,json,id);}).then(null,DS.rejectionHandler);},findAll:function(store,type,since){var root,adapter;root=this.rootForType(type);adapter=this;return this.ajax(this.buildURL(root),"GET",{data:this.sinceQuery(since)}).then(function(json){adapter.didFindAll(store,type,json);}).then(null,DS.rejectionHandler);},findQuery:function(store,type,query,recordArray){var root=this.rootForType(type),adapter=this;return this.ajax(this.buildURL(root),"GET",{data:query}).then(function(json){adapter.didFindQuery(store,type,json,recordArray);}).then(null,DS.rejectionHandler);},findMany:function(store,type,ids,owner){var root=this.rootForType(type),adapter=this;ids=this.serializeIds(ids);return this.ajax(this.buildURL(root),"GET",{data:{ids:ids}}).then(function(json){adapter.didFindMany(store,type,json);}).then(null,DS.rejectionHandler);},serializeIds:function(ids){var serializer=get(this,'serializer');return Ember.EnumerableUtils.map(ids,function(id){return serializer.serializeId(id);});},didError:function(store,type,record,xhr){if(xhr.status===422){var json=JSON.parse(xhr.responseText),serializer=get(this,'serializer'),errors=serializer.extractValidationErrors(type,json);store.recordWasInvalid(record,errors);}else{this._super.apply(this,arguments);}},ajax:function(url,type,hash){var adapter=this;return new Ember.RSVP.Promise(function(resolve,reject){hash=hash||{};hash.url=url;hash.type=type;hash.dataType='json';hash.context=adapter;if(hash.data&&type!=='GET'){hash.contentType='application/json; charset=utf-8';hash.data=JSON.stringify(hash.data);}
if(adapter.headers!==undefined){var headers=adapter.headers;hash.beforeSend=function(xhr){Ember.keys(headers).forEach(function(key){xhr.setRequestHeader(key,headers[key]);});};}
hash.success=function(json){Ember.run(null,resolve,json);};hash.error=function(jqXHR,textStatus,errorThrown){if(jqXHR){jqXHR.then=null;}
Ember.run(null,reject,jqXHR);};Ember.$.ajax(hash);});},url:"",rootForType:function(type){var serializer=get(this,'serializer');return serializer.rootForType(type);},pluralize:function(string){var serializer=get(this,'serializer');return serializer.pluralize(string);},buildURL:function(root,suffix,record){var url=[this.url];Ember.assert("Namespace URL ("+this.namespace+") must not start with slash",!this.namespace||this.namespace.toString().charAt(0)!=="/");Ember.assert("Root URL ("+root+") must not start with slash",!root||root.toString().charAt(0)!=="/");Ember.assert("URL suffix ("+suffix+") must not start with slash",!suffix||suffix.toString().charAt(0)!=="/");if(!Ember.isNone(this.namespace)){url.push(this.namespace);}
url.push(this.pluralize(root));if(suffix!==undefined){url.push(suffix);}
return url.join("/");},sinceQuery:function(since){var query={};query[get(this,'since')]=since;return since?query:null;}});})();(function(){})();(function(){DS.Model.reopen({_debugInfo:function(){var attributes=['id'],relationships={belongsTo:[],hasMany:[]},expensiveProperties=[];this.eachAttribute(function(name,meta){attributes.push(name);},this);this.eachRelationship(function(name,relationship){relationships[relationship.kind].push(name);expensiveProperties.push(name);});var groups=[{name:'Attributes',properties:attributes,expand:true,},{name:'Belongs To',properties:relationships.belongsTo,expand:true},{name:'Has Many',properties:relationships.hasMany,expand:true},{name:'Flags',properties:['isLoaded','isDirty','isSaving','isDeleted','isError','isNew','isValid']}];return{propertyInfo:{includeOtherProperties:true,groups:groups,expensiveProperties:expensiveProperties}};}});})();(function(){})();(function(){})();})();