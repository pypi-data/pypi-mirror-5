define('providers/facebook/tab', ['providers', 'providers/_utils', 'tmpl!livedesk>providers/facebook/post'], function(providers, utils) {	providers.facebook = {		className: 'big-icon-facebook',	                tooltip: _('Facebook'),		init: function() {							require(['providers','providers/facebook'], function(providers) {				providers.facebook.init();			});		},				// aop on timeline view		timeline: 		{		    preData: function()		    {		        // TODO add meta to another member which can be fed...		        // need to change Meta to object to use in template		        try{					if($.type(this.model.get('Meta')) === 'string') {						this.model.data.Meta = JSON.parse(this.model.get('Meta'));						var a = this.model.data.Meta.annotation;						this.model.data.Meta.annotation = {before: a[0], after: a[1]};					}		        }		        catch(e){}		        		    },		    init: function()		    {		    	//stuff needed for initialization		    },		    render: function(callback) {		    	var self = this,	                feed = this.model.feed();	            try	            {         		    var a = feed.Meta.annotation;	            }	            catch(e)	            {	                eval('feed.Meta = '+feed.Meta);	            }	            $.tmpl('livedesk>providers/facebook/post', feed, function(e, o)                {                    self.setElement(o);                    $(self.el).off('click', '.btn.publish').on('click', '.btn.publish', function()                    {                        var data = {Content: self.model.get('Content'), Meta: self.model.get('Meta')};		                data.Meta.annotation = [$('.facebook-full-content .annotation:eq(0)', self.el).html(), 		                    $('.facebook-full-content .annotation:eq(1)', self.el).html()];		                data.Meta = JSON.stringify(data.Meta);		                utils.MetaCheck.call(self, data.Meta) && 	                    (self.model.set(data).sync() && self.el.find('.actions').addClass('hide'));                    });                                        $(self.el).off('click', '.btn.cancel').on('click', '.btn.cancel', function()                    {                        $('.actions', self.el).addClass('hide');                    });                                        callback.call(self);                });		    },		    edit: function()		    {		        $('.actions', this.el).removeClass('hide');		    },		    save: function()		    {		        return false;		    }		}	};	return providers;});