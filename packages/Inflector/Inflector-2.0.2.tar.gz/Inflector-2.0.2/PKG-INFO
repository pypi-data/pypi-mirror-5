Metadata-Version: 1.0
Name: Inflector
Version: 2.0.2
Summary: A port of ROR's inflector class
Home-page: https://github.com/ixmatus/inflector
Author: Parnell Springmeyer
Author-email: parnell@ixmat.us
License: Copyright (c) 2013, Parnell Springmeyer

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Parnell Springmeyer nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Description: # Inflector for Python
        
        The Inflector is used for getting the plural and singular form of nouns. This piece of code helps on creating code that favors convention over configuration.
        
        Only English and Spanish nouns are supported. The English version is a port of Ruby on Rails Inflector, while the Spanish Version has been developed from scratch with the help of Carles Sadurn√≠.
        
        Apart from converting singulars and plurals, this module also handles necessary string conversion for convention based applications like:
        
        Available methods are:
        
        ## pluralize(word)
        
        Pluralizes nouns.
        
        ## singularize(word)
        
        Singularizes nouns.
        
        ## conditionalPlural(numer_of_records, word)
        
        Returns the plural form of a word if first parameter is greater than 1
        
        ## titleize(word, uppercase = '')
        
        Converts an underscored or CamelCase word into a sentence.
        The titleize function converts text like "WelcomePage",
        "welcome_page" or  "welcome page" to this "Welcome Page".
        If the "uppercase" parameter is set to 'first' it will only
        capitalize the first character of the title.
        
        ## camelize(word):
        
        Returns given word as CamelCased
        Converts a word like "send_email" to "SendEmail". It
        will remove non alphanumeric character from the word, so
        "who's online" will be converted to "WhoSOnline"
        
        ## underscore(word)
        
        Converts a word "into_it_s_underscored_version"
        Convert any "CamelCased" or "ordinary Word" into an
        "underscored_word".
        This can be really useful for creating friendly URLs.
        
        ## humanize(word, uppercase = '')
        
        Returns a human-readable string from word
        Returns a human-readable string from word, by replacing
        underscores with a space, and by upper-casing the initial
        character by default.
        If you need to uppercase all the words you just have to
        pass 'all' as a second parameter.
        
        
        ## variablize(word)
        
        Same as camelize but first char is lowercased
        Converts a word like "send_email" to "sendEmail". It
        will remove non alphanumeric character from the word, so
        "who's online" will be converted to "whoSOnline"
        return self.Inflector.variablize(word)
        
        ## tableize(class_name)
        
        Converts a class name to its table name according to rails
        naming conventions. Example. Converts "Person" to "people" 
        
        ## classify(table_name)
        
        Converts a table name to its class name according to rails
        naming conventions. Example: Converts "people" to "Person" 
        
        ## ordinalize(number)
        Converts number to its ordinal form.
        This method converts 13 to 13th, 2 to 2nd ...
        
        ## unaccent(text)
        
        Transforms a string to its unaccented version. 
        This might be useful for generating "friendly" URLs
        
        ## urlize(text)
        
        Transform a string its unaccented and underscored
        version ready to be inserted in friendly URLs
        
        ## foreignKey(class_name, separate_class_name_and_id_with_underscore = 1)
        
        Returns class_name in underscored form, with "_id" tacked on at the end. 
        This is for use in dealing with the database.
        
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Python Software Foundation License
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development :: Libraries :: Python Modules
