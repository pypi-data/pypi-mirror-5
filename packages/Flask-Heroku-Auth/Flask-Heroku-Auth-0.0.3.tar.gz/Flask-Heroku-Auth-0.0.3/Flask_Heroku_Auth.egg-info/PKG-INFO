Metadata-Version: 1.1
Name: Flask-Heroku-Auth
Version: 0.0.3
Summary: Flask Based Heroku Authentication.
Home-page: http://github.com/rhyselsmore/flask-heroku-auth
Author: Rhys Elsmore
Author-email: me@rhys.io
License: Copyright 2013 Rhys Elsmore

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
Description: Flask-Heroku-Auth
        =================
        
        .. image:: https://travis-ci.org/rhyselsmore/flask-heroku-auth.png?branch=master
                :target: https://travis-ci.org/rhyselsmore/flask-heroku-auth
        
        .. image:: https://pypip.in/d/Flask-Heroku-Auth/badge.png
                :target: https://crate.io/packages/Flask-Heroku-Auth/
        
        A set of Flask Route decorators to enable either Session-Based Authentication
        via Heroku's OAuth mechanism, or Basic Stateless Authentication via Heroku's
        API Key facilities.
        
        Installation
        ------------
        
        .. code-block:: bash
        
            pip install flask-heroku-auth
        
        Configuration
        -------------
        
        To enable regex routes within your application
        
        .. code-block:: python
        
            from flask import Flask
            from flask_heroku_auth import HerokuAuth
        
            app = Flask(__name__)
            HerokuAuth(app)
        
        or
        
        .. code-block:: python
        
            from flask import Flask
            from flask_heroku_auth import HerokuAuth
        
            auth = HerokuAuth()
        
            def create_app():
                app = Flask(__name__)
                auth.init_app(app)
                return app
        
        From here, it is a matter of decorating the appropriate routes.
        
        For example, the following would implement authentication via the Heroku
        OAuth facility
        
        .. code-block:: python
        
            @app.route('/')
            @auth.oauth
            def index():
                return "Ok"
        
        On the other hand, you may wish to authenticate via the Heroku API Key
        facility. In this case, the credentials are sent through with every
        request as an 'Authorization' header
        
        .. code-block:: python
        
            @app.route('/')
            @auth.api
            def index():
                return "Ok"
        
        You can also restrict access to a Heroku user who has an @heroku.com email
        address.
        
        .. code-block:: python
        
            @app.route('/')
            @auth.oauth
            @auth.herokai_only
            def index():
                return "Ok"
        
        
        History
        =======
        
        0.0.3 (16/09/2012)
        ------------------
        
        - User field is now not required for sudo operations.
        
        0.0.2 (24/08/2012)
        ------------------
        
        - Checking for 'herokai_only' now occurs only if the user is logged in.
        
        0.0.1 (24/08/2012)
        ------------------
        
        - Conception
        - Initial Commit of Package to GitHub.
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
