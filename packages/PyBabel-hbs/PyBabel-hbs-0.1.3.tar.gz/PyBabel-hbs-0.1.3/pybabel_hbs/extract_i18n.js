// Generated by CoffeeScript 1.6.3
(function() {
  var Extractor, Handlebars, received_data;

  Handlebars = require('./lib/custom_handlebars.js').Handlebars;

  received_data = "";

  process.stdin.resume();

  process.stdin.setEncoding('utf8');

  process.stdin.on('data', function(chunk) {
    return received_data = received_data + chunk;
  });

  process.stdin.on('end', function() {
    var parsed_data;
    parsed_data = Handlebars.parse(received_data);
    Extractor.extract(parsed_data);
    process.stdout.write(JSON.stringify(Extractor.output));
    return process.exit();
  });

  Extractor = {
    output: [],
    extract: function(node) {
      var alt_content_node, content_node, statement, _i, _len, _ref;
      if (node.statements) {
        _ref = node.statements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          statement = _ref[_i];
          Extractor.extract(statement);
        }
      }
      if (node.type === 'block' && node.mustache.id.original === 'trans') {
        content_node = node.program.statements[0];
        return Extractor.output.push({
          line_number: content_node.first_line,
          content: content_node.string,
          funcname: '_'
        });
      } else if (node.type === 'block' && node.mustache.id.original === 'ntrans') {
        content_node = node.program.statements[0];
        alt_content_node = node.program.inverse.statements[0];
        return Extractor.output.push({
          line_number: content_node.first_line,
          alt_line_number: alt_content_node.first_line,
          content: content_node.string,
          alt_content: alt_content_node.string,
          funcname: 'ngettext'
        });
      } else if (node.type === 'block') {
        Extractor.extract(node.program);
        if (node.program.inverse) {
          Extractor.extract(node.program.inverse);
        }
      } else if (node.type === 'mustache') {
        if (node.id.original === '_') {
          return Extractor.output.push({
            line_number: node.first_line,
            content: node.params[0].string,
            funcname: '_'
          });
        } else if (node.id.original === 'n_') {
          return Extractor.output.push({
            line_number: node.first_line,
            content: node.params[0].string,
            alt_content: node.params[1].string,
            funcname: 'ngettext'
          });
        }
      }
    }
  };

}).call(this);
