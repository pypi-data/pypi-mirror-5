Metadata-Version: 1.1
Name: django-extended-admin
Version: 1.0.5
Summary: Additional features for django admin
Home-page: http://bitbucket.org/masterzeb/django-extended-admin/
Author: Denis Savasteev
Author-email: devmaster.zeb@gmail.com
License: BSD
Download-URL: http://bitbucket.org/masterzeb/django-extended-admin/downloads/django-extended-admin-1.0.5.tar.gz
Description: IMPORTANT STEPS:
        1. add 'admin_extended' before 'django.contrib.*' and 'admin_tools.*' in INSTALLED_APPS
        2. add 'admin_extended.context_processors.settings' in TEMPLATE_CONTEXT_PROCESSORS 
        3. add 'apptemplates.Loader' in TEMPLATE_LOADERS
        
        Package allow some extra settings to customize - all of them are optional 
          - ADMIN_JQUERY_ADDITIONAL_VERSION
          Is a string which defines additional version of jquery - it will include from google storage
          Example: ADMIN_JQUERY_ADDITIONAL_VERSION = '1.9.0'
          
          - FAVICON_PREFIX
          Is a string which defines favicon static prefix ('/static/' by default)
          Example: FAVICON_PREFIX = '/static/images/'
         
         
        Also it provides register_url decorator for ModelAdmin or Inline methods. It turns method to view, which returns HttpResponse object.
        To use it you should add next line to yours urls.py
          url(r'^admin/', include('admin_extended.urls')),
        IMPORTANT: it should be placed BEFORE including admin.site.urls, but AFTER admin.autodiscover()
        
        After then you may deco yours methods like that:
        class SomeModelAdmin(ModelAdmin):
            # finally url will be look like that: r'^/admin/app_label/model_name/extra_url/'
            # arg must be a raw string and can not starts with /
            # url arg could be omitted - "method_name/$" will be used as url
            @register_url(r'extra_url/$')
            def get_info(self, request):
                return render_to_response('some_template.html')
        
        IMPORTANT: also you must decorate your method with @staticmethod or @classmethod if you use this feture in InlineModelAdmin
        NOTE: if you use this feature in InlineModelAdmin, "model_name" still be name of model registred with ModelAdmin which contains inline (so as "app_label").
        To prevent it set "use_inline_data" arg to True in register_url decorator
        
        
        
        At client side you could use:
        - autoinlines.js (a tool to create dynamic inlines, by clicking on checkboxes controllers)
        Usage: $.autoInline({
          inlineName: "hint",
          fields: ["field_name_1", "field_name_2"],
          controllers: ["m2m_field_name_1", "m2m_field_name_2"],
          requiredMask: 10,
          hint: "Check m2m_field_name_1",
          empty: "None"
        })
        
        - searchline.js (a tool to filter checkboxes)
        Usage: $("fieldset .field-fieldname").addSearchLine();
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
