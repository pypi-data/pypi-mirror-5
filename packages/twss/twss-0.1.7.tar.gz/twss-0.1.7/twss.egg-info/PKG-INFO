Metadata-Version: 1.0
Name: twss
Version: 0.1.7
Summary: TWSS: A Naive Bayes classifier that can identify double entendres.
Home-page: https://github.com/sengupta/twss
Author: Aditya Sengupta
Author-email: aditya@sengupta.me
License: 
            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE FUCK YOU WANT TO.


Description: TWSS
        ====
        
        This is an implementation of a simple double entendre classifier in Python. 
        
        This currently uses a Naive Bayes classifier (the NLTK implementation) as a
        Python package. This was inspired by the `bvandenvos Ruby TWSS project
        <https://github.com/bvandenbos/twss/>`_ and uses the same data corpus. 
        
        This was built on the eve of `Barcamp Mumbai <http://barcampmumbai.org/>`_ 8
        and presented during a session there. 
        
        Suggestions welcome. Do file bugs. Fork away. Send us pull requests. 
        
        Setup Instructions
        ------------------
        
        .. code-block:: bash
        
            $ virtualenv --no-site-packages --distribute venv 
            $ source venv/bin/activate 
            $ pip install -r requirements.txt
        
        This creates a virtual environment for this project and install all the
        packages necessary for the project to work. 
        
        Demo
        ----
        
        Once this is installed, you can take it out for a spin: 
        
        .. code-block:: python 
        
            >>> from twss import TWSS 
            >>> twss = TWSS() 
            >>> twss("That was hard") 
            True
            >>> twss("Hello world") 
            False
        
        The first call can take a while- the module needs to train the classifier
        against the pre-installed training dataset. 
        
        Getting dirty
        -------------
        
        You can supply your own training data using positive and negative corpus files: 
        
        .. code-block:: python 
        
            >>> twss = TWSS(positive_corpus_file=open('foo.txt'), negative_corpus_file=open('bar.txt'))
        
        or directly, as a list of tuples: 
        
        .. code-block:: python 
        
            >>> training_data = [
            ... ("Sentence 1", True),
            ... ("Sentence 2", False),
            ...
            ... ]
            >>> twss = TWSS(training_data)
        
        Roadmap
        -------
        
        - Making this pip-installable.
        - Writing a sample web app.
        - Writing a sample Twitter client.
        
        
Platform: UNKNOWN
