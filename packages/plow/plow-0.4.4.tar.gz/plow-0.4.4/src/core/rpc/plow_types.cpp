/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "plow_types.h"

#include <algorithm>

namespace Plow {

int _kJobStateValues[] = {
  JobState::INITIALIZE,
  JobState::RUNNING,
  JobState::FINISHED
};
const char* _kJobStateNames[] = {
  "INITIALIZE",
  "RUNNING",
  "FINISHED"
};
const std::map<int, const char*> _JobState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kJobStateValues, _kJobStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskStateValues[] = {
  TaskState::INITIALIZE,
  TaskState::WAITING,
  TaskState::RUNNING,
  TaskState::DEAD,
  TaskState::EATEN,
  TaskState::DEPEND,
  TaskState::SUCCEEDED
};
const char* _kTaskStateNames[] = {
  "INITIALIZE",
  "WAITING",
  "RUNNING",
  "DEAD",
  "EATEN",
  "DEPEND",
  "SUCCEEDED"
};
const std::map<int, const char*> _TaskState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTaskStateValues, _kTaskStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNodeStateValues[] = {
  NodeState::UP,
  NodeState::DOWN,
  NodeState::REPAIR
};
const char* _kNodeStateNames[] = {
  "UP",
  "DOWN",
  "REPAIR"
};
const std::map<int, const char*> _NodeState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNodeStateValues, _kNodeStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDependTypeValues[] = {
  DependType::JOB_ON_JOB,
  DependType::LAYER_ON_LAYER,
  DependType::LAYER_ON_TASK,
  DependType::TASK_ON_LAYER,
  DependType::TASK_ON_TASK,
  DependType::TASK_BY_TASK
};
const char* _kDependTypeNames[] = {
  "JOB_ON_JOB",
  "LAYER_ON_LAYER",
  "LAYER_ON_TASK",
  "TASK_ON_LAYER",
  "TASK_ON_TASK",
  "TASK_BY_TASK"
};
const std::map<int, const char*> _DependType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDependTypeValues, _kDependTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMatcherTypeValues[] = {
  MatcherType::CONTAINS,
  MatcherType::NOT_CONTAINS,
  MatcherType::IS,
  MatcherType::IS_NOT,
  MatcherType::BEGINS_WITH,
  MatcherType::ENDS_WITH
};
const char* _kMatcherTypeNames[] = {
  "CONTAINS",
  "NOT_CONTAINS",
  "IS",
  "IS_NOT",
  "BEGINS_WITH",
  "ENDS_WITH"
};
const std::map<int, const char*> _MatcherType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kMatcherTypeValues, _kMatcherTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMatcherFieldValues[] = {
  MatcherField::JOB_NAME,
  MatcherField::USER,
  MatcherField::ATTR
};
const char* _kMatcherFieldNames[] = {
  "JOB_NAME",
  "USER",
  "ATTR"
};
const std::map<int, const char*> _MatcherField_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMatcherFieldValues, _kMatcherFieldNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kActionTypeValues[] = {
  ActionType::SET_FOLDER,
  ActionType::SET_MIN_CORES,
  ActionType::SET_MAX_CORES,
  ActionType::PAUSE,
  ActionType::STOP_PROCESSING
};
const char* _kActionTypeNames[] = {
  "SET_FOLDER",
  "SET_MIN_CORES",
  "SET_MAX_CORES",
  "PAUSE",
  "STOP_PROCESSING"
};
const std::map<int, const char*> _ActionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kActionTypeValues, _kActionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* PlowException::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t PlowException::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t PlowException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlowException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlowException");

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlowException &a, PlowException &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

const char* DependT::ascii_fingerprint = "42D5F222D6ED9D4192E5224B386908E6";
const uint8_t DependT::binary_fingerprint[16] = {0x42,0xD5,0xF2,0x22,0xD6,0xED,0x9D,0x41,0x92,0xE5,0x22,0x4B,0x38,0x69,0x08,0xE6};

uint32_t DependT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_type = false;
  bool isset_active = false;
  bool isset_createdTime = false;
  bool isset_satisfiedTime = false;
  bool isset_dependentJobId = false;
  bool isset_dependOnJobId = false;
  bool isset_dependentJobName = false;
  bool isset_dependOnJobName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (DependType::type)ecast0;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          isset_active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          isset_createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->satisfiedTime);
          isset_satisfiedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentJobId);
          isset_dependentJobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnJobId);
          isset_dependOnJobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentLayerId);
          this->__isset.dependentLayerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnLayerId);
          this->__isset.dependOnLayerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentTaskId);
          this->__isset.dependentTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnTaskId);
          this->__isset.dependOnTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentJobName);
          isset_dependentJobName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnJobName);
          isset_dependOnJobName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentLayerName);
          this->__isset.dependentLayerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnLayerName);
          this->__isset.dependOnLayerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentTaskName);
          this->__isset.dependentTaskName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnTaskName);
          this->__isset.dependOnTaskName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_active)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_createdTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_satisfiedTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependentJobId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependOnJobId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependentJobName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependOnJobName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DependT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DependT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("satisfiedTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->satisfiedTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentJobId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dependentJobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnJobId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->dependOnJobId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dependentLayerId) {
    xfer += oprot->writeFieldBegin("dependentLayerId", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->dependentLayerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnLayerId) {
    xfer += oprot->writeFieldBegin("dependOnLayerId", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->dependOnLayerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependentTaskId) {
    xfer += oprot->writeFieldBegin("dependentTaskId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->dependentTaskId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnTaskId) {
    xfer += oprot->writeFieldBegin("dependOnTaskId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->dependOnTaskId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dependentJobName", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->dependentJobName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnJobName", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->dependOnJobName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dependentLayerName) {
    xfer += oprot->writeFieldBegin("dependentLayerName", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->dependentLayerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnLayerName) {
    xfer += oprot->writeFieldBegin("dependOnLayerName", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->dependOnLayerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependentTaskName) {
    xfer += oprot->writeFieldBegin("dependentTaskName", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->dependentTaskName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dependOnTaskName) {
    xfer += oprot->writeFieldBegin("dependOnTaskName", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->dependOnTaskName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DependT &a, DependT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.active, b.active);
  swap(a.createdTime, b.createdTime);
  swap(a.satisfiedTime, b.satisfiedTime);
  swap(a.dependentJobId, b.dependentJobId);
  swap(a.dependOnJobId, b.dependOnJobId);
  swap(a.dependentLayerId, b.dependentLayerId);
  swap(a.dependOnLayerId, b.dependOnLayerId);
  swap(a.dependentTaskId, b.dependentTaskId);
  swap(a.dependOnTaskId, b.dependOnTaskId);
  swap(a.dependentJobName, b.dependentJobName);
  swap(a.dependOnJobName, b.dependOnJobName);
  swap(a.dependentLayerName, b.dependentLayerName);
  swap(a.dependOnLayerName, b.dependOnLayerName);
  swap(a.dependentTaskName, b.dependentTaskName);
  swap(a.dependOnTaskName, b.dependOnTaskName);
  swap(a.__isset, b.__isset);
}

const char* TaskTotalsT::ascii_fingerprint = "458493A9F4060F6499357D68C4F331E2";
const uint8_t TaskTotalsT::binary_fingerprint[16] = {0x45,0x84,0x93,0xA9,0xF4,0x06,0x0F,0x64,0x99,0x35,0x7D,0x68,0xC4,0xF3,0x31,0xE2};

uint32_t TaskTotalsT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalTaskCount);
          this->__isset.totalTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->succeededTaskCount);
          this->__isset.succeededTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runningTaskCount);
          this->__isset.runningTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deadTaskCount);
          this->__isset.deadTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eatenTaskCount);
          this->__isset.eatenTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->waitingTaskCount);
          this->__isset.waitingTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dependTaskCount);
          this->__isset.dependTaskCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskTotalsT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskTotalsT");

  xfer += oprot->writeFieldBegin("totalTaskCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->totalTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("succeededTaskCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->succeededTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runningTaskCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->runningTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deadTaskCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->deadTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eatenTaskCount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->eatenTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("waitingTaskCount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->waitingTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependTaskCount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->dependTaskCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskTotalsT &a, TaskTotalsT &b) {
  using ::std::swap;
  swap(a.totalTaskCount, b.totalTaskCount);
  swap(a.succeededTaskCount, b.succeededTaskCount);
  swap(a.runningTaskCount, b.runningTaskCount);
  swap(a.deadTaskCount, b.deadTaskCount);
  swap(a.eatenTaskCount, b.eatenTaskCount);
  swap(a.waitingTaskCount, b.waitingTaskCount);
  swap(a.dependTaskCount, b.dependTaskCount);
  swap(a.__isset, b.__isset);
}

const char* ProjectT::ascii_fingerprint = "557CE3E1F35DD5D74A3999FB1200CAB8";
const uint8_t ProjectT::binary_fingerprint[16] = {0x55,0x7C,0xE3,0xE1,0xF3,0x5D,0xD5,0xD7,0x4A,0x39,0x99,0xFB,0x12,0x00,0xCA,0xB8};

uint32_t ProjectT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isActive);
          this->__isset.isActive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProjectT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProjectT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isActive", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->isActive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProjectT &a, ProjectT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.code, b.code);
  swap(a.title, b.title);
  swap(a.isActive, b.isActive);
  swap(a.__isset, b.__isset);
}

const char* ClusterCountsT::ascii_fingerprint = "FB78EBC5FCC9B4E153E910DEF7648158";
const uint8_t ClusterCountsT::binary_fingerprint[16] = {0xFB,0x78,0xEB,0xC5,0xFC,0xC9,0xB4,0xE1,0x53,0xE9,0x10,0xDE,0xF7,0x64,0x81,0x58};

uint32_t ClusterCountsT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_nodes = false;
  bool isset_upNodes = false;
  bool isset_downNodes = false;
  bool isset_repairNodes = false;
  bool isset_lockedNodes = false;
  bool isset_unlockedNodes = false;
  bool isset_cores = false;
  bool isset_upCores = false;
  bool isset_downCores = false;
  bool isset_repairCores = false;
  bool isset_lockedCores = false;
  bool isset_unlockedCores = false;
  bool isset_runCores = false;
  bool isset_idleCores = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nodes);
          isset_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upNodes);
          isset_upNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->downNodes);
          isset_downNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->repairNodes);
          isset_repairNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lockedNodes);
          isset_lockedNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockedNodes);
          isset_unlockedNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cores);
          isset_cores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upCores);
          isset_upCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->downCores);
          isset_downCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->repairCores);
          isset_repairCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lockedCores);
          isset_lockedCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlockedCores);
          isset_unlockedCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          isset_runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idleCores);
          isset_idleCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_nodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_upNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_downNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_repairNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lockedNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockedNodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_upCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_downCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_repairCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lockedCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlockedCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_runCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_idleCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClusterCountsT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ClusterCountsT");

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->nodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upNodes", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->upNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downNodes", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->downNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repairNodes", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->repairNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lockedNodes", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lockedNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockedNodes", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->unlockedNodes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cores", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->cores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->upCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downCores", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->downCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repairCores", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->repairCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lockedCores", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->lockedCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlockedCores", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->unlockedCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idleCores", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->idleCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClusterCountsT &a, ClusterCountsT &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.upNodes, b.upNodes);
  swap(a.downNodes, b.downNodes);
  swap(a.repairNodes, b.repairNodes);
  swap(a.lockedNodes, b.lockedNodes);
  swap(a.unlockedNodes, b.unlockedNodes);
  swap(a.cores, b.cores);
  swap(a.upCores, b.upCores);
  swap(a.downCores, b.downCores);
  swap(a.repairCores, b.repairCores);
  swap(a.lockedCores, b.lockedCores);
  swap(a.unlockedCores, b.unlockedCores);
  swap(a.runCores, b.runCores);
  swap(a.idleCores, b.idleCores);
}

const char* ClusterT::ascii_fingerprint = "44007FF02F852C1596154F7EE0B2C7C9";
const uint8_t ClusterT::binary_fingerprint[16] = {0x44,0x00,0x7F,0xF0,0x2F,0x85,0x2C,0x15,0x96,0x15,0x4F,0x7E,0xE0,0xB2,0xC7,0xC9};

uint32_t ClusterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tags.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readSetBegin(_etype4, _size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              std::string _elem6;
              xfer += iprot->readString(_elem6);
              this->tags.insert(_elem6);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isLocked);
          this->__isset.isLocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDefault);
          this->__isset.isDefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->total.read(iprot);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClusterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ClusterT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::set<std::string> ::const_iterator _iter7;
    for (_iter7 = this->tags.begin(); _iter7 != this->tags.end(); ++_iter7)
    {
      xfer += oprot->writeString((*_iter7));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isLocked", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->isLocked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isDefault", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isDefault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->total.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClusterT &a, ClusterT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.tags, b.tags);
  swap(a.isLocked, b.isLocked);
  swap(a.isDefault, b.isDefault);
  swap(a.total, b.total);
  swap(a.__isset, b.__isset);
}

const char* QuotaT::ascii_fingerprint = "0168B2E7F15AD09D4D4CF27D6E2795E6";
const uint8_t QuotaT::binary_fingerprint[16] = {0x01,0x68,0xB2,0xE7,0xF1,0x5A,0xD0,0x9D,0x4D,0x4C,0xF2,0x7D,0x6E,0x27,0x95,0xE6};

uint32_t QuotaT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clusterId);
          this->__isset.clusterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->projectId);
          this->__isset.projectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isLocked);
          this->__isset.isLocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->burst);
          this->__isset.burst = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotaT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotaT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->clusterId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("projectId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->projectId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isLocked", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isLocked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("burst", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->burst);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuotaT &a, QuotaT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.clusterId, b.clusterId);
  swap(a.projectId, b.projectId);
  swap(a.name, b.name);
  swap(a.isLocked, b.isLocked);
  swap(a.size, b.size);
  swap(a.burst, b.burst);
  swap(a.runCores, b.runCores);
  swap(a.__isset, b.__isset);
}

const char* NodeSystemT::ascii_fingerprint = "DA22BC03B87E362458B544686CD45AB6";
const uint8_t NodeSystemT::binary_fingerprint[16] = {0xDA,0x22,0xBC,0x03,0xB8,0x7E,0x36,0x24,0x58,0xB5,0x44,0x68,0x6C,0xD4,0x5A,0xB6};

uint32_t NodeSystemT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->physicalCores);
          this->__isset.physicalCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->logicalCores);
          this->__isset.logicalCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalRamMb);
          this->__isset.totalRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeRamMb);
          this->__isset.freeRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalSwapMb);
          this->__isset.totalSwapMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeSwapMb);
          this->__isset.freeSwapMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cpuModel);
          this->__isset.cpuModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->platform);
          this->__isset.platform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->load.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->load.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readI32(this->load[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.load = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeSystemT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NodeSystemT");

  xfer += oprot->writeFieldBegin("physicalCores", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->physicalCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logicalCores", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->logicalCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalRamMb", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeRamMb", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->freeRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalSwapMb", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->totalSwapMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeSwapMb", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->freeSwapMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpuModel", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->cpuModel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("platform", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->platform);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("load", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->load.size()));
    std::vector<int32_t> ::const_iterator _iter13;
    for (_iter13 = this->load.begin(); _iter13 != this->load.end(); ++_iter13)
    {
      xfer += oprot->writeI32((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeSystemT &a, NodeSystemT &b) {
  using ::std::swap;
  swap(a.physicalCores, b.physicalCores);
  swap(a.logicalCores, b.logicalCores);
  swap(a.totalRamMb, b.totalRamMb);
  swap(a.freeRamMb, b.freeRamMb);
  swap(a.totalSwapMb, b.totalSwapMb);
  swap(a.freeSwapMb, b.freeSwapMb);
  swap(a.cpuModel, b.cpuModel);
  swap(a.platform, b.platform);
  swap(a.load, b.load);
  swap(a.__isset, b.__isset);
}

const char* NodeT::ascii_fingerprint = "99788DF07D715CB5A00251BB21383B4B";
const uint8_t NodeT::binary_fingerprint[16] = {0x99,0x78,0x8D,0xF0,0x7D,0x71,0x5C,0xB5,0xA0,0x02,0x51,0xBB,0x21,0x38,0x3B,0x4B};

uint32_t NodeT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clusterId);
          this->__isset.clusterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clusterName);
          this->__isset.clusterName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipaddr);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tags.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readSetBegin(_etype17, _size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              std::string _elem19;
              xfer += iprot->readString(_elem19);
              this->tags.insert(_elem19);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->state = (NodeState::type)ecast20;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updatedTime);
          this->__isset.updatedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bootTime);
          this->__isset.bootTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalCores);
          this->__isset.totalCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idleCores);
          this->__isset.idleCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalRamMb);
          this->__isset.totalRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeRamMb);
          this->__isset.freeRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->system.read(iprot);
          this->__isset.system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NodeT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->clusterId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->clusterName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ipaddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::set<std::string> ::const_iterator _iter21;
    for (_iter21 = this->tags.begin(); _iter21 != this->tags.end(); ++_iter21)
    {
      xfer += oprot->writeString((*_iter21));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->locked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedTime", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->updatedTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bootTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->bootTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalCores", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->totalCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idleCores", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->idleCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalRamMb", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->totalRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeRamMb", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->freeRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("system", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->system.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeT &a, NodeT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.clusterId, b.clusterId);
  swap(a.name, b.name);
  swap(a.clusterName, b.clusterName);
  swap(a.ipaddr, b.ipaddr);
  swap(a.tags, b.tags);
  swap(a.state, b.state);
  swap(a.locked, b.locked);
  swap(a.createdTime, b.createdTime);
  swap(a.updatedTime, b.updatedTime);
  swap(a.bootTime, b.bootTime);
  swap(a.totalCores, b.totalCores);
  swap(a.idleCores, b.idleCores);
  swap(a.totalRamMb, b.totalRamMb);
  swap(a.freeRamMb, b.freeRamMb);
  swap(a.system, b.system);
  swap(a.__isset, b.__isset);
}

const char* ProcT::ascii_fingerprint = "DF2D0B05495D75DAEEDAB46A102BFEF1";
const uint8_t ProcT::binary_fingerprint[16] = {0xDF,0x2D,0x0B,0x05,0x49,0x5D,0x75,0xDA,0xEE,0xDA,0xB4,0x6A,0x10,0x2B,0xFE,0xF1};

uint32_t ProcT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostId);
          this->__isset.hostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobName);
          this->__isset.jobName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskName);
          this->__isset.taskName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cores);
          this->__isset.cores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ramMb);
          this->__isset.ramMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->usedRamMb);
          this->__isset.usedRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->highRamMb);
          this->__isset.highRamMb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->unbooked);
          this->__isset.unbooked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProcT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProcT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->hostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->jobName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->taskName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cores", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->cores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ramMb", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->ramMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usedRamMb", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->usedRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highRamMb", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->highRamMb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unbooked", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->unbooked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcT &a, ProcT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.hostId, b.hostId);
  swap(a.jobName, b.jobName);
  swap(a.taskName, b.taskName);
  swap(a.cores, b.cores);
  swap(a.ramMb, b.ramMb);
  swap(a.usedRamMb, b.usedRamMb);
  swap(a.highRamMb, b.highRamMb);
  swap(a.unbooked, b.unbooked);
  swap(a.__isset, b.__isset);
}

const char* JobStatsT::ascii_fingerprint = "55A5DDB37A30A7D48A6FAEDCA2981C34";
const uint8_t JobStatsT::binary_fingerprint[16] = {0x55,0xA5,0xDD,0xB3,0x7A,0x30,0xA7,0xD4,0x8A,0x6F,0xAE,0xDC,0xA2,0x98,0x1C,0x34};

uint32_t JobStatsT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_highRam = false;
  bool isset_highCores = false;
  bool isset_highCoreTime = false;
  bool isset_totalCoreTime = false;
  bool isset_totalSuccessCoreTime = false;
  bool isset_totalFailCoreTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->highRam);
          isset_highRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->highCores);
          isset_highCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->highCoreTime);
          isset_highCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalCoreTime);
          isset_totalCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalSuccessCoreTime);
          isset_totalSuccessCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalFailCoreTime);
          isset_totalFailCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_highRam)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_highCores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_highCoreTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_totalCoreTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_totalSuccessCoreTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_totalFailCoreTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t JobStatsT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobStatsT");

  xfer += oprot->writeFieldBegin("highRam", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->highRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highCores", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->highCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highCoreTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->highCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalCoreTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->totalCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalSuccessCoreTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->totalSuccessCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalFailCoreTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->totalFailCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobStatsT &a, JobStatsT &b) {
  using ::std::swap;
  swap(a.highRam, b.highRam);
  swap(a.highCores, b.highCores);
  swap(a.highCoreTime, b.highCoreTime);
  swap(a.totalCoreTime, b.totalCoreTime);
  swap(a.totalSuccessCoreTime, b.totalSuccessCoreTime);
  swap(a.totalFailCoreTime, b.totalFailCoreTime);
}

const char* JobT::ascii_fingerprint = "820A0281ECA5002E35D1A2CFD48F6B6C";
const uint8_t JobT::binary_fingerprint[16] = {0x82,0x0A,0x02,0x81,0xEC,0xA5,0x00,0x2E,0x35,0xD1,0xA2,0xCF,0xD4,0x8F,0x6B,0x6C};

uint32_t JobT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_folderId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->folderId);
          isset_folderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->state = (JobState::type)ecast22;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->paused);
          this->__isset.paused = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stopTime);
          this->__isset.stopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->totals.read(iprot);
          this->__isset.totals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stats.read(iprot);
          this->__isset.stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attrs.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _ktype24;
            ::apache::thrift::protocol::TType _vtype25;
            xfer += iprot->readMapBegin(_ktype24, _vtype25, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::string _key28;
              xfer += iprot->readString(_key28);
              std::string& _val29 = this->attrs[_key28];
              xfer += iprot->readString(_val29);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_folderId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t JobT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("folderId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->folderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paused", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->paused);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopTime", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->stopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totals", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->totals.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stats", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->stats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attrs.size()));
    std::map<std::string, std::string> ::const_iterator _iter30;
    for (_iter30 = this->attrs.begin(); _iter30 != this->attrs.end(); ++_iter30)
    {
      xfer += oprot->writeString(_iter30->first);
      xfer += oprot->writeString(_iter30->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobT &a, JobT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.folderId, b.folderId);
  swap(a.name, b.name);
  swap(a.username, b.username);
  swap(a.uid, b.uid);
  swap(a.state, b.state);
  swap(a.paused, b.paused);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.runCores, b.runCores);
  swap(a.startTime, b.startTime);
  swap(a.stopTime, b.stopTime);
  swap(a.totals, b.totals);
  swap(a.stats, b.stats);
  swap(a.attrs, b.attrs);
  swap(a.__isset, b.__isset);
}

const char* LayerStatsT::ascii_fingerprint = "FAD5043C1DCD0AF2985F30FE80EBF876";
const uint8_t LayerStatsT::binary_fingerprint[16] = {0xFA,0xD5,0x04,0x3C,0x1D,0xCD,0x0A,0xF2,0x98,0x5F,0x30,0xFE,0x80,0xEB,0xF8,0x76};

uint32_t LayerStatsT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->highRam);
          this->__isset.highRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avgRam);
          this->__isset.avgRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stdDevRam);
          this->__isset.stdDevRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->highCores);
          this->__isset.highCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avgCores);
          this->__isset.avgCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stdDevCores);
          this->__isset.stdDevCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->highCoreTime);
          this->__isset.highCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avgCoreTime);
          this->__isset.avgCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lowCoreTime);
          this->__isset.lowCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stdDevCoreTime);
          this->__isset.stdDevCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalCoreTime);
          this->__isset.totalCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalSuccessCoreTime);
          this->__isset.totalSuccessCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalFailCoreTime);
          this->__isset.totalFailCoreTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LayerStatsT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LayerStatsT");

  xfer += oprot->writeFieldBegin("highRam", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->highRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgRam", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->avgRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stdDevRam", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->stdDevRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highCores", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->highCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgCores", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->avgCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stdDevCores", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->stdDevCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highCoreTime", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->highCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgCoreTime", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->avgCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lowCoreTime", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->lowCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stdDevCoreTime", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->stdDevCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalCoreTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->totalCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalSuccessCoreTime", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->totalSuccessCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalFailCoreTime", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->totalFailCoreTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LayerStatsT &a, LayerStatsT &b) {
  using ::std::swap;
  swap(a.highRam, b.highRam);
  swap(a.avgRam, b.avgRam);
  swap(a.stdDevRam, b.stdDevRam);
  swap(a.highCores, b.highCores);
  swap(a.avgCores, b.avgCores);
  swap(a.stdDevCores, b.stdDevCores);
  swap(a.highCoreTime, b.highCoreTime);
  swap(a.avgCoreTime, b.avgCoreTime);
  swap(a.lowCoreTime, b.lowCoreTime);
  swap(a.stdDevCoreTime, b.stdDevCoreTime);
  swap(a.totalCoreTime, b.totalCoreTime);
  swap(a.totalSuccessCoreTime, b.totalSuccessCoreTime);
  swap(a.totalFailCoreTime, b.totalFailCoreTime);
  swap(a.__isset, b.__isset);
}

const char* ServiceT::ascii_fingerprint = "E48E22A72EC7EABC72A475A01F0FFCFC";
const uint8_t ServiceT::binary_fingerprint[16] = {0xE4,0x8E,0x22,0xA7,0x2E,0xC7,0xEA,0xBC,0x72,0xA4,0x75,0xA0,0x1F,0x0F,0xFC,0xFC};

uint32_t ServiceT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tags.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->tags.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += iprot->readString(this->tags[_i35]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRam);
          this->__isset.minRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRam);
          this->__isset.maxRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRetries);
          this->__isset.maxRetries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->threadable);
          this->__isset.threadable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ServiceT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::vector<std::string> ::const_iterator _iter36;
    for (_iter36 = this->tags.begin(); _iter36 != this->tags.end(); ++_iter36)
    {
      xfer += oprot->writeString((*_iter36));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minRam", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->minRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRam", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->maxRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRetries", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->maxRetries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threadable", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->threadable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceT &a, ServiceT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.tags, b.tags);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.minRam, b.minRam);
  swap(a.maxRam, b.maxRam);
  swap(a.maxRetries, b.maxRetries);
  swap(a.threadable, b.threadable);
  swap(a.__isset, b.__isset);
}

const char* LayerT::ascii_fingerprint = "A14183C016B8125B3DBB065340EA046E";
const uint8_t LayerT::binary_fingerprint[16] = {0xA1,0x41,0x83,0xC0,0x16,0xB8,0x12,0x5B,0x3D,0xBB,0x06,0x53,0x40,0xEA,0x04,0x6E};

uint32_t LayerT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->range);
          this->__isset.range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serv);
          this->__isset.serv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chunk);
          this->__isset.chunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tags.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->tags.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readString(this->tags[_i41]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->threadable);
          this->__isset.threadable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRam);
          this->__isset.minRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRam);
          this->__isset.maxRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRetries);
          this->__isset.maxRetries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->totals.read(iprot);
          this->__isset.totals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stats.read(iprot);
          this->__isset.stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LayerT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LayerT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->range);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serv", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->serv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chunk", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->chunk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
    std::vector<std::string> ::const_iterator _iter42;
    for (_iter42 = this->tags.begin(); _iter42 != this->tags.end(); ++_iter42)
    {
      xfer += oprot->writeString((*_iter42));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("threadable", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->threadable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minRam", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->minRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRam", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->maxRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRetries", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->maxRetries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totals", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->totals.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stats", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->stats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LayerT &a, LayerT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.range, b.range);
  swap(a.serv, b.serv);
  swap(a.chunk, b.chunk);
  swap(a.tags, b.tags);
  swap(a.threadable, b.threadable);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.minRam, b.minRam);
  swap(a.maxRam, b.maxRam);
  swap(a.runCores, b.runCores);
  swap(a.maxRetries, b.maxRetries);
  swap(a.totals, b.totals);
  swap(a.stats, b.stats);
  swap(a.__isset, b.__isset);
}

const char* TaskStatsT::ascii_fingerprint = "99ED98DF5C3DAC17E0A5BC18F72D51A4";
const uint8_t TaskStatsT::binary_fingerprint[16] = {0x99,0xED,0x98,0xDF,0x5C,0x3D,0xAC,0x17,0xE0,0xA5,0xBC,0x18,0xF7,0x2D,0x51,0xA4};

uint32_t TaskStatsT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cores);
          this->__isset.cores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->usedCores);
          this->__isset.usedCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->highCores);
          this->__isset.highCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ram);
          this->__isset.ram = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->usedRam);
          this->__isset.usedRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->highRam);
          this->__isset.highRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stopTime);
          this->__isset.stopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retryNum);
          this->__isset.retryNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->progress);
          this->__isset.progress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastLogLine);
          this->__isset.lastLogLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitStatus);
          this->__isset.exitStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitSignal);
          this->__isset.exitSignal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskStatsT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskStatsT");

  xfer += oprot->writeFieldBegin("cores", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->cores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usedCores", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->usedCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highCores", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->highCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ram", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->ram);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usedRam", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->usedRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highRam", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->highRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->stopTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retryNum", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->retryNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->progress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastLogLine", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->lastLogLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exitStatus", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->exitStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exitSignal", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->exitSignal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskStatsT &a, TaskStatsT &b) {
  using ::std::swap;
  swap(a.cores, b.cores);
  swap(a.usedCores, b.usedCores);
  swap(a.highCores, b.highCores);
  swap(a.ram, b.ram);
  swap(a.usedRam, b.usedRam);
  swap(a.highRam, b.highRam);
  swap(a.startTime, b.startTime);
  swap(a.stopTime, b.stopTime);
  swap(a.retryNum, b.retryNum);
  swap(a.progress, b.progress);
  swap(a.lastLogLine, b.lastLogLine);
  swap(a.active, b.active);
  swap(a.exitStatus, b.exitStatus);
  swap(a.exitSignal, b.exitSignal);
  swap(a.__isset, b.__isset);
}

const char* TaskT::ascii_fingerprint = "5E299AB9000027F7AA4555C5C9A3E73C";
const uint8_t TaskT::binary_fingerprint[16] = {0x5E,0x29,0x9A,0xB9,0x00,0x00,0x27,0xF7,0xAA,0x45,0x55,0xC5,0xC9,0xA3,0xE7,0x3C};

uint32_t TaskT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast43;
          xfer += iprot->readI32(ecast43);
          this->state = (TaskState::type)ecast43;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retries);
          this->__isset.retries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRam);
          this->__isset.minRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastResource);
          this->__isset.lastResource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stats.read(iprot);
          this->__isset.stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TaskT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retries", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->retries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minRam", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->minRam);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastResource", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->lastResource);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stats", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->stats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskT &a, TaskT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.number, b.number);
  swap(a.state, b.state);
  swap(a.order, b.order);
  swap(a.retries, b.retries);
  swap(a.minCores, b.minCores);
  swap(a.minRam, b.minRam);
  swap(a.lastResource, b.lastResource);
  swap(a.stats, b.stats);
  swap(a.__isset, b.__isset);
}

const char* FolderT::ascii_fingerprint = "3A080FDD1552A3DF29AC58BA914EBBCD";
const uint8_t FolderT::binary_fingerprint[16] = {0x3A,0x08,0x0F,0xDD,0x15,0x52,0xA3,0xDF,0x29,0xAC,0x58,0xBA,0x91,0x4E,0xBB,0xCD};

uint32_t FolderT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runCores);
          this->__isset.runCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->totals.read(iprot);
          this->__isset.totals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->jobs.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->jobs.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += this->jobs[_i48].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.jobs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FolderT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FolderT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->minCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maxCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCores", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->runCores);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totals", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->totals.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.jobs) {
    xfer += oprot->writeFieldBegin("jobs", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->jobs.size()));
      std::vector<JobT> ::const_iterator _iter49;
      for (_iter49 = this->jobs.begin(); _iter49 != this->jobs.end(); ++_iter49)
      {
        xfer += (*_iter49).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FolderT &a, FolderT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.runCores, b.runCores);
  swap(a.order, b.order);
  swap(a.totals, b.totals);
  swap(a.jobs, b.jobs);
  swap(a.__isset, b.__isset);
}

const char* MatcherT::ascii_fingerprint = "97DC467FBBF7D1E3CE39BC21DB8631F9";
const uint8_t MatcherT::binary_fingerprint[16] = {0x97,0xDC,0x46,0x7F,0xBB,0xF7,0xD1,0xE3,0xCE,0x39,0xBC,0x21,0xDB,0x86,0x31,0xF9};

uint32_t MatcherT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast50;
          xfer += iprot->readI32(ecast50);
          this->type = (MatcherType::type)ecast50;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast51;
          xfer += iprot->readI32(ecast51);
          this->field = (MatcherField::type)ecast51;
          this->__isset.field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attr);
          this->__isset.attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatcherT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MatcherT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("field", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->field);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.attr) {
    xfer += oprot->writeFieldBegin("attr", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->attr);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatcherT &a, MatcherT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.field, b.field);
  swap(a.value, b.value);
  swap(a.attr, b.attr);
  swap(a.__isset, b.__isset);
}

const char* ActionT::ascii_fingerprint = "D635E8134E429A3CB23835FC5CC677D6";
const uint8_t ActionT::binary_fingerprint[16] = {0xD6,0x35,0xE8,0x13,0x4E,0x42,0x9A,0x3C,0xB2,0x38,0x35,0xFC,0x5C,0xC6,0x77,0xD6};

uint32_t ActionT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast52;
          xfer += iprot->readI32(ecast52);
          this->type = (ActionType::type)ecast52;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ActionT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ActionT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActionT &a, ActionT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* FilterT::ascii_fingerprint = "B72114DFC4A1A2E8CF1CBE22113832EF";
const uint8_t FilterT::binary_fingerprint[16] = {0xB7,0x21,0x14,0xDF,0xC4,0xA1,0xA2,0xE8,0xCF,0x1C,0xBE,0x22,0x11,0x38,0x32,0xEF};

uint32_t FilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->matchers.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->matchers.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += this->matchers[_i57].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.matchers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actions.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            xfer += iprot->readListBegin(_etype61, _size58);
            this->actions.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              xfer += this->actions[_i62].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FilterT");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.matchers) {
    xfer += oprot->writeFieldBegin("matchers", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->matchers.size()));
      std::vector<MatcherT> ::const_iterator _iter63;
      for (_iter63 = this->matchers.begin(); _iter63 != this->matchers.end(); ++_iter63)
      {
        xfer += (*_iter63).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actions) {
    xfer += oprot->writeFieldBegin("actions", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actions.size()));
      std::vector<ActionT> ::const_iterator _iter64;
      for (_iter64 = this->actions.begin(); _iter64 != this->actions.end(); ++_iter64)
      {
        xfer += (*_iter64).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FilterT &a, FilterT &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.order, b.order);
  swap(a.enabled, b.enabled);
  swap(a.matchers, b.matchers);
  swap(a.actions, b.actions);
  swap(a.__isset, b.__isset);
}

const char* DependSpecT::ascii_fingerprint = "C74CD2BA0D69BC506E09542F0DD5DA6B";
const uint8_t DependSpecT::binary_fingerprint[16] = {0xC7,0x4C,0xD2,0xBA,0x0D,0x69,0xBC,0x50,0x6E,0x09,0x54,0x2F,0x0D,0xD5,0xDA,0x6B};

uint32_t DependSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast65;
          xfer += iprot->readI32(ecast65);
          this->type = (DependType::type)ecast65;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentJob);
          this->__isset.dependentJob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnJob);
          this->__isset.dependOnJob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentLayer);
          this->__isset.dependentLayer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnLayer);
          this->__isset.dependOnLayer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependentTask);
          this->__isset.dependentTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependOnTask);
          this->__isset.dependOnTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DependSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DependSpecT");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentJob", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dependentJob);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnJob", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dependOnJob);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentLayer", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dependentLayer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnLayer", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->dependOnLayer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependentTask", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->dependentTask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependOnTask", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->dependOnTask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DependSpecT &a, DependSpecT &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.dependentJob, b.dependentJob);
  swap(a.dependOnJob, b.dependOnJob);
  swap(a.dependentLayer, b.dependentLayer);
  swap(a.dependOnLayer, b.dependOnLayer);
  swap(a.dependentTask, b.dependentTask);
  swap(a.dependOnTask, b.dependOnTask);
  swap(a.__isset, b.__isset);
}

const char* TaskSpecT::ascii_fingerprint = "1603170361566071292880A0F6D53016";
const uint8_t TaskSpecT::binary_fingerprint[16] = {0x16,0x03,0x17,0x03,0x61,0x56,0x60,0x71,0x29,0x28,0x80,0xA0,0xF6,0xD5,0x30,0x16};

uint32_t TaskSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depends.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->depends.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += this->depends[_i70].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskSpecT");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depends", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->depends.size()));
    std::vector<DependSpecT> ::const_iterator _iter71;
    for (_iter71 = this->depends.begin(); _iter71 != this->depends.end(); ++_iter71)
    {
      xfer += (*_iter71).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskSpecT &a, TaskSpecT &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.depends, b.depends);
  swap(a.__isset, b.__isset);
}

const char* LayerSpecT::ascii_fingerprint = "723CBC032BDE437FE77A7B90A3AFB3F8";
const uint8_t LayerSpecT::binary_fingerprint[16] = {0x72,0x3C,0xBC,0x03,0x2B,0xDE,0x43,0x7F,0xE7,0x7A,0x7B,0x90,0xA3,0xAF,0xB3,0xF8};

uint32_t LayerSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_command = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->command.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readListBegin(_etype75, _size72);
            this->command.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += iprot->readString(this->command[_i76]);
            }
            xfer += iprot->readListEnd();
          }
          isset_command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->range);
          this->__isset.range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tags.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readListBegin(_etype80, _size77);
            this->tags.resize(_size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              xfer += iprot->readString(this->tags[_i81]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serv);
          this->__isset.serv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minCores);
          this->__isset.minCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxCores);
          this->__isset.maxCores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minRam);
          this->__isset.minRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRam);
          this->__isset.maxRam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->threadable);
          this->__isset.threadable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRetries);
          this->__isset.maxRetries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chunk);
          this->__isset.chunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depends.clear();
            uint32_t _size82;
            ::apache::thrift::protocol::TType _etype85;
            xfer += iprot->readListBegin(_etype85, _size82);
            this->depends.resize(_size82);
            uint32_t _i86;
            for (_i86 = 0; _i86 < _size82; ++_i86)
            {
              xfer += this->depends[_i86].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size87;
            ::apache::thrift::protocol::TType _etype90;
            xfer += iprot->readListBegin(_etype90, _size87);
            this->tasks.resize(_size87);
            uint32_t _i91;
            for (_i91 = 0; _i91 < _size87; ++_i91)
            {
              xfer += this->tasks[_i91].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->env.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _ktype93;
            ::apache::thrift::protocol::TType _vtype94;
            xfer += iprot->readMapBegin(_ktype93, _vtype94, _size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              std::string _key97;
              xfer += iprot->readString(_key97);
              std::string& _val98 = this->env[_key97];
              xfer += iprot->readString(_val98);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.env = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_command)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LayerSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LayerSpecT");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->command.size()));
    std::vector<std::string> ::const_iterator _iter99;
    for (_iter99 = this->command.begin(); _iter99 != this->command.end(); ++_iter99)
    {
      xfer += oprot->writeString((*_iter99));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.range) {
    xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->range);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tags) {
    xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
      std::vector<std::string> ::const_iterator _iter100;
      for (_iter100 = this->tags.begin(); _iter100 != this->tags.end(); ++_iter100)
      {
        xfer += oprot->writeString((*_iter100));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serv) {
    xfer += oprot->writeFieldBegin("serv", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->serv);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minCores) {
    xfer += oprot->writeFieldBegin("minCores", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->minCores);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxCores) {
    xfer += oprot->writeFieldBegin("maxCores", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->maxCores);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minRam) {
    xfer += oprot->writeFieldBegin("minRam", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->minRam);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxRam) {
    xfer += oprot->writeFieldBegin("maxRam", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->maxRam);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.threadable) {
    xfer += oprot->writeFieldBegin("threadable", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->threadable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxRetries) {
    xfer += oprot->writeFieldBegin("maxRetries", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->maxRetries);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("chunk", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->chunk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depends", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->depends.size()));
    std::vector<DependSpecT> ::const_iterator _iter101;
    for (_iter101 = this->depends.begin(); _iter101 != this->depends.end(); ++_iter101)
    {
      xfer += (*_iter101).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
    std::vector<TaskSpecT> ::const_iterator _iter102;
    for (_iter102 = this->tasks.begin(); _iter102 != this->tasks.end(); ++_iter102)
    {
      xfer += (*_iter102).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("env", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->env.size()));
    std::map<std::string, std::string> ::const_iterator _iter103;
    for (_iter103 = this->env.begin(); _iter103 != this->env.end(); ++_iter103)
    {
      xfer += oprot->writeString(_iter103->first);
      xfer += oprot->writeString(_iter103->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LayerSpecT &a, LayerSpecT &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.command, b.command);
  swap(a.range, b.range);
  swap(a.tags, b.tags);
  swap(a.serv, b.serv);
  swap(a.minCores, b.minCores);
  swap(a.maxCores, b.maxCores);
  swap(a.minRam, b.minRam);
  swap(a.maxRam, b.maxRam);
  swap(a.threadable, b.threadable);
  swap(a.maxRetries, b.maxRetries);
  swap(a.chunk, b.chunk);
  swap(a.depends, b.depends);
  swap(a.tasks, b.tasks);
  swap(a.env, b.env);
  swap(a.__isset, b.__isset);
}

const char* JobSpecT::ascii_fingerprint = "A23225E616BF3B5ADFAA8264A5C15638";
const uint8_t JobSpecT::binary_fingerprint[16] = {0xA2,0x32,0x25,0xE6,0x16,0xBF,0x3B,0x5A,0xDF,0xAA,0x82,0x64,0xA5,0xC1,0x56,0x38};

uint32_t JobSpecT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->project);
          this->__isset.project = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->paused);
          this->__isset.paused = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logPath);
          this->__isset.logPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->layers.clear();
            uint32_t _size104;
            ::apache::thrift::protocol::TType _etype107;
            xfer += iprot->readListBegin(_etype107, _size104);
            this->layers.resize(_size104);
            uint32_t _i108;
            for (_i108 = 0; _i108 < _size104; ++_i108)
            {
              xfer += this->layers[_i108].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.layers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depends.clear();
            uint32_t _size109;
            ::apache::thrift::protocol::TType _etype112;
            xfer += iprot->readListBegin(_etype112, _size109);
            this->depends.resize(_size109);
            uint32_t _i113;
            for (_i113 = 0; _i113 < _size109; ++_i113)
            {
              xfer += this->depends[_i113].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attrs.clear();
            uint32_t _size114;
            ::apache::thrift::protocol::TType _ktype115;
            ::apache::thrift::protocol::TType _vtype116;
            xfer += iprot->readMapBegin(_ktype115, _vtype116, _size114);
            uint32_t _i118;
            for (_i118 = 0; _i118 < _size114; ++_i118)
            {
              std::string _key119;
              xfer += iprot->readString(_key119);
              std::string& _val120 = this->attrs[_key119];
              xfer += iprot->readString(_val120);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->env.clear();
            uint32_t _size121;
            ::apache::thrift::protocol::TType _ktype122;
            ::apache::thrift::protocol::TType _vtype123;
            xfer += iprot->readMapBegin(_ktype122, _vtype123, _size121);
            uint32_t _i125;
            for (_i125 = 0; _i125 < _size121; ++_i125)
            {
              std::string _key126;
              xfer += iprot->readString(_key126);
              std::string& _val127 = this->env[_key126];
              xfer += iprot->readString(_val127);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.env = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobSpecT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobSpecT");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("project", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->project);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paused", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->paused);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logPath", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->logPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("layers", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->layers.size()));
    std::vector<LayerSpecT> ::const_iterator _iter128;
    for (_iter128 = this->layers.begin(); _iter128 != this->layers.end(); ++_iter128)
    {
      xfer += (*_iter128).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depends", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->depends.size()));
    std::vector<DependSpecT> ::const_iterator _iter129;
    for (_iter129 = this->depends.begin(); _iter129 != this->depends.end(); ++_iter129)
    {
      xfer += (*_iter129).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attrs.size()));
    std::map<std::string, std::string> ::const_iterator _iter130;
    for (_iter130 = this->attrs.begin(); _iter130 != this->attrs.end(); ++_iter130)
    {
      xfer += oprot->writeString(_iter130->first);
      xfer += oprot->writeString(_iter130->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("env", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->env.size()));
    std::map<std::string, std::string> ::const_iterator _iter131;
    for (_iter131 = this->env.begin(); _iter131 != this->env.end(); ++_iter131)
    {
      xfer += oprot->writeString(_iter131->first);
      xfer += oprot->writeString(_iter131->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobSpecT &a, JobSpecT &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.project, b.project);
  swap(a.paused, b.paused);
  swap(a.username, b.username);
  swap(a.uid, b.uid);
  swap(a.logPath, b.logPath);
  swap(a.layers, b.layers);
  swap(a.depends, b.depends);
  swap(a.attrs, b.attrs);
  swap(a.env, b.env);
  swap(a.__isset, b.__isset);
}

const char* JobFilterT::ascii_fingerprint = "F937E676F235563615B336A844347504";
const uint8_t JobFilterT::binary_fingerprint[16] = {0xF9,0x37,0xE6,0x76,0xF2,0x35,0x56,0x36,0x15,0xB3,0x36,0xA8,0x44,0x34,0x75,0x04};

uint32_t JobFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->matchingOnly);
          this->__isset.matchingOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->project.clear();
            uint32_t _size132;
            ::apache::thrift::protocol::TType _etype135;
            xfer += iprot->readListBegin(_etype135, _size132);
            this->project.resize(_size132);
            uint32_t _i136;
            for (_i136 = 0; _i136 < _size132; ++_i136)
            {
              xfer += iprot->readString(this->project[_i136]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.project = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->user.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _etype140;
            xfer += iprot->readListBegin(_etype140, _size137);
            this->user.resize(_size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              xfer += iprot->readString(this->user[_i141]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regex);
          this->__isset.regex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->states.clear();
            uint32_t _size142;
            ::apache::thrift::protocol::TType _etype145;
            xfer += iprot->readListBegin(_etype145, _size142);
            this->states.resize(_size142);
            uint32_t _i146;
            for (_i146 = 0; _i146 < _size142; ++_i146)
            {
              int32_t ecast147;
              xfer += iprot->readI32(ecast147);
              this->states[_i146] = (JobState::type)ecast147;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.states = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->jobIds.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _etype151;
            xfer += iprot->readListBegin(_etype151, _size148);
            this->jobIds.resize(_size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              xfer += iprot->readString(this->jobIds[_i152]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.jobIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size153;
            ::apache::thrift::protocol::TType _etype156;
            xfer += iprot->readListBegin(_etype156, _size153);
            this->name.resize(_size153);
            uint32_t _i157;
            for (_i157 = 0; _i157 < _size153; ++_i157)
            {
              xfer += iprot->readString(this->name[_i157]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobFilterT");

  xfer += oprot->writeFieldBegin("matchingOnly", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->matchingOnly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("project", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->project.size()));
    std::vector<std::string> ::const_iterator _iter158;
    for (_iter158 = this->project.begin(); _iter158 != this->project.end(); ++_iter158)
    {
      xfer += oprot->writeString((*_iter158));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->user.size()));
    std::vector<std::string> ::const_iterator _iter159;
    for (_iter159 = this->user.begin(); _iter159 != this->user.end(); ++_iter159)
    {
      xfer += oprot->writeString((*_iter159));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regex", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->regex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("states", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->states.size()));
    std::vector<JobState::type> ::const_iterator _iter160;
    for (_iter160 = this->states.begin(); _iter160 != this->states.end(); ++_iter160)
    {
      xfer += oprot->writeI32((int32_t)(*_iter160));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobIds", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->jobIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter161;
    for (_iter161 = this->jobIds.begin(); _iter161 != this->jobIds.end(); ++_iter161)
    {
      xfer += oprot->writeString((*_iter161));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->name.size()));
    std::vector<std::string> ::const_iterator _iter162;
    for (_iter162 = this->name.begin(); _iter162 != this->name.end(); ++_iter162)
    {
      xfer += oprot->writeString((*_iter162));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobFilterT &a, JobFilterT &b) {
  using ::std::swap;
  swap(a.matchingOnly, b.matchingOnly);
  swap(a.project, b.project);
  swap(a.user, b.user);
  swap(a.regex, b.regex);
  swap(a.states, b.states);
  swap(a.jobIds, b.jobIds);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* TaskFilterT::ascii_fingerprint = "03A6BE121ED140806516419A5432A4AA";
const uint8_t TaskFilterT::binary_fingerprint[16] = {0x03,0xA6,0xBE,0x12,0x1E,0xD1,0x40,0x80,0x65,0x16,0x41,0x9A,0x54,0x32,0xA4,0xAA};

uint32_t TaskFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->layerIds.clear();
            uint32_t _size163;
            ::apache::thrift::protocol::TType _etype166;
            xfer += iprot->readListBegin(_etype166, _size163);
            this->layerIds.resize(_size163);
            uint32_t _i167;
            for (_i167 = 0; _i167 < _size163; ++_i167)
            {
              xfer += iprot->readString(this->layerIds[_i167]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.layerIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->states.clear();
            uint32_t _size168;
            ::apache::thrift::protocol::TType _etype171;
            xfer += iprot->readListBegin(_etype171, _size168);
            this->states.resize(_size168);
            uint32_t _i172;
            for (_i172 = 0; _i172 < _size168; ++_i172)
            {
              int32_t ecast173;
              xfer += iprot->readI32(ecast173);
              this->states[_i172] = (TaskState::type)ecast173;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.states = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdateTime);
          this->__isset.lastUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->taskIds.clear();
            uint32_t _size174;
            ::apache::thrift::protocol::TType _etype177;
            xfer += iprot->readListBegin(_etype177, _size174);
            this->taskIds.resize(_size174);
            uint32_t _i178;
            for (_i178 = 0; _i178 < _size174; ++_i178)
            {
              xfer += iprot->readString(this->taskIds[_i178]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.taskIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodeIds.clear();
            uint32_t _size179;
            ::apache::thrift::protocol::TType _etype182;
            xfer += iprot->readListBegin(_etype182, _size179);
            this->nodeIds.resize(_size179);
            uint32_t _i183;
            for (_i183 = 0; _i183 < _size179; ++_i183)
            {
              xfer += iprot->readString(this->nodeIds[_i183]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodeIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskFilterT");

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->jobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("layerIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->layerIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter184;
    for (_iter184 = this->layerIds.begin(); _iter184 != this->layerIds.end(); ++_iter184)
    {
      xfer += oprot->writeString((*_iter184));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("states", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->states.size()));
    std::vector<TaskState::type> ::const_iterator _iter185;
    for (_iter185 = this->states.begin(); _iter185 != this->states.end(); ++_iter185)
    {
      xfer += oprot->writeI32((int32_t)(*_iter185));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastUpdateTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->lastUpdateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskIds", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->taskIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter186;
    for (_iter186 = this->taskIds.begin(); _iter186 != this->taskIds.end(); ++_iter186)
    {
      xfer += oprot->writeString((*_iter186));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodeIds", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->nodeIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter187;
    for (_iter187 = this->nodeIds.begin(); _iter187 != this->nodeIds.end(); ++_iter187)
    {
      xfer += oprot->writeString((*_iter187));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskFilterT &a, TaskFilterT &b) {
  using ::std::swap;
  swap(a.jobId, b.jobId);
  swap(a.layerIds, b.layerIds);
  swap(a.states, b.states);
  swap(a.limit, b.limit);
  swap(a.offset, b.offset);
  swap(a.lastUpdateTime, b.lastUpdateTime);
  swap(a.taskIds, b.taskIds);
  swap(a.nodeIds, b.nodeIds);
  swap(a.__isset, b.__isset);
}

const char* NodeFilterT::ascii_fingerprint = "A5FBE94ED5EBC0E091C6D957CD35627C";
const uint8_t NodeFilterT::binary_fingerprint[16] = {0xA5,0xFB,0xE9,0x4E,0xD5,0xEB,0xC0,0xE0,0x91,0xC6,0xD9,0x57,0xCD,0x35,0x62,0x7C};

uint32_t NodeFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hostIds.clear();
            uint32_t _size188;
            ::apache::thrift::protocol::TType _etype191;
            xfer += iprot->readListBegin(_etype191, _size188);
            this->hostIds.resize(_size188);
            uint32_t _i192;
            for (_i192 = 0; _i192 < _size188; ++_i192)
            {
              xfer += iprot->readString(this->hostIds[_i192]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hostIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->clusterIds.clear();
            uint32_t _size193;
            ::apache::thrift::protocol::TType _etype196;
            xfer += iprot->readListBegin(_etype196, _size193);
            this->clusterIds.resize(_size193);
            uint32_t _i197;
            for (_i197 = 0; _i197 < _size193; ++_i197)
            {
              xfer += iprot->readString(this->clusterIds[_i197]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.clusterIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regex);
          this->__isset.regex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hostnames.clear();
            uint32_t _size198;
            ::apache::thrift::protocol::TType _etype201;
            xfer += iprot->readListBegin(_etype201, _size198);
            this->hostnames.resize(_size198);
            uint32_t _i202;
            for (_i202 = 0; _i202 < _size198; ++_i202)
            {
              xfer += iprot->readString(this->hostnames[_i202]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hostnames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->states.clear();
            uint32_t _size203;
            ::apache::thrift::protocol::TType _etype206;
            xfer += iprot->readListBegin(_etype206, _size203);
            this->states.resize(_size203);
            uint32_t _i207;
            for (_i207 = 0; _i207 < _size203; ++_i207)
            {
              int32_t ecast208;
              xfer += iprot->readI32(ecast208);
              this->states[_i207] = (NodeState::type)ecast208;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.states = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->locked);
          this->__isset.locked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NodeFilterT");

  xfer += oprot->writeFieldBegin("hostIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->hostIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter209;
    for (_iter209 = this->hostIds.begin(); _iter209 != this->hostIds.end(); ++_iter209)
    {
      xfer += oprot->writeString((*_iter209));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clusterIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->clusterIds.size()));
    std::vector< ::Plow::Guid> ::const_iterator _iter210;
    for (_iter210 = this->clusterIds.begin(); _iter210 != this->clusterIds.end(); ++_iter210)
    {
      xfer += oprot->writeString((*_iter210));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regex", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->regex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostnames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->hostnames.size()));
    std::vector<std::string> ::const_iterator _iter211;
    for (_iter211 = this->hostnames.begin(); _iter211 != this->hostnames.end(); ++_iter211)
    {
      xfer += oprot->writeString((*_iter211));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("states", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->states.size()));
    std::vector<NodeState::type> ::const_iterator _iter212;
    for (_iter212 = this->states.begin(); _iter212 != this->states.end(); ++_iter212)
    {
      xfer += oprot->writeI32((int32_t)(*_iter212));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.locked) {
    xfer += oprot->writeFieldBegin("locked", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->locked);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeFilterT &a, NodeFilterT &b) {
  using ::std::swap;
  swap(a.hostIds, b.hostIds);
  swap(a.clusterIds, b.clusterIds);
  swap(a.regex, b.regex);
  swap(a.hostnames, b.hostnames);
  swap(a.states, b.states);
  swap(a.locked, b.locked);
  swap(a.__isset, b.__isset);
}

const char* QuotaFilterT::ascii_fingerprint = "92AA23526EDCB0628C830C8758ED7059";
const uint8_t QuotaFilterT::binary_fingerprint[16] = {0x92,0xAA,0x23,0x52,0x6E,0xDC,0xB0,0x62,0x8C,0x83,0x0C,0x87,0x58,0xED,0x70,0x59};

uint32_t QuotaFilterT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->project.clear();
            uint32_t _size213;
            ::apache::thrift::protocol::TType _etype216;
            xfer += iprot->readListBegin(_etype216, _size213);
            this->project.resize(_size213);
            uint32_t _i217;
            for (_i217 = 0; _i217 < _size213; ++_i217)
            {
              xfer += iprot->readString(this->project[_i217]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.project = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cluster.clear();
            uint32_t _size218;
            ::apache::thrift::protocol::TType _etype221;
            xfer += iprot->readListBegin(_etype221, _size218);
            this->cluster.resize(_size218);
            uint32_t _i222;
            for (_i222 = 0; _i222 < _size218; ++_i222)
            {
              xfer += iprot->readString(this->cluster[_i222]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotaFilterT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotaFilterT");

  if (this->__isset.project) {
    xfer += oprot->writeFieldBegin("project", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->project.size()));
      std::vector< ::Plow::Guid> ::const_iterator _iter223;
      for (_iter223 = this->project.begin(); _iter223 != this->project.end(); ++_iter223)
      {
        xfer += oprot->writeString((*_iter223));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cluster) {
    xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->cluster.size()));
      std::vector< ::Plow::Guid> ::const_iterator _iter224;
      for (_iter224 = this->cluster.begin(); _iter224 != this->cluster.end(); ++_iter224)
      {
        xfer += oprot->writeString((*_iter224));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QuotaFilterT &a, QuotaFilterT &b) {
  using ::std::swap;
  swap(a.project, b.project);
  swap(a.cluster, b.cluster);
  swap(a.__isset, b.__isset);
}

const char* OutputT::ascii_fingerprint = "F7C641917C22B35AE581CCD54910B00D";
const uint8_t OutputT::binary_fingerprint[16] = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};

uint32_t OutputT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attrs.clear();
            uint32_t _size225;
            ::apache::thrift::protocol::TType _ktype226;
            ::apache::thrift::protocol::TType _vtype227;
            xfer += iprot->readMapBegin(_ktype226, _vtype227, _size225);
            uint32_t _i229;
            for (_i229 = 0; _i229 < _size225; ++_i229)
            {
              std::string _key230;
              xfer += iprot->readString(_key230);
              std::string& _val231 = this->attrs[_key230];
              xfer += iprot->readString(_val231);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OutputT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OutputT");

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attrs.size()));
    std::map<std::string, std::string> ::const_iterator _iter232;
    for (_iter232 = this->attrs.begin(); _iter232 != this->attrs.end(); ++_iter232)
    {
      xfer += oprot->writeString(_iter232->first);
      xfer += oprot->writeString(_iter232->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OutputT &a, OutputT &b) {
  using ::std::swap;
  swap(a.path, b.path);
  swap(a.attrs, b.attrs);
  swap(a.__isset, b.__isset);
}

} // namespace
