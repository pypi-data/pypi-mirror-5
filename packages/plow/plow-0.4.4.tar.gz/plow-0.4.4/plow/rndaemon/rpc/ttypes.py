#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style:utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RndException(TException):
  """
  Attributes:
   - what
   - why
   - stack
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'what', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
    (3, TType.LIST, 'stack', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, what=None, why=None, stack=None,):
    self.what = what
    self.why = why
    self.stack = stack

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.what = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.why = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.stack = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.stack.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RndException')
    if self.what is not None:
      oprot.writeFieldBegin('what', TType.I32, 1)
      oprot.writeI32(self.what)
      oprot.writeFieldEnd()
    if self.why is not None:
      oprot.writeFieldBegin('why', TType.STRING, 2)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    if self.stack is not None:
      oprot.writeFieldBegin('stack', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.stack))
      for iter6 in self.stack:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RunTaskCommand:
  """
  Attributes:
   - procId
   - taskId
   - jobId
   - layerId
   - cores
   - command
   - env
   - logFile
   - uid
   - username
   - taskTypes
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'procId', None, None, ), # 1
    (2, TType.STRING, 'taskId', None, None, ), # 2
    (3, TType.STRING, 'jobId', None, None, ), # 3
    (4, TType.STRING, 'layerId', None, None, ), # 4
    (5, TType.I32, 'cores', None, None, ), # 5
    (6, TType.LIST, 'command', (TType.STRING,None), None, ), # 6
    (7, TType.MAP, 'env', (TType.STRING,None,TType.STRING,None), None, ), # 7
    (8, TType.STRING, 'logFile', None, None, ), # 8
    (9, TType.I32, 'uid', None, None, ), # 9
    (10, TType.STRING, 'username', None, None, ), # 10
    (11, TType.LIST, 'taskTypes', (TType.STRING,None), None, ), # 11
  )

  def __init__(self, procId=None, taskId=None, jobId=None, layerId=None, cores=None, command=None, env=None, logFile=None, uid=None, username=None, taskTypes=None,):
    self.procId = procId
    self.taskId = taskId
    self.jobId = jobId
    self.layerId = layerId
    self.cores = cores
    self.command = command
    self.env = env
    self.logFile = logFile
    self.uid = uid
    self.username = username
    self.taskTypes = taskTypes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.procId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.taskId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.layerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cores = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.command = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.command.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.env = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin() 
          for _i17 in xrange(_size13):
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            self.env[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.logFile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.taskTypes = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readString();
            self.taskTypes.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RunTaskCommand')
    if self.procId is not None:
      oprot.writeFieldBegin('procId', TType.STRING, 1)
      oprot.writeString(self.procId)
      oprot.writeFieldEnd()
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.STRING, 2)
      oprot.writeString(self.taskId)
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 3)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    if self.layerId is not None:
      oprot.writeFieldBegin('layerId', TType.STRING, 4)
      oprot.writeString(self.layerId)
      oprot.writeFieldEnd()
    if self.cores is not None:
      oprot.writeFieldBegin('cores', TType.I32, 5)
      oprot.writeI32(self.cores)
      oprot.writeFieldEnd()
    if self.command is not None:
      oprot.writeFieldBegin('command', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.command))
      for iter26 in self.command:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.env is not None:
      oprot.writeFieldBegin('env', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.env))
      for kiter27,viter28 in self.env.items():
        oprot.writeString(kiter27)
        oprot.writeString(viter28)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.logFile is not None:
      oprot.writeFieldBegin('logFile', TType.STRING, 8)
      oprot.writeString(self.logFile)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 9)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 10)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.taskTypes is not None:
      oprot.writeFieldBegin('taskTypes', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.taskTypes))
      for iter29 in self.taskTypes:
        oprot.writeString(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RunningTask:
  """
  Attributes:
   - procId
   - taskId
   - jobId
   - layerId
   - rssMb
   - pid
   - progress
   - lastLog
   - cpuPercent
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'procId', None, None, ), # 1
    (2, TType.STRING, 'taskId', None, None, ), # 2
    (3, TType.STRING, 'jobId', None, None, ), # 3
    (4, TType.STRING, 'layerId', None, None, ), # 4
    (5, TType.I32, 'rssMb', None, None, ), # 5
    (6, TType.I32, 'pid', None, None, ), # 6
    (7, TType.DOUBLE, 'progress', None, 0, ), # 7
    (8, TType.STRING, 'lastLog', None, "", ), # 8
    (9, TType.I16, 'cpuPercent', None, None, ), # 9
  )

  def __init__(self, procId=None, taskId=None, jobId=None, layerId=None, rssMb=None, pid=None, progress=thrift_spec[7][4], lastLog=thrift_spec[8][4], cpuPercent=None,):
    self.procId = procId
    self.taskId = taskId
    self.jobId = jobId
    self.layerId = layerId
    self.rssMb = rssMb
    self.pid = pid
    self.progress = progress
    self.lastLog = lastLog
    self.cpuPercent = cpuPercent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.procId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.taskId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.layerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.rssMb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.progress = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.lastLog = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.cpuPercent = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RunningTask')
    if self.procId is not None:
      oprot.writeFieldBegin('procId', TType.STRING, 1)
      oprot.writeString(self.procId)
      oprot.writeFieldEnd()
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.STRING, 2)
      oprot.writeString(self.taskId)
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 3)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    if self.layerId is not None:
      oprot.writeFieldBegin('layerId', TType.STRING, 4)
      oprot.writeString(self.layerId)
      oprot.writeFieldEnd()
    if self.rssMb is not None:
      oprot.writeFieldBegin('rssMb', TType.I32, 5)
      oprot.writeI32(self.rssMb)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 6)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    if self.progress is not None:
      oprot.writeFieldBegin('progress', TType.DOUBLE, 7)
      oprot.writeDouble(self.progress)
      oprot.writeFieldEnd()
    if self.lastLog is not None:
      oprot.writeFieldBegin('lastLog', TType.STRING, 8)
      oprot.writeString(self.lastLog)
      oprot.writeFieldEnd()
    if self.cpuPercent is not None:
      oprot.writeFieldBegin('cpuPercent', TType.I16, 9)
      oprot.writeI16(self.cpuPercent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RunTaskResult:
  """
  Attributes:
   - procId
   - taskId
   - jobId
   - maxRssMb
   - exitStatus
   - exitSignal
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'procId', None, None, ), # 1
    (2, TType.STRING, 'taskId', None, None, ), # 2
    (3, TType.STRING, 'jobId', None, None, ), # 3
    (4, TType.I32, 'maxRssMb', None, None, ), # 4
    (5, TType.I32, 'exitStatus', None, None, ), # 5
    (6, TType.BYTE, 'exitSignal', None, None, ), # 6
  )

  def __init__(self, procId=None, taskId=None, jobId=None, maxRssMb=None, exitStatus=None, exitSignal=None,):
    self.procId = procId
    self.taskId = taskId
    self.jobId = jobId
    self.maxRssMb = maxRssMb
    self.exitStatus = exitStatus
    self.exitSignal = exitSignal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.procId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.taskId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.maxRssMb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.exitStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BYTE:
          self.exitSignal = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RunTaskResult')
    if self.procId is not None:
      oprot.writeFieldBegin('procId', TType.STRING, 1)
      oprot.writeString(self.procId)
      oprot.writeFieldEnd()
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.STRING, 2)
      oprot.writeString(self.taskId)
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 3)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    if self.maxRssMb is not None:
      oprot.writeFieldBegin('maxRssMb', TType.I32, 4)
      oprot.writeI32(self.maxRssMb)
      oprot.writeFieldEnd()
    if self.exitStatus is not None:
      oprot.writeFieldBegin('exitStatus', TType.I32, 5)
      oprot.writeI32(self.exitStatus)
      oprot.writeFieldEnd()
    if self.exitSignal is not None:
      oprot.writeFieldBegin('exitSignal', TType.BYTE, 6)
      oprot.writeByte(self.exitSignal)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Hardware:
  """
  Attributes:
   - physicalCpus
   - logicalCpus
   - totalRamMb
   - freeRamMb
   - totalSwapMb
   - freeSwapMb
   - cpuModel
   - platform
   - load
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'physicalCpus', None, None, ), # 1
    (2, TType.I16, 'logicalCpus', None, None, ), # 2
    (3, TType.I32, 'totalRamMb', None, None, ), # 3
    (4, TType.I32, 'freeRamMb', None, None, ), # 4
    (5, TType.I32, 'totalSwapMb', None, None, ), # 5
    (6, TType.I32, 'freeSwapMb', None, None, ), # 6
    (7, TType.STRING, 'cpuModel', None, None, ), # 7
    (8, TType.STRING, 'platform', None, None, ), # 8
    (9, TType.LIST, 'load', (TType.DOUBLE,None), None, ), # 9
  )

  def __init__(self, physicalCpus=None, logicalCpus=None, totalRamMb=None, freeRamMb=None, totalSwapMb=None, freeSwapMb=None, cpuModel=None, platform=None, load=None,):
    self.physicalCpus = physicalCpus
    self.logicalCpus = logicalCpus
    self.totalRamMb = totalRamMb
    self.freeRamMb = freeRamMb
    self.totalSwapMb = totalSwapMb
    self.freeSwapMb = freeSwapMb
    self.cpuModel = cpuModel
    self.platform = platform
    self.load = load

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.physicalCpus = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.logicalCpus = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalRamMb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.freeRamMb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.totalSwapMb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.freeSwapMb = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.cpuModel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.platform = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.load = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readDouble();
            self.load.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Hardware')
    if self.physicalCpus is not None:
      oprot.writeFieldBegin('physicalCpus', TType.I16, 1)
      oprot.writeI16(self.physicalCpus)
      oprot.writeFieldEnd()
    if self.logicalCpus is not None:
      oprot.writeFieldBegin('logicalCpus', TType.I16, 2)
      oprot.writeI16(self.logicalCpus)
      oprot.writeFieldEnd()
    if self.totalRamMb is not None:
      oprot.writeFieldBegin('totalRamMb', TType.I32, 3)
      oprot.writeI32(self.totalRamMb)
      oprot.writeFieldEnd()
    if self.freeRamMb is not None:
      oprot.writeFieldBegin('freeRamMb', TType.I32, 4)
      oprot.writeI32(self.freeRamMb)
      oprot.writeFieldEnd()
    if self.totalSwapMb is not None:
      oprot.writeFieldBegin('totalSwapMb', TType.I32, 5)
      oprot.writeI32(self.totalSwapMb)
      oprot.writeFieldEnd()
    if self.freeSwapMb is not None:
      oprot.writeFieldBegin('freeSwapMb', TType.I32, 6)
      oprot.writeI32(self.freeSwapMb)
      oprot.writeFieldEnd()
    if self.cpuModel is not None:
      oprot.writeFieldBegin('cpuModel', TType.STRING, 7)
      oprot.writeString(self.cpuModel)
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.STRING, 8)
      oprot.writeString(self.platform)
      oprot.writeFieldEnd()
    if self.load is not None:
      oprot.writeFieldBegin('load', TType.LIST, 9)
      oprot.writeListBegin(TType.DOUBLE, len(self.load))
      for iter36 in self.load:
        oprot.writeDouble(iter36)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Ping:
  """
  Attributes:
   - hostname
   - ipAddr
   - isReboot
   - bootTime
   - hw
   - tasks
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hostname', None, None, ), # 1
    (2, TType.STRING, 'ipAddr', None, None, ), # 2
    (3, TType.BOOL, 'isReboot', None, None, ), # 3
    (4, TType.I64, 'bootTime', None, None, ), # 4
    (5, TType.STRUCT, 'hw', (Hardware, Hardware.thrift_spec), None, ), # 5
    (6, TType.LIST, 'tasks', (TType.STRUCT,(RunningTask, RunningTask.thrift_spec)), None, ), # 6
  )

  def __init__(self, hostname=None, ipAddr=None, isReboot=None, bootTime=None, hw=None, tasks=None,):
    self.hostname = hostname
    self.ipAddr = ipAddr
    self.isReboot = isReboot
    self.bootTime = bootTime
    self.hw = hw
    self.tasks = tasks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hostname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ipAddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.isReboot = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.bootTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.hw = Hardware()
          self.hw.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.tasks = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = RunningTask()
            _elem42.read(iprot)
            self.tasks.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Ping')
    if self.hostname is not None:
      oprot.writeFieldBegin('hostname', TType.STRING, 1)
      oprot.writeString(self.hostname)
      oprot.writeFieldEnd()
    if self.ipAddr is not None:
      oprot.writeFieldBegin('ipAddr', TType.STRING, 2)
      oprot.writeString(self.ipAddr)
      oprot.writeFieldEnd()
    if self.isReboot is not None:
      oprot.writeFieldBegin('isReboot', TType.BOOL, 3)
      oprot.writeBool(self.isReboot)
      oprot.writeFieldEnd()
    if self.bootTime is not None:
      oprot.writeFieldBegin('bootTime', TType.I64, 4)
      oprot.writeI64(self.bootTime)
      oprot.writeFieldEnd()
    if self.hw is not None:
      oprot.writeFieldBegin('hw', TType.STRUCT, 5)
      self.hw.write(oprot)
      oprot.writeFieldEnd()
    if self.tasks is not None:
      oprot.writeFieldBegin('tasks', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.tasks))
      for iter43 in self.tasks:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
