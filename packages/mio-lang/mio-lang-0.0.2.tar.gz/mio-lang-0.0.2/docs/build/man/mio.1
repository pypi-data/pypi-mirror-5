.\" Man page generated from reStructuredText.
.
.TH "MIO" "1" "October 19, 2013" "0.0.1" "mio"
.SH NAME
mio \- mio Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH ABOUT
.sp
mio is a minimalistic IO programming language written in the
\fI\%Python Programming Language\fP based on MIo (\fIa port from Ruby to Python\fP)
in the book \fI\%How To Create Your Own Freaking Awesome Programming Language\fP by
\fI\%Marc-Andre Cournoye\fP\&.
.SS Examples
.sp
Factorial:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Number set("!", method(
    (self < 2) ifTrue(return self)
    return (self * ((self \- 1) !))
))
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Hello World:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
World = Object clone
World hello = method("Hello World!" println)

World hello
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Features
.INDENT 0.0
.IP \(bu 2
Homoiconic
.IP \(bu 2
Message Passing
.IP \(bu 2
Higher Order Messages
.IP \(bu 2
Higher Order Functions
.IP \(bu 2
Full support for Traits
.IP \(bu 2
Object Orienated Language
.IP \(bu 2
Written in an easy to understand language
.IP \(bu 2
Supports Imperative, Functional, Object Oriented and Behavior Driven Development styles.
.UNINDENT
.SS Installation
.sp
The simplest and recommended way to install mio is with pip.
You may install the latest stable release from PyPI with pip:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> pip install mio
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you do not have pip, you may use easy_install:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> easy_install mio
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, you may download the source package from the
\fI\%PyPI Page\fP or the \fI\%Downloads page\fP on the \fI\%Project Website\fP;
extract it and install using:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> python setup.py install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also install the
\fI\%latest-development version\fP by using \fBpip\fP or \fBeasy_install\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> pip install mio==dev
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> easy_install mio==dev
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For further information see the \fI\%mio documentation\fP\&.
.SH DOCUMENTATION
.SS Grammar
.sp
The following EBNF Grammar defines the Syntax for mio:
.sp
.nf
\fBoperator  \fP ::=  "**" | "++" | "\-\-" | "+=" | "\-=" | "*=" | "/=" | "<<" | ">>" |
                "==" | "!=" | "<=" | ">=" | "+"  | "\-"  | "*"  | "/"  | "="  |
                "<"  | ">"  | "!"  | "%"  | "|"  | "^"  | "&"  | "is" | "or" |
                "and" |  "not" |
                "return"
\fBcomment   \fP ::=  r"^#.*$"
\fBwhitespace\fP ::=  r"[ \et]+"
\fBstring    \fP ::=  r\(aq"[^"]*"\(aq
\fBnumber    \fP ::=  r\(aq\-?([0\-9]+(\e.[0\-9]*)?)\(aq
\fBidentifier\fP ::=  r\(aq[A\-Za\-z_][A\-Za\-z0\-9_]*\(aq
\fBterminator\fP ::=  ";" | "\er" | "\en"
\fBexpression\fP ::=  (message | terminator)*
\fBmessage   \fP ::=  (symbol, [ arguments ]) | arguments
\fBopening   \fP ::=  "(" | "{" | "["
\fBclosing   \fP ::=  ")" | "}" | "]"
\fBarguments \fP ::=  opening , ( expression, ( "," , expression )* )* , closing
\fBsymbol    \fP ::=  identifier | number | operator | string

.fi
.SH INDICES AND TABLES
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
James Mills
.SH COPYRIGHT
2012, James Mills
.\" Generated by docutils manpage writer.
.
