# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TransFabric', [dirname(__file__)])
        except ImportError:
            import _TransFabric
            return _TransFabric
        if fp is not None:
            try:
                _mod = imp.load_module('_TransFabric', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TransFabric = swig_import_helper()
    del swig_import_helper
else:
    import _TransFabric
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TransFabric.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _TransFabric.SwigPyIterator_value(self)
    def incr(self, n=1): return _TransFabric.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _TransFabric.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _TransFabric.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _TransFabric.SwigPyIterator_equal(self, *args)
    def copy(self): return _TransFabric.SwigPyIterator_copy(self)
    def next(self): return _TransFabric.SwigPyIterator_next(self)
    def __next__(self): return _TransFabric.SwigPyIterator___next__(self)
    def previous(self): return _TransFabric.SwigPyIterator_previous(self)
    def advance(self, *args): return _TransFabric.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _TransFabric.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _TransFabric.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _TransFabric.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _TransFabric.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _TransFabric.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _TransFabric.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _TransFabric.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

NONE = _TransFabric.NONE
ERR = _TransFabric.ERR
WARN = _TransFabric.WARN
INFO = _TransFabric.INFO
DEBUG = _TransFabric.DEBUG
TFPARSER_VERSION = _TransFabric.TFPARSER_VERSION
class TfParser(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TfParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TfParser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TfParser self) -> TfParser
        __init__(TfParser self, TfParser orig) -> TfParser

        1
        """
        if self.__class__ == TfParser:
            _self = None
        else:
            _self = self
        this = _TransFabric.new_TfParser(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def initialize_parser(self, *args):
        """
        initialize_parser(TfParser self, std::string const vendor, std::string const model, double const firmware, std::string const serial)

        1
        """
        return _TransFabric.TfParser_initialize_parser(self, *args)

    __swig_destroy__ = _TransFabric.delete_TfParser
    __del__ = lambda self : None;
    def connect_direct(self, *args):
        """
        connect_direct(TfParser self, char const * jid, char const * _pass, char const * xmppsrv, char const * tfsrv)

        1
        """
        return _TransFabric.TfParser_connect_direct(self, *args)

    def log_output(self, *args):
        """
        log_output(TfParser self, char const msg)

        1
        """
        return _TransFabric.TfParser_log_output(self, *args)

    def write_configuration(self, *args):
        """
        write_configuration(TfParser self, std::string const configuration_data)

        1
        """
        return _TransFabric.TfParser_write_configuration(self, *args)

    def read_configuration(self):
        """
        read_configuration(TfParser self) -> std::string

        1
        """
        return _TransFabric.TfParser_read_configuration(self)

    def get_connected_server(self):
        """
        get_connected_server(TfParser self) -> std::string

        1
        """
        return _TransFabric.TfParser_get_connected_server(self)

    def runLoop(self):
        """
        runLoop(TfParser self)

        1
        """
        return _TransFabric.TfParser_runLoop(self)

    def stopLoop(self):
        """
        stopLoop(TfParser self)

        1
        """
        return _TransFabric.TfParser_stopLoop(self)

    def runOnce(self, *args):
        """
        runOnce(TfParser self, unsigned int timeout)

        1
        """
        return _TransFabric.TfParser_runOnce(self, *args)

    def connected(self):
        """
        connected(TfParser self)

        1
        """
        return _TransFabric.TfParser_connected(self)

    def state_change(self, *args):
        """
        state_change(TfParser self, std::string const current_state)

        1
        """
        return _TransFabric.TfParser_state_change(self, *args)

    def join_domain(self):
        """
        join_domain(TfParser self)

        1
        """
        return _TransFabric.TfParser_join_domain(self)

    def leave_domain(self):
        """
        leave_domain(TfParser self)

        1
        """
        return _TransFabric.TfParser_leave_domain(self)

    def notify(self, *args):
        """
        notify(TfParser self, std::string const method_name, int const index, map_parameters parameters) -> std::string

        1
        """
        return _TransFabric.TfParser_notify(self, *args)

    def handle_property_get_request(self, *args):
        """
        handle_property_get_request(TfParser self, std::string const source, std::string const property_name, int const index) -> std::string const

        1
        """
        return _TransFabric.TfParser_handle_property_get_request(self, *args)

    def handle_property_set_request(self, *args):
        """
        handle_property_set_request(TfParser self, std::string const source, std::string const property_name, int const index, std::string const new_value) -> std::string const

        1
        """
        return _TransFabric.TfParser_handle_property_set_request(self, *args)

    def handle_execute_request(self, *args):
        """
        handle_execute_request(TfParser self, std::string const source, std::string const method_name, int const index, map_parameters parameters) -> std::string const

        1
        """
        return _TransFabric.TfParser_handle_execute_request(self, *args)

    def handle_subscribe_request(self, *args):
        """
        handle_subscribe_request(TfParser self, std::string const event_name, int const index, bool const subscribe_to_event) -> std::string const

        1
        """
        return _TransFabric.TfParser_handle_subscribe_request(self, *args)

    def handle_notification(self, *args):
        """
        handle_notification(TfParser self, std::string const source, std::string const event_name, int const index, map_parameters parameters)

        1
        """
        return _TransFabric.TfParser_handle_notification(self, *args)

    def set_log_level(self, *args):
        """
        set_log_level(TfParser self, LOGLEVEL logLevel)

        1
        """
        return _TransFabric.TfParser_set_log_level(self, *args)

    def get_version(self):
        """
        get_version(TfParser self) -> std::string

        1
        """
        return _TransFabric.TfParser_get_version(self)

    def get_address(self):
        """
        get_address(TfParser self) -> std::string

        1
        """
        return _TransFabric.TfParser_get_address(self)

    def get_vendor(self):
        """
        get_vendor(TfParser self) -> std::string

        1
        """
        return _TransFabric.TfParser_get_vendor(self)

    def get_model(self):
        """
        get_model(TfParser self) -> std::string

        1
        """
        return _TransFabric.TfParser_get_model(self)

    def get_firmware(self):
        """
        get_firmware(TfParser self) -> double

        1
        """
        return _TransFabric.TfParser_get_firmware(self)

    def get_serial(self):
        """
        get_serial(TfParser self) -> std::string

        1
        """
        return _TransFabric.TfParser_get_serial(self)

    def get_property(self, *args):
        """
        get_property(TfParser self, std::string const target, std::string const property_name, int const index) -> std::string
        get_property(TfParser self, std::string const target, std::string const property_name, int const index, ResultCallback const & callback) -> std::string
        get_property(TfParser self, std::string const target, std::string const property_name, int const index, PyObject * callback) -> std::string

        1
        """
        return _TransFabric.TfParser_get_property(self, *args)

    def set_property(self, *args):
        """
        set_property(TfParser self, std::string const target, std::string const property_name, int const index, std::string const new_value) -> std::string
        set_property(TfParser self, std::string const target, std::string const property_name, int const index, std::string const new_value, 
            ResultCallback const & callback) -> std::string
        set_property(TfParser self, std::string const target, std::string const property_name, int const index, std::string const new_value, 
            PyObject * callback) -> std::string

        1
        """
        return _TransFabric.TfParser_set_property(self, *args)

    def execute(self, *args):
        """
        execute(TfParser self, std::string const target, std::string const method_name, int const index, map_parameters parameters) -> std::string
        execute(TfParser self, std::string const target, std::string const method_name, int const index, map_parameters parameters, 
            ResultCallback const & callback) -> std::string
        execute(TfParser self, std::string const target, std::string const method_name, int const index, map_parameters parameters, 
            PyObject * callback) -> std::string

        1
        """
        return _TransFabric.TfParser_execute(self, *args)

    def subscribe(self, *args):
        """
        subscribe(TfParser self, std::string const target, std::string const event_name, int const index, bool const subscribe_to) -> std::string
        subscribe(TfParser self, std::string const target, std::string const event_name, int const index, bool const subscribe_to, 
            ResultCallback const & callback) -> std::string
        subscribe(TfParser self, std::string const target, std::string const event_name, int const index, bool const subscribe_to, 
            PyObject * callback) -> std::string

        1
        """
        return _TransFabric.TfParser_subscribe(self, *args)

    def add_property_get_handler(self, *args):
        """
        add_property_get_handler(TfParser self, std::string const property_name, PropertyGetCallback const & callback)
        add_property_get_handler(TfParser self, std::string const property_name, PyObject * callback)

        1
        """
        return _TransFabric.TfParser_add_property_get_handler(self, *args)

    def add_property_set_handler(self, *args):
        """
        add_property_set_handler(TfParser self, std::string const property_name, PropertySetCallback const & callback)
        add_property_set_handler(TfParser self, std::string const property_name, PyObject * callback)

        1
        """
        return _TransFabric.TfParser_add_property_set_handler(self, *args)

    def add_execute_handler(self, *args):
        """
        add_execute_handler(TfParser self, std::string const method_name, ExecuteCallback const & callback)
        add_execute_handler(TfParser self, std::string const method_name, PyObject * callback)

        1
        """
        return _TransFabric.TfParser_add_execute_handler(self, *args)

    def add_subscribe_handler(self, *args):
        """
        add_subscribe_handler(TfParser self, std::string const event_name, SubscribeCallback const & callback)
        add_subscribe_handler(TfParser self, std::string const event_name, PyObject * callback)

        1
        """
        return _TransFabric.TfParser_add_subscribe_handler(self, *args)

    def add_notify_handler(self, *args):
        """
        add_notify_handler(TfParser self, std::string const event_name, NotifyCallback const & callback)
        add_notify_handler(TfParser self, std::string const event_name, PyObject * callback)

        1
        """
        return _TransFabric.TfParser_add_notify_handler(self, *args)

    def __disown__(self):
        self.this.disown()
        _TransFabric.disown_TfParser(self)
        return weakref_proxy(self)
TfParser_swigregister = _TransFabric.TfParser_swigregister
TfParser_swigregister(TfParser)

class TfException(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TfException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TfException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TfException self) -> TfException
        __init__(TfException self, std::string msg) -> TfException

        1
        """
        this = _TransFabric.new_TfException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TransFabric.delete_TfException
    __del__ = lambda self : None;
    __swig_setmethods__["type"] = _TransFabric.TfException_type_set
    __swig_getmethods__["type"] = _TransFabric.TfException_type_get
    if _newclass:type = _swig_property(_TransFabric.TfException_type_get, _TransFabric.TfException_type_set)
    __swig_setmethods__["subtype"] = _TransFabric.TfException_subtype_set
    __swig_getmethods__["subtype"] = _TransFabric.TfException_subtype_get
    if _newclass:subtype = _swig_property(_TransFabric.TfException_subtype_get, _TransFabric.TfException_subtype_set)
    __swig_setmethods__["description"] = _TransFabric.TfException_description_set
    __swig_getmethods__["description"] = _TransFabric.TfException_description_get
    if _newclass:description = _swig_property(_TransFabric.TfException_description_get, _TransFabric.TfException_description_set)
TfException_swigregister = _TransFabric.TfException_swigregister
TfException_swigregister(TfException)

class TfNotImplementedException(TfException):
    """1"""
    __swig_setmethods__ = {}
    for _s in [TfException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TfNotImplementedException, name, value)
    __swig_getmethods__ = {}
    for _s in [TfException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TfNotImplementedException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TfNotImplementedException self) -> TfNotImplementedException
        __init__(TfNotImplementedException self, std::string msg) -> TfNotImplementedException

        1
        """
        this = _TransFabric.new_TfNotImplementedException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TransFabric.delete_TfNotImplementedException
    __del__ = lambda self : None;
TfNotImplementedException_swigregister = _TransFabric.TfNotImplementedException_swigregister
TfNotImplementedException_swigregister(TfNotImplementedException)

class TfNotConnectedException(TfException):
    """1"""
    __swig_setmethods__ = {}
    for _s in [TfException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TfNotConnectedException, name, value)
    __swig_getmethods__ = {}
    for _s in [TfException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TfNotConnectedException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TfNotConnectedException self) -> TfNotConnectedException
        __init__(TfNotConnectedException self, std::string msg) -> TfNotConnectedException

        1
        """
        this = _TransFabric.new_TfNotConnectedException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TransFabric.delete_TfNotConnectedException
    __del__ = lambda self : None;
TfNotConnectedException_swigregister = _TransFabric.TfNotConnectedException_swigregister
TfNotConnectedException_swigregister(TfNotConnectedException)

# This file is compatible with both classic and new-style classes.


