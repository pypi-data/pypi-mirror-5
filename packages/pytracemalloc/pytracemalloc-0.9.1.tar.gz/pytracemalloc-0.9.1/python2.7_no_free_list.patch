diff -r 66e30c4870bb Include/objimpl.h
--- a/Include/objimpl.h	Thu Mar 21 15:02:16 2013 -0700
+++ b/Include/objimpl.h	Sat Mar 23 13:49:18 2013 +0100
@@ -99,9 +99,7 @@ PyAPI_FUNC(void *) PyObject_Realloc(void
 PyAPI_FUNC(void) PyObject_Free(void *);
 
 
-/* Macros */
-#ifdef WITH_PYMALLOC
-#ifdef PYMALLOC_DEBUG   /* WITH_PYMALLOC && PYMALLOC_DEBUG */
+#if defined(WITH_PYMALLOC) && defined(PYMALLOC_DEBUG)
 PyAPI_FUNC(void *) _PyObject_DebugMalloc(size_t nbytes);
 PyAPI_FUNC(void *) _PyObject_DebugRealloc(void *p, size_t nbytes);
 PyAPI_FUNC(void) _PyObject_DebugFree(void *p);
@@ -115,28 +113,14 @@ PyAPI_FUNC(void) _PyObject_DebugCheckAdd
 PyAPI_FUNC(void *) _PyMem_DebugMalloc(size_t nbytes);
 PyAPI_FUNC(void *) _PyMem_DebugRealloc(void *p, size_t nbytes);
 PyAPI_FUNC(void) _PyMem_DebugFree(void *p);
-#define PyObject_MALLOC         _PyObject_DebugMalloc
-#define PyObject_Malloc         _PyObject_DebugMalloc
-#define PyObject_REALLOC        _PyObject_DebugRealloc
-#define PyObject_Realloc        _PyObject_DebugRealloc
-#define PyObject_FREE           _PyObject_DebugFree
-#define PyObject_Free           _PyObject_DebugFree
+#endif
 
-#else   /* WITH_PYMALLOC && ! PYMALLOC_DEBUG */
+/* Macros */
 #define PyObject_MALLOC         PyObject_Malloc
 #define PyObject_REALLOC        PyObject_Realloc
 #define PyObject_FREE           PyObject_Free
-#endif
-
-#else   /* ! WITH_PYMALLOC */
-#define PyObject_MALLOC         PyMem_MALLOC
-#define PyObject_REALLOC        PyMem_REALLOC
-#define PyObject_FREE           PyMem_FREE
-
-#endif  /* WITH_PYMALLOC */
-
 #define PyObject_Del            PyObject_Free
-#define PyObject_DEL            PyObject_FREE
+#define PyObject_DEL            PyObject_Free
 
 /* for source compatibility with 2.2 */
 #define _PyObject_Del           PyObject_Free
diff -r 66e30c4870bb Include/pymem.h
--- a/Include/pymem.h	Thu Mar 21 15:02:16 2013 -0700
+++ b/Include/pymem.h	Sat Mar 23 13:49:18 2013 +0100
@@ -49,6 +49,24 @@ extern "C" {
    performed on failure (no exception is set, no warning is printed, etc).
 */
 
+#define PY_ALLOC_SYSTEM_API 's'   /* the system API (malloc, realloc, free) */
+#define PY_ALLOC_MEM_API 'm'      /* the PyMem_Malloc() API */
+#define PY_ALLOC_OBJECT_API 'o'   /* The PyObject_Malloc() API */
+
+PyAPI_FUNC(int) Py_GetAllocators(
+    char api,
+    void* (**malloc_p) (size_t),
+    void* (**realloc_p) (void*, size_t),
+    void (**free_p) (void*)
+    );
+
+PyAPI_FUNC(int) Py_SetAllocators(
+    char api,
+    void* (*malloc) (size_t),
+    void* (*realloc) (void*, size_t),
+    void (*free) (void*)
+    );
+
 PyAPI_FUNC(void *) PyMem_Malloc(size_t);
 PyAPI_FUNC(void *) PyMem_Realloc(void *, size_t);
 PyAPI_FUNC(void) PyMem_Free(void *);
@@ -57,13 +75,6 @@ PyAPI_FUNC(void) PyMem_Free(void *);
    no longer supported. They used to call PyErr_NoMemory() on failure. */
 
 /* Macros. */
-#ifdef PYMALLOC_DEBUG
-/* Redirect all memory operations to Python's debugging allocator. */
-#define PyMem_MALLOC		_PyMem_DebugMalloc
-#define PyMem_REALLOC		_PyMem_DebugRealloc
-#define PyMem_FREE		_PyMem_DebugFree
-
-#else	/* ! PYMALLOC_DEBUG */
 
 /* PyMem_MALLOC(0) means malloc(1). Some systems would return NULL
    for malloc(0), which would be treated as an error. Some platforms
@@ -71,13 +82,9 @@ PyAPI_FUNC(void) PyMem_Free(void *);
    pymalloc. To solve these problems, allocate an extra byte. */
 /* Returns NULL to indicate error if a negative size or size larger than
    Py_ssize_t can represent is supplied.  Helps prevents security holes. */
-#define PyMem_MALLOC(n)		((size_t)(n) > (size_t)PY_SSIZE_T_MAX ? NULL \
-				: malloc((n) ? (n) : 1))
-#define PyMem_REALLOC(p, n)	((size_t)(n) > (size_t)PY_SSIZE_T_MAX  ? NULL \
-				: realloc((p), (n) ? (n) : 1))
-#define PyMem_FREE		free
-
-#endif	/* PYMALLOC_DEBUG */
+#define PyMem_MALLOC(n)		PyMem_Malloc(n)
+#define PyMem_REALLOC(p, n)	PyMem_Realloc(p, n)
+#define PyMem_FREE(p)		PyMem_Free(p)
 
 /*
  * Type-oriented memory interface
diff -r 66e30c4870bb Include/sysmodule.h
--- a/Include/sysmodule.h	Thu Mar 21 15:02:16 2013 -0700
+++ b/Include/sysmodule.h	Sat Mar 23 13:49:18 2013 +0100
@@ -23,6 +23,8 @@ PyAPI_FUNC(void) PySys_ResetWarnOptions(
 PyAPI_FUNC(void) PySys_AddWarnOption(char *);
 PyAPI_FUNC(int) PySys_HasWarnOptions(void);
 
+PyAPI_DATA(int) _PySys_UseFreeList;
+
 #ifdef __cplusplus
 }
 #endif
diff -r 66e30c4870bb Lib/test/regrtest.py
--- a/Lib/test/regrtest.py	Thu Mar 21 15:02:16 2013 -0700
+++ b/Lib/test/regrtest.py	Sat Mar 23 13:49:18 2013 +0100
@@ -1,4 +1,13 @@
 #! /usr/bin/env python
+import tracemalloc
+tracemalloc.enable()
+if 1:
+    display_top = tracemalloc.DisplayTop(5)
+    display_top.start(2)
+else:
+    take_snapshot = tracemalloc.TakeSnapshot()
+    take_snapshot.filename_template = "/tmp/tracemalloc-$pid-$counter.pickle"
+    take_snapshot.start(2)
 
 """
 Usage:
diff -r 66e30c4870bb Objects/classobject.c
--- a/Objects/classobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/classobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -2253,7 +2253,10 @@ PyObject *
 PyMethod_New(PyObject *func, PyObject *self, PyObject *klass)
 {
     register PyMethodObject *im;
-    im = free_list;
+    if (_PySys_UseFreeList)
+        im = free_list;
+    else
+        im = NULL;
     if (im != NULL) {
         free_list = (PyMethodObject *)(im->im_self);
         PyObject_INIT(im, &PyMethod_Type);
@@ -2387,7 +2390,7 @@ instancemethod_dealloc(register PyMethod
     Py_DECREF(im->im_func);
     Py_XDECREF(im->im_self);
     Py_XDECREF(im->im_class);
-    if (numfree < PyMethod_MAXFREELIST) {
+    if (_PySys_UseFreeList && numfree < PyMethod_MAXFREELIST) {
         im->im_self = (PyObject *)free_list;
         free_list = im;
         numfree++;
diff -r 66e30c4870bb Objects/dictobject.c
--- a/Objects/dictobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/dictobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -255,7 +255,7 @@ PyDict_New(void)
         Py_AtExit(show_track);
 #endif
     }
-    if (numfree) {
+    if (_PySys_UseFreeList && numfree) {
         mp = free_list[--numfree];
         assert (mp != NULL);
         assert (Py_TYPE(mp) == &PyDict_Type);
@@ -1012,7 +1012,7 @@ dict_dealloc(register PyDictObject *mp)
     }
     if (mp->ma_table != mp->ma_smalltable)
         PyMem_DEL(mp->ma_table);
-    if (numfree < PyDict_MAXFREELIST && Py_TYPE(mp) == &PyDict_Type)
+    if (_PySys_UseFreeList && numfree < PyDict_MAXFREELIST && Py_TYPE(mp) == &PyDict_Type)
         free_list[numfree++] = mp;
     else
         Py_TYPE(mp)->tp_free((PyObject *)mp);
diff -r 66e30c4870bb Objects/floatobject.c
--- a/Objects/floatobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/floatobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -142,14 +142,21 @@ PyObject *
 PyFloat_FromDouble(double fval)
 {
     register PyFloatObject *op;
-    if (free_list == NULL) {
-        if ((free_list = fill_free_list()) == NULL)
+    if (_PySys_UseFreeList) {
+        if (free_list == NULL) {
+            if ((free_list = fill_free_list()) == NULL)
+                return NULL;
+        }
+        /* Inline PyObject_New */
+        op = free_list;
+        free_list = (PyFloatObject *)Py_TYPE(op);
+        PyObject_INIT(op, &PyFloat_Type);
+    }
+    else {
+        op = (PyFloatObject *)PyObject_New(PyFloatObject, &PyFloat_Type);
+        if (op == NULL)
             return NULL;
     }
-    /* Inline PyObject_New */
-    op = free_list;
-    free_list = (PyFloatObject *)Py_TYPE(op);
-    PyObject_INIT(op, &PyFloat_Type);
     op->ob_fval = fval;
     return (PyObject *) op;
 }
@@ -239,7 +246,7 @@ PyFloat_FromString(PyObject *v, char **p
 static void
 float_dealloc(PyFloatObject *op)
 {
-    if (PyFloat_CheckExact(op)) {
+    if (_PySys_UseFreeList && PyFloat_CheckExact(op)) {
         Py_TYPE(op) = (struct _typeobject *)free_list;
         free_list = op;
     }
diff -r 66e30c4870bb Objects/frameobject.c
--- a/Objects/frameobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/frameobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -477,7 +477,7 @@ frame_dealloc(PyFrameObject *f)
     co = f->f_code;
     if (co->co_zombieframe == NULL)
         co->co_zombieframe = f;
-    else if (numfree < PyFrame_MAXFREELIST) {
+    else if (_PySys_UseFreeList && _PySys_UseFreeList && numfree < PyFrame_MAXFREELIST) {
         ++numfree;
         f->f_back = free_list;
         free_list = f;
@@ -678,7 +678,11 @@ PyFrame_New(PyThreadState *tstate, PyCod
         nfrees = PyTuple_GET_SIZE(code->co_freevars);
         extras = code->co_stacksize + code->co_nlocals + ncells +
             nfrees;
-        if (free_list == NULL) {
+        if (_PySys_UseFreeList)
+            f = free_list;
+        else
+            f = NULL;
+        if (f == NULL) {
             f = PyObject_GC_NewVar(PyFrameObject, &PyFrame_Type,
             extras);
             if (f == NULL) {
diff -r 66e30c4870bb Objects/intobject.c
--- a/Objects/intobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/intobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -100,14 +100,21 @@ PyInt_FromLong(long ival)
         return (PyObject *) v;
     }
 #endif
-    if (free_list == NULL) {
-        if ((free_list = fill_free_list()) == NULL)
+    if (_PySys_UseFreeList) {
+        if (free_list == NULL) {
+            if ((free_list = fill_free_list()) == NULL)
+                return NULL;
+        }
+        /* Inline PyObject_New */
+        v = free_list;
+        free_list = (PyIntObject *)Py_TYPE(v);
+        PyObject_INIT(v, &PyInt_Type);
+    }
+    else {
+        v = (PyIntObject *)PyObject_New(PyIntObject, &PyInt_Type);
+        if (v == NULL)
             return NULL;
     }
-    /* Inline PyObject_New */
-    v = free_list;
-    free_list = (PyIntObject *)Py_TYPE(v);
-    PyObject_INIT(v, &PyInt_Type);
     v->ob_ival = ival;
     return (PyObject *) v;
 }
@@ -131,7 +138,7 @@ PyInt_FromSsize_t(Py_ssize_t ival)
 static void
 int_dealloc(PyIntObject *v)
 {
-    if (PyInt_CheckExact(v)) {
+    if (_PySys_UseFreeList && PyInt_CheckExact(v)) {
         Py_TYPE(v) = (struct _typeobject *)free_list;
         free_list = v;
     }
@@ -142,8 +149,13 @@ int_dealloc(PyIntObject *v)
 static void
 int_free(PyIntObject *v)
 {
-    Py_TYPE(v) = (struct _typeobject *)free_list;
-    free_list = v;
+    if (_PySys_UseFreeList) {
+        Py_TYPE(v) = (struct _typeobject *)free_list;
+        free_list = v;
+    }
+    else {
+        PyObject_Del(v);
+    }
 }
 
 long
@@ -1461,12 +1473,19 @@ int
     int ival;
 #if NSMALLNEGINTS + NSMALLPOSINTS > 0
     for (ival = -NSMALLNEGINTS; ival < NSMALLPOSINTS; ival++) {
-          if (!free_list && (free_list = fill_free_list()) == NULL)
-                    return 0;
-        /* PyObject_New is inlined */
-        v = free_list;
-        free_list = (PyIntObject *)Py_TYPE(v);
-        PyObject_INIT(v, &PyInt_Type);
+        if (_PySys_UseFreeList) {
+            if (!free_list && (free_list = fill_free_list()) == NULL)
+                return 0;
+            /* PyObject_New is inlined */
+            v = free_list;
+            free_list = (PyIntObject *)Py_TYPE(v);
+            PyObject_INIT(v, &PyInt_Type);
+        }
+        else {
+            v = (PyIntObject *)PyObject_New(PyIntObject, &PyInt_Type);
+            if (v == NULL)
+                return 0;
+        }
         v->ob_ival = ival;
         small_ints[ival + NSMALLNEGINTS] = v;
     }
diff -r 66e30c4870bb Objects/listobject.c
--- a/Objects/listobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/listobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -131,7 +131,7 @@ PyList_New(Py_ssize_t size)
     if ((size_t)size > PY_SIZE_MAX / sizeof(PyObject *))
         return PyErr_NoMemory();
     nbytes = size * sizeof(PyObject *);
-    if (numfree) {
+    if (_PySys_UseFreeList && numfree) {
         numfree--;
         op = free_list[numfree];
         _Py_NewReference((PyObject *)op);
@@ -310,7 +310,7 @@ list_dealloc(PyListObject *op)
         }
         PyMem_FREE(op->ob_item);
     }
-    if (numfree < PyList_MAXFREELIST && PyList_CheckExact(op))
+    if (_PySys_UseFreeList && numfree < PyList_MAXFREELIST && PyList_CheckExact(op))
         free_list[numfree++] = op;
     else
         Py_TYPE(op)->tp_free((PyObject *)op);
diff -r 66e30c4870bb Objects/methodobject.c
--- a/Objects/methodobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/methodobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -17,7 +17,10 @@ PyObject *
 PyCFunction_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module)
 {
     PyCFunctionObject *op;
-    op = free_list;
+    if (_PySys_UseFreeList)
+        op = free_list;
+    else
+        op = NULL;
     if (op != NULL) {
         free_list = (PyCFunctionObject *)(op->m_self);
         PyObject_INIT(op, &PyCFunction_Type);
@@ -133,7 +136,7 @@ meth_dealloc(PyCFunctionObject *m)
     _PyObject_GC_UNTRACK(m);
     Py_XDECREF(m->m_self);
     Py_XDECREF(m->m_module);
-    if (numfree < PyCFunction_MAXFREELIST) {
+    if (_PySys_UseFreeList && numfree < PyCFunction_MAXFREELIST) {
         m->m_self = (PyObject *)free_list;
         free_list = m;
         numfree++;
diff -r 66e30c4870bb Objects/object.c
--- a/Objects/object.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/object.c	Sat Mar 23 13:49:18 2013 +0100
@@ -2335,27 +2335,6 @@ PyTypeObject *_Py_cobject_hack = &PyCObj
 Py_ssize_t (*_Py_abstract_hack)(PyObject *) = PyObject_Size;
 
 
-/* Python's malloc wrappers (see pymem.h) */
-
-void *
-PyMem_Malloc(size_t nbytes)
-{
-    return PyMem_MALLOC(nbytes);
-}
-
-void *
-PyMem_Realloc(void *p, size_t nbytes)
-{
-    return PyMem_REALLOC(p, nbytes);
-}
-
-void
-PyMem_Free(void *p)
-{
-    PyMem_FREE(p);
-}
-
-
 /* These methods are used to control infinite recursion in repr, str, print,
    etc.  Container objects that may recursively contain themselves,
    e.g. builtin dictionaries and lists, should used Py_ReprEnter() and
diff -r 66e30c4870bb Objects/obmalloc.c
--- a/Objects/obmalloc.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/obmalloc.c	Sat Mar 23 13:49:18 2013 +0100
@@ -1,5 +1,186 @@
 #include "Python.h"
 
+/* Python's malloc wrappers (see pymem.h) */
+
+static struct {
+    int init;
+    int use_pymalloc;
+
+    void* (*system_malloc) (size_t);
+    void* (*system_realloc) (void*, size_t);
+    void (*system_free) (void*);
+
+    void* (*mem_malloc) (size_t);
+    void* (*mem_realloc) (void*, size_t);
+    void (*mem_free) (void*);
+
+    void* (*object_malloc) (size_t);
+    void* (*object_realloc) (void*, size_t);
+    void (*object_free) (void*);
+} _PyMem_Allocators = {0, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
+
+/* Forward declarations */
+static void* _PyObject_Malloc(size_t nbytes);
+static void _PyObject_Free(void *p);
+static void* _PyObject_Realloc(void *p, size_t nbytes);
+
+#ifndef PYMALLOC_DEBUG
+static void *
+_PyMem_Malloc(size_t nbytes)
+{
+    return _PyMem_Allocators.system_malloc(nbytes);
+}
+
+static void *
+_PyMem_Realloc(void *p, size_t nbytes)
+{
+    return _PyMem_Allocators.system_realloc(p, nbytes);
+}
+
+static void
+_PyMem_Free(void *p)
+{
+    _PyMem_Allocators.system_free(p);
+}
+#endif
+
+static void
+_PyMem_InitSystemAllocators(void)
+{
+    _PyMem_Allocators.init = 1;
+    _PyMem_Allocators.use_pymalloc = 1;
+
+    _PyMem_Allocators.system_malloc = malloc;
+    _PyMem_Allocators.system_realloc = realloc;
+    _PyMem_Allocators.system_free = free;
+
+#ifdef PYMALLOC_DEBUG
+    _PyMem_Allocators.mem_malloc = _PyMem_DebugMalloc;
+    _PyMem_Allocators.mem_realloc = _PyMem_DebugRealloc;
+    _PyMem_Allocators.mem_free = _PyMem_DebugFree;
+#else
+    _PyMem_Allocators.mem_malloc = _PyMem_Malloc;
+    _PyMem_Allocators.mem_realloc = _PyMem_Realloc;
+    _PyMem_Allocators.mem_free = _PyMem_Free;
+#endif
+
+#ifndef WITH_PYMALLOC
+    _PyMem_Allocators.object_malloc = PyMem_Malloc;
+    _PyMem_Allocators.object_free = PyMem_Free;
+    _PyMem_Allocators.object_realloc = PyMem_Realloc;
+#elif defined(PYMALLOC_DEBUG)   /* WITH_PYMALLOC && PYMALLOC_DEBUG */
+    _PyMem_Allocators.object_malloc = _PyObject_DebugMalloc;
+    _PyMem_Allocators.object_free = _PyObject_DebugFree;
+    _PyMem_Allocators.object_realloc = _PyObject_DebugRealloc;
+#else
+    _PyMem_Allocators.object_malloc = _PyObject_Malloc;
+    _PyMem_Allocators.object_free = _PyObject_Free;
+    _PyMem_Allocators.object_realloc = _PyObject_Realloc;
+#endif
+}
+
+#define _PyMem_InitAllocators()                    \
+    do {                                           \
+        if (!_PyMem_Allocators.init)               \
+            _PyMem_InitSystemAllocators();         \
+    } while (0)
+
+int Py_GetAllocators(
+    char api,
+    void* (**malloc_p) (size_t),
+    void* (**realloc_p) (void*, size_t),
+    void (**free_p) (void*)
+    )
+{
+    _PyMem_InitAllocators();
+
+    if (api == PY_ALLOC_SYSTEM_API) {
+        *malloc_p = _PyMem_Allocators.system_malloc;
+        *realloc_p = _PyMem_Allocators.system_realloc;
+        *free_p = _PyMem_Allocators.system_free;
+    }
+    else if (api == PY_ALLOC_MEM_API) {
+        *malloc_p = _PyMem_Allocators.mem_malloc;
+        *realloc_p = _PyMem_Allocators.mem_realloc;
+        *free_p = _PyMem_Allocators.mem_free;
+    }
+    else if (api == PY_ALLOC_OBJECT_API) {
+        *malloc_p = _PyMem_Allocators.object_malloc;
+        *realloc_p = _PyMem_Allocators.object_realloc;
+        *free_p = _PyMem_Allocators.object_free;
+    }
+    else {
+        *malloc_p = NULL;
+        *realloc_p = NULL;
+        *free_p = NULL;
+        return -1;
+    }
+    return 0;
+}
+
+int Py_SetAllocators(
+    char api,
+    void* (*user_malloc) (size_t),
+    void* (*user_realloc) (void*, size_t),
+    void (*user_free) (void*)
+    )
+{
+    _PyMem_InitAllocators();
+
+    if (api == PY_ALLOC_SYSTEM_API) {
+        _PyMem_Allocators.system_malloc = user_malloc;
+        _PyMem_Allocators.system_realloc = user_realloc;
+        _PyMem_Allocators.system_free = user_free;
+    }
+    else if (api == PY_ALLOC_MEM_API) {
+        _PyMem_Allocators.mem_malloc = user_malloc;
+        _PyMem_Allocators.mem_realloc = user_realloc;
+        _PyMem_Allocators.mem_free = user_free;
+    }
+    else if (api == PY_ALLOC_OBJECT_API) {
+        _PyMem_Allocators.object_malloc = user_malloc;
+        _PyMem_Allocators.object_realloc = user_realloc;
+        _PyMem_Allocators.object_free = user_free;
+    }
+    else {
+        return -1;
+    }
+    return 0;
+}
+
+void *
+PyMem_Malloc(size_t nbytes)
+{
+    _PyMem_InitAllocators();
+
+    if (nbytes > (size_t)PY_SSIZE_T_MAX)
+        return NULL;
+    if (nbytes == 0)
+        nbytes = 1;
+
+    return _PyMem_Allocators.mem_malloc(nbytes);
+}
+
+void *
+PyMem_Realloc(void *p, size_t nbytes)
+{
+    _PyMem_InitAllocators();
+
+    if (nbytes > (size_t)PY_SSIZE_T_MAX)
+        return NULL;
+    if (nbytes == 0)
+        nbytes = 1;
+
+    return _PyMem_Allocators.mem_realloc(p, nbytes);
+}
+
+void
+PyMem_Free(void *p)
+{
+    _PyMem_InitAllocators();
+    _PyMem_Allocators.mem_free(p);
+}
+
 #ifdef WITH_PYMALLOC
 
 #ifdef WITH_VALGRIND
@@ -546,7 +727,7 @@ new_arena(void)
             return NULL;                /* overflow */
 #endif
         nbytes = numarenas * sizeof(*arenas);
-        arenaobj = (struct arena_object *)realloc(arenas, nbytes);
+        arenaobj = (struct arena_object *)_PyMem_Allocators.system_realloc(arenas, nbytes);
         if (arenaobj == NULL)
             return NULL;
         arenas = arenaobj;
@@ -742,15 +923,17 @@ int Py_ADDRESS_IN_RANGE(void *P, poolp p
  * Unless the optimizer reorders everything, being too smart...
  */
 
-#undef PyObject_Malloc
-void *
-PyObject_Malloc(size_t nbytes)
+static void *
+_PyObject_Malloc(size_t nbytes)
 {
     block *bp;
     poolp pool;
     poolp next;
     uint size;
 
+    if (!_PyMem_Allocators.use_pymalloc)
+        return _PyMem_Allocators.system_malloc(nbytes);
+
 #ifdef WITH_VALGRIND
     if (UNLIKELY(running_on_valgrind == -1))
         running_on_valgrind = RUNNING_ON_VALGRIND;
@@ -940,14 +1123,20 @@ redirect:
      */
     if (nbytes == 0)
         nbytes = 1;
-    return (void *)malloc(nbytes);
+    return (void *)_PyMem_Allocators.system_malloc(nbytes);
+}
+
+void *
+PyObject_Malloc(size_t nbytes)
+{
+    _PyMem_InitAllocators();
+    return _PyMem_Allocators.object_malloc(nbytes);
 }
 
 /* free */
 
-#undef PyObject_Free
-void
-PyObject_Free(void *p)
+static void
+_PyObject_Free(void *p)
 {
     poolp pool;
     block *lastfree;
@@ -1163,7 +1352,14 @@ PyObject_Free(void *p)
 redirect:
 #endif
     /* We didn't allocate this address. */
-    free(p);
+    _PyMem_Allocators.system_free(p);
+}
+
+void
+PyObject_Free(void *p)
+{
+    _PyMem_InitAllocators();
+    _PyMem_Allocators.object_free(p);
 }
 
 /* realloc.  If p is NULL, this acts like malloc(nbytes).  Else if nbytes==0,
@@ -1171,9 +1367,8 @@ redirect:
  * return a non-NULL result.
  */
 
-#undef PyObject_Realloc
 void *
-PyObject_Realloc(void *p, size_t nbytes)
+_PyObject_Realloc(void *p, size_t nbytes)
 {
     void *bp;
     poolp pool;
@@ -1183,7 +1378,7 @@ PyObject_Realloc(void *p, size_t nbytes)
 #endif
 
     if (p == NULL)
-        return PyObject_Malloc(nbytes);
+        return _PyObject_Malloc(nbytes);
 
     /*
      * Limit ourselves to PY_SSIZE_T_MAX bytes to prevent security holes.
@@ -1220,10 +1415,10 @@ PyObject_Realloc(void *p, size_t nbytes)
             }
             size = nbytes;
         }
-        bp = PyObject_Malloc(nbytes);
+        bp = _PyObject_Malloc(nbytes);
         if (bp != NULL) {
             memcpy(bp, p, size);
-            PyObject_Free(p);
+            _PyObject_Free(p);
         }
         return bp;
     }
@@ -1241,17 +1436,24 @@ PyObject_Realloc(void *p, size_t nbytes)
      * at p.  Instead we punt:  let C continue to manage this block.
      */
     if (nbytes)
-        return realloc(p, nbytes);
+        return _PyMem_Allocators.system_realloc(p, nbytes);
     /* C doesn't define the result of realloc(p, 0) (it may or may not
      * return NULL then), but Python's docs promise that nbytes==0 never
      * returns NULL.  We don't pass 0 to realloc(), to avoid that endcase
      * to begin with.  Even then, we can't be sure that realloc() won't
      * return NULL.
      */
-    bp = realloc(p, 1);
+    bp = _PyMem_Allocators.system_realloc(p, 1);
     return bp ? bp : p;
 }
 
+void *
+PyObject_Realloc(void *p, size_t nbytes)
+{
+    _PyMem_InitAllocators();
+    return _PyMem_Allocators.object_realloc(p, nbytes);
+}
+
 #else   /* ! WITH_PYMALLOC */
 
 /*==========================================================================*/
@@ -1261,19 +1463,19 @@ PyObject_Realloc(void *p, size_t nbytes)
 void *
 PyObject_Malloc(size_t n)
 {
-    return PyMem_MALLOC(n);
+    return PyMem_Malloc(n);
 }
 
 void *
 PyObject_Realloc(void *p, size_t n)
 {
-    return PyMem_REALLOC(p, n);
+    return PyMem_Realloc(p, n);
 }
 
 void
 PyObject_Free(void *p)
 {
-    PyMem_FREE(p);
+    PyMem_Free(p);
 }
 #endif /* WITH_PYMALLOC */
 
@@ -1428,9 +1630,9 @@ void
 }
 
 
-/* generic debug memory api, with an "id" to identify the API in use */
+/* generic debug memory api, with an "api" to identify the API in use */
 void *
-_PyObject_DebugMallocApi(char id, size_t nbytes)
+_PyObject_DebugMallocApi(char api, size_t nbytes)
 {
     uchar *p;           /* base address of malloc'ed block */
     uchar *tail;        /* p + 2*SST + nbytes == pointer to tail pad bytes */
@@ -1442,13 +1644,16 @@ void *
         /* overflow:  can't represent total as a size_t */
         return NULL;
 
-    p = (uchar *)PyObject_Malloc(total);
+    if (api == _PYMALLOC_OBJ_ID)
+        p = (uchar *)_PyObject_Malloc(total);
+    else
+        p = (uchar *)_PyMem_Allocators.system_malloc(total);
     if (p == NULL)
         return NULL;
 
-    /* at p, write size (SST bytes), id (1 byte), pad (SST-1 bytes) */
+    /* at p, write size (SST bytes), api (1 byte), pad (SST-1 bytes) */
     write_size_t(p, nbytes);
-    p[SST] = (uchar)id;
+    p[SST] = (uchar)api;
     memset(p + SST + 1 , FORBIDDENBYTE, SST-1);
 
     if (nbytes > 0)
@@ -1480,7 +1685,10 @@ void
     nbytes += 4*SST;
     if (nbytes > 0)
         memset(q, DEADBYTE, nbytes);
-    PyObject_Free(q);
+    if (api == _PYMALLOC_OBJ_ID)
+        _PyObject_Free(q);
+    else
+        _PyMem_Allocators.system_free(q);
 }
 
 void *
@@ -1512,7 +1720,10 @@ void *
      * case we didn't get the chance to mark the old memory with DEADBYTE,
      * but we live with that.
      */
-    q = (uchar *)PyObject_Realloc(q - 2*SST, total);
+    if (api == _PYMALLOC_OBJ_ID)
+        q = (uchar *)_PyObject_Realloc(q - 2*SST, total);
+    else
+        q = (uchar *)_PyMem_Allocators.system_realloc(q - 2*SST, total);
     if (q == NULL)
         return NULL;
 
diff -r 66e30c4870bb Objects/setobject.c
--- a/Objects/setobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/setobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -566,7 +566,7 @@ set_dealloc(PySetObject *so)
     }
     if (so->table != so->smalltable)
         PyMem_DEL(so->table);
-    if (numfree < PySet_MAXFREELIST && PyAnySet_CheckExact(so))
+    if (_PySys_UseFreeList && numfree < PySet_MAXFREELIST && PyAnySet_CheckExact(so))
         free_list[numfree++] = so;
     else
         Py_TYPE(so)->tp_free(so);
@@ -1009,7 +1009,8 @@ make_new_set(PyTypeObject *type, PyObjec
     }
 
     /* create PySetObject structure */
-    if (numfree &&
+    if (_PySys_UseFreeList &&
+        numfree &&
         (type == &PySet_Type  ||  type == &PyFrozenSet_Type)) {
         so = free_list[--numfree];
         assert (so != NULL && PyAnySet_CheckExact(so));
diff -r 66e30c4870bb Objects/tupleobject.c
--- a/Objects/tupleobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/tupleobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -55,7 +55,7 @@ PyTuple_New(register Py_ssize_t size)
         return NULL;
     }
 #if PyTuple_MAXSAVESIZE > 0
-    if (size == 0 && free_list[0]) {
+    if (_PySys_UseFreeList && size == 0 && free_list[0]) {
         op = free_list[0];
         Py_INCREF(op);
 #ifdef COUNT_ALLOCS
@@ -63,7 +63,7 @@ PyTuple_New(register Py_ssize_t size)
 #endif
         return (PyObject *) op;
     }
-    if (size < PyTuple_MAXSAVESIZE && (op = free_list[size]) != NULL) {
+    if (_PySys_UseFreeList && size < PyTuple_MAXSAVESIZE && (op = free_list[size]) != NULL) {
         free_list[size] = (PyTupleObject *) op->ob_item[0];
         numfree[size]--;
 #ifdef COUNT_ALLOCS
@@ -94,7 +94,7 @@ PyTuple_New(register Py_ssize_t size)
     for (i=0; i < size; i++)
         op->ob_item[i] = NULL;
 #if PyTuple_MAXSAVESIZE > 0
-    if (size == 0) {
+    if (_PySys_UseFreeList && size == 0) {
         free_list[0] = op;
         ++numfree[0];
         Py_INCREF(op);          /* extra INCREF so that this is never freed */
@@ -221,7 +221,8 @@ tupledealloc(register PyTupleObject *op)
         while (--i >= 0)
             Py_XDECREF(op->ob_item[i]);
 #if PyTuple_MAXSAVESIZE > 0
-        if (len < PyTuple_MAXSAVESIZE &&
+        if (_PySys_UseFreeList &&
+            len < PyTuple_MAXSAVESIZE &&
             numfree[len] < PyTuple_MAXFREELIST &&
             Py_TYPE(op) == &PyTuple_Type)
         {
diff -r 66e30c4870bb Objects/unicodeobject.c
--- a/Objects/unicodeobject.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Objects/unicodeobject.c	Sat Mar 23 13:49:18 2013 +0100
@@ -330,7 +330,7 @@ PyUnicodeObject *_PyUnicode_New(Py_ssize
     }
 
     /* Unicode freelist & memory allocation */
-    if (free_list) {
+    if (_PySys_UseFreeList && free_list) {
         unicode = free_list;
         free_list = *(PyUnicodeObject **)unicode;
         numfree--;
@@ -387,7 +387,8 @@ PyUnicodeObject *_PyUnicode_New(Py_ssize
 static
 void unicode_dealloc(register PyUnicodeObject *unicode)
 {
-    if (PyUnicode_CheckExact(unicode) &&
+    if (_PySys_UseFreeList &&
+        PyUnicode_CheckExact(unicode) &&
         numfree < PyUnicode_MAXFREELIST) {
         /* Keep-Alive optimization */
         if (unicode->length >= KEEPALIVE_SIZE_LIMIT) {
diff -r 66e30c4870bb Python/pythonrun.c
--- a/Python/pythonrun.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Python/pythonrun.c	Sat Mar 23 13:49:18 2013 +0100
@@ -132,6 +132,36 @@ add_flag(int flag, const char *envs)
     return flag;
 }
 
+static void
+inittracemalloc(void)
+{
+    PyObject *mod = NULL, *enable = NULL, *res = NULL;
+
+    mod = PyImport_ImportModule("_tracemalloc");
+    if (mod == NULL)
+        goto error;
+
+    enable = PyObject_GetAttrString(mod, "enable");
+    if (enable == NULL)
+        goto error;
+
+    res = PyObject_CallFunction(enable, NULL);
+    if (res == NULL)
+        goto error;
+
+    fprintf(stderr, "tracemalloc enabled\n");
+    goto done;
+
+error:
+    fprintf(stderr, "failed to enable tracemalloc:\n");
+    PyErr_Print();
+
+done:
+    Py_XDECREF(mod);
+    Py_XDECREF(enable);
+    Py_XDECREF(res);
+}
+
 void
 Py_InitializeEx(int install_sigs)
 {
@@ -254,6 +284,9 @@ Py_InitializeEx(int install_sigs)
         Py_XDECREF(warnings_module);
     }
 
+    if ((p = Py_GETENV("PYTRACEMALLOC")) && *p != '\0')
+        inittracemalloc();
+
     initmain(); /* Module __main__ */
 
     /* auto-thread-state API, if available */
diff -r 66e30c4870bb Python/sysmodule.c
--- a/Python/sysmodule.c	Thu Mar 21 15:02:16 2013 -0700
+++ b/Python/sysmodule.c	Sat Mar 23 13:49:18 2013 +0100
@@ -46,6 +46,8 @@ extern const char *PyWin_DLLVersionStrin
 #include <langinfo.h>
 #endif
 
+int _PySys_UseFreeList = 0;
+
 PyObject *
 PySys_GetObject(char *name)
 {
