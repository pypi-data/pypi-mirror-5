Python Packager
===============

A command-line tool to create Python Packages.

It's intended as a quick way to create new Python packages. It is not a maintenance tool.

Usage::

    $ pip install python-packager
    $ pypackager <mypackage> [options]

This will create a package in your current directory, complete with ``setup.py``, ``AUTHORS`` and ``LICENSE`` files.

License files are generated by `lice <https://github.com/licenses/lice>`_.

Options
=======
All options can be specified on the command-line. Templates can override this settings by including a file called ``.package.cfg`` and users can override everything by creating a config file at ``~/.pypackager/pypackager.cfg``:

Command-line
------------

``--author``
~~~~~~~~~~~~
(alias of ``--author-name``)

``--author-name``
~~~~~~~~~~~~~~~~~
Required. The author's full name

``--author-email``
~~~~~~~~~~~~~~~~~~
Required. The author's email.

``--license``
~~~~~~~~~~~~~
(alias of ``--license-type``)

``--license-type``
~~~~~~~~~~~~~~~~~~
Required. The license to include in the code. See `lice <https://github.com/licenses/lice>`_ for a list of the available licenses.

``--license-organization``
~~~~~~~~~~~~~~~~~~~~~~~~~~
Required. The organization licensing the code. Most of the time this will be the same as ``--author-name``

``--template-dir``
~~~~~~~~~~~~~~~~~~
Optional. The directory that will be used as template.

The rendering context will contain every setting specified, plus a ``package_name`` variable containing the package name.

The special directory ``__package_name__`` will be renamed to the package's name.

``--template-syntax``
~~~~~~~~~~~~~~~~~~
Optional. The language used to render the templates. Options currently available are ``pystache`` and ``jinja2``. Defaults to ``pystache``

``--script``
~~~~~~~~~~~~
(alias of ``--script-prerender``)

``--script-prerender``
~~~~~~~~~~~~~~~~~~~~~~
Optional. If enabled, the specified script will be called before files are rendered from the skeleton. A typical example is a script creating a virtualenv.

``--script-postrender``
~~~~~~~~~~~~~~~~~~~~~~~
Optional. If enabled, the specified script will be called after files are rendered from the skeleton. A typical example is a script initializing a new VCS repository.

Storing options
---------------
To store your options (so you don't have to type them every time) you can write them into a file called ``~/.pypackager/pypackager.cfg``::

    [author]
    name = John Smith
    email = john.smith@example.com

    [license]
    type = bsd3
    organization = John Smith

    [scripts]
    prerender = ~/.pypackager/my_prerender_script.sh
    postrender = ~/.pypackager/my_postrender_script.sh

Status
======

This software should be considered Alpha.

License
=======
This project is released under the MIT License.
