# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyStatistics', [dirname(__file__)])
        except ImportError:
            import _PyStatistics
            return _PyStatistics
        if fp is not None:
            try:
                _mod = imp.load_module('_PyStatistics', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PyStatistics = swig_import_helper()
    del swig_import_helper
else:
    import _PyStatistics
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyStatistics.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _PyStatistics.SwigPyIterator_value(self)
    def incr(self, n=1): return _PyStatistics.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _PyStatistics.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _PyStatistics.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _PyStatistics.SwigPyIterator_equal(self, *args)
    def copy(self): return _PyStatistics.SwigPyIterator_copy(self)
    def next(self): return _PyStatistics.SwigPyIterator_next(self)
    def __next__(self): return _PyStatistics.SwigPyIterator___next__(self)
    def previous(self): return _PyStatistics.SwigPyIterator_previous(self)
    def advance(self, *args): return _PyStatistics.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _PyStatistics.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _PyStatistics.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _PyStatistics.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _PyStatistics.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _PyStatistics.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _PyStatistics.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _PyStatistics.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class datapoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, datapoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, datapoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyStatistics.new_datapoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _PyStatistics.datapoint_first_set
    __swig_getmethods__["first"] = _PyStatistics.datapoint_first_get
    if _newclass:first = _swig_property(_PyStatistics.datapoint_first_get, _PyStatistics.datapoint_first_set)
    __swig_setmethods__["second"] = _PyStatistics.datapoint_second_set
    __swig_getmethods__["second"] = _PyStatistics.datapoint_second_get
    if _newclass:second = _swig_property(_PyStatistics.datapoint_second_get, _PyStatistics.datapoint_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _PyStatistics.delete_datapoint
    __del__ = lambda self : None;
datapoint_swigregister = _PyStatistics.datapoint_swigregister
datapoint_swigregister(datapoint)

class datalist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, datalist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, datalist, name)
    __repr__ = _swig_repr
    def iterator(self): return _PyStatistics.datalist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PyStatistics.datalist___nonzero__(self)
    def __bool__(self): return _PyStatistics.datalist___bool__(self)
    def __len__(self): return _PyStatistics.datalist___len__(self)
    def pop(self): return _PyStatistics.datalist_pop(self)
    def __getslice__(self, *args): return _PyStatistics.datalist___getslice__(self, *args)
    def __setslice__(self, *args): return _PyStatistics.datalist___setslice__(self, *args)
    def __delslice__(self, *args): return _PyStatistics.datalist___delslice__(self, *args)
    def __delitem__(self, *args): return _PyStatistics.datalist___delitem__(self, *args)
    def __getitem__(self, *args): return _PyStatistics.datalist___getitem__(self, *args)
    def __setitem__(self, *args): return _PyStatistics.datalist___setitem__(self, *args)
    def append(self, *args): return _PyStatistics.datalist_append(self, *args)
    def empty(self): return _PyStatistics.datalist_empty(self)
    def size(self): return _PyStatistics.datalist_size(self)
    def clear(self): return _PyStatistics.datalist_clear(self)
    def swap(self, *args): return _PyStatistics.datalist_swap(self, *args)
    def get_allocator(self): return _PyStatistics.datalist_get_allocator(self)
    def begin(self): return _PyStatistics.datalist_begin(self)
    def end(self): return _PyStatistics.datalist_end(self)
    def rbegin(self): return _PyStatistics.datalist_rbegin(self)
    def rend(self): return _PyStatistics.datalist_rend(self)
    def pop_back(self): return _PyStatistics.datalist_pop_back(self)
    def erase(self, *args): return _PyStatistics.datalist_erase(self, *args)
    def __init__(self, *args): 
        this = _PyStatistics.new_datalist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PyStatistics.datalist_push_back(self, *args)
    def front(self): return _PyStatistics.datalist_front(self)
    def back(self): return _PyStatistics.datalist_back(self)
    def assign(self, *args): return _PyStatistics.datalist_assign(self, *args)
    def resize(self, *args): return _PyStatistics.datalist_resize(self, *args)
    def insert(self, *args): return _PyStatistics.datalist_insert(self, *args)
    def reserve(self, *args): return _PyStatistics.datalist_reserve(self, *args)
    def capacity(self): return _PyStatistics.datalist_capacity(self)
    def addpoint(self, *args): return _PyStatistics.datalist_addpoint(self, *args)
    __swig_destroy__ = _PyStatistics.delete_datalist
    __del__ = lambda self : None;
datalist_swigregister = _PyStatistics.datalist_swigregister
datalist_swigregister(datalist)

class vector_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr
    def iterator(self): return _PyStatistics.vector_int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PyStatistics.vector_int___nonzero__(self)
    def __bool__(self): return _PyStatistics.vector_int___bool__(self)
    def __len__(self): return _PyStatistics.vector_int___len__(self)
    def pop(self): return _PyStatistics.vector_int_pop(self)
    def __getslice__(self, *args): return _PyStatistics.vector_int___getslice__(self, *args)
    def __setslice__(self, *args): return _PyStatistics.vector_int___setslice__(self, *args)
    def __delslice__(self, *args): return _PyStatistics.vector_int___delslice__(self, *args)
    def __delitem__(self, *args): return _PyStatistics.vector_int___delitem__(self, *args)
    def __getitem__(self, *args): return _PyStatistics.vector_int___getitem__(self, *args)
    def __setitem__(self, *args): return _PyStatistics.vector_int___setitem__(self, *args)
    def append(self, *args): return _PyStatistics.vector_int_append(self, *args)
    def empty(self): return _PyStatistics.vector_int_empty(self)
    def size(self): return _PyStatistics.vector_int_size(self)
    def clear(self): return _PyStatistics.vector_int_clear(self)
    def swap(self, *args): return _PyStatistics.vector_int_swap(self, *args)
    def get_allocator(self): return _PyStatistics.vector_int_get_allocator(self)
    def begin(self): return _PyStatistics.vector_int_begin(self)
    def end(self): return _PyStatistics.vector_int_end(self)
    def rbegin(self): return _PyStatistics.vector_int_rbegin(self)
    def rend(self): return _PyStatistics.vector_int_rend(self)
    def pop_back(self): return _PyStatistics.vector_int_pop_back(self)
    def erase(self, *args): return _PyStatistics.vector_int_erase(self, *args)
    def __init__(self, *args): 
        this = _PyStatistics.new_vector_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PyStatistics.vector_int_push_back(self, *args)
    def front(self): return _PyStatistics.vector_int_front(self)
    def back(self): return _PyStatistics.vector_int_back(self)
    def assign(self, *args): return _PyStatistics.vector_int_assign(self, *args)
    def resize(self, *args): return _PyStatistics.vector_int_resize(self, *args)
    def insert(self, *args): return _PyStatistics.vector_int_insert(self, *args)
    def reserve(self, *args): return _PyStatistics.vector_int_reserve(self, *args)
    def capacity(self): return _PyStatistics.vector_int_capacity(self)
    __swig_destroy__ = _PyStatistics.delete_vector_int
    __del__ = lambda self : None;
vector_int_swigregister = _PyStatistics.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_double, name)
    __repr__ = _swig_repr
    def iterator(self): return _PyStatistics.vector_double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PyStatistics.vector_double___nonzero__(self)
    def __bool__(self): return _PyStatistics.vector_double___bool__(self)
    def __len__(self): return _PyStatistics.vector_double___len__(self)
    def pop(self): return _PyStatistics.vector_double_pop(self)
    def __getslice__(self, *args): return _PyStatistics.vector_double___getslice__(self, *args)
    def __setslice__(self, *args): return _PyStatistics.vector_double___setslice__(self, *args)
    def __delslice__(self, *args): return _PyStatistics.vector_double___delslice__(self, *args)
    def __delitem__(self, *args): return _PyStatistics.vector_double___delitem__(self, *args)
    def __getitem__(self, *args): return _PyStatistics.vector_double___getitem__(self, *args)
    def __setitem__(self, *args): return _PyStatistics.vector_double___setitem__(self, *args)
    def append(self, *args): return _PyStatistics.vector_double_append(self, *args)
    def empty(self): return _PyStatistics.vector_double_empty(self)
    def size(self): return _PyStatistics.vector_double_size(self)
    def clear(self): return _PyStatistics.vector_double_clear(self)
    def swap(self, *args): return _PyStatistics.vector_double_swap(self, *args)
    def get_allocator(self): return _PyStatistics.vector_double_get_allocator(self)
    def begin(self): return _PyStatistics.vector_double_begin(self)
    def end(self): return _PyStatistics.vector_double_end(self)
    def rbegin(self): return _PyStatistics.vector_double_rbegin(self)
    def rend(self): return _PyStatistics.vector_double_rend(self)
    def pop_back(self): return _PyStatistics.vector_double_pop_back(self)
    def erase(self, *args): return _PyStatistics.vector_double_erase(self, *args)
    def __init__(self, *args): 
        this = _PyStatistics.new_vector_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PyStatistics.vector_double_push_back(self, *args)
    def front(self): return _PyStatistics.vector_double_front(self)
    def back(self): return _PyStatistics.vector_double_back(self)
    def assign(self, *args): return _PyStatistics.vector_double_assign(self, *args)
    def resize(self, *args): return _PyStatistics.vector_double_resize(self, *args)
    def insert(self, *args): return _PyStatistics.vector_double_insert(self, *args)
    def reserve(self, *args): return _PyStatistics.vector_double_reserve(self, *args)
    def capacity(self): return _PyStatistics.vector_double_capacity(self)
    __swig_destroy__ = _PyStatistics.delete_vector_double
    __del__ = lambda self : None;
vector_double_swigregister = _PyStatistics.vector_double_swigregister
vector_double_swigregister(vector_double)

class InvalidParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidParameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PyStatistics.new_InvalidParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyStatistics.delete_InvalidParameter
    __del__ = lambda self : None;
    def what(self): return _PyStatistics.InvalidParameter_what(self)
InvalidParameter_swigregister = _PyStatistics.InvalidParameter_swigregister
InvalidParameter_swigregister(InvalidParameter)


def factorial(*args):
  return _PyStatistics.factorial(*args)
factorial = _PyStatistics.factorial

def isprime(*args):
  return _PyStatistics.isprime(*args)
isprime = _PyStatistics.isprime

def primesuntil(*args):
  return _PyStatistics.primesuntil(*args)
primesuntil = _PyStatistics.primesuntil

def approxfactorial(*args):
  return _PyStatistics.approxfactorial(*args)
approxfactorial = _PyStatistics.approxfactorial

def polyeval(*args):
  return _PyStatistics.polyeval(*args)
polyeval = _PyStatistics.polyeval

def mean(*args):
  return _PyStatistics.mean(*args)
mean = _PyStatistics.mean

def variance(*args):
  return _PyStatistics.variance(*args)
variance = _PyStatistics.variance
LINEAR = _PyStatistics.LINEAR
QUADRATIC = _PyStatistics.QUADRATIC

def linreg(*args):
  return _PyStatistics.linreg(*args)
linreg = _PyStatistics.linreg

def quadreg(*args):
  return _PyStatistics.quadreg(*args)
quadreg = _PyStatistics.quadreg

def regression(*args):
  return _PyStatistics.regression(*args)
regression = _PyStatistics.regression
class ProbabilityDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbabilityDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbabilityDistribution, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyStatistics.delete_ProbabilityDistribution
    __del__ = lambda self : None;
    def pdf(self, *args): return _PyStatistics.ProbabilityDistribution_pdf(self, *args)
    def cdf(self, *args): return _PyStatistics.ProbabilityDistribution_cdf(self, *args)
    def expectedvalue(self): return _PyStatistics.ProbabilityDistribution_expectedvalue(self)
    def variance(self): return _PyStatistics.ProbabilityDistribution_variance(self)
ProbabilityDistribution_swigregister = _PyStatistics.ProbabilityDistribution_swigregister
ProbabilityDistribution_swigregister(ProbabilityDistribution)
cvar = _PyStatistics.cvar
E = cvar.E
PI = cvar.PI
SQRT2 = cvar.SQRT2

class ExponentialDistribution(ProbabilityDistribution):
    __swig_setmethods__ = {}
    for _s in [ProbabilityDistribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [ProbabilityDistribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialDistribution, name)
    __repr__ = _swig_repr
    __swig_getmethods__["lambdaValue"] = _PyStatistics.ExponentialDistribution_lambdaValue_get
    if _newclass:lambdaValue = _swig_property(_PyStatistics.ExponentialDistribution_lambdaValue_get)
    def __init__(self, *args): 
        this = _PyStatistics.new_ExponentialDistribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyStatistics.delete_ExponentialDistribution
    __del__ = lambda self : None;
    def pdf(self, *args): return _PyStatistics.ExponentialDistribution_pdf(self, *args)
    def cdf(self, *args): return _PyStatistics.ExponentialDistribution_cdf(self, *args)
    def expectedvalue(self): return _PyStatistics.ExponentialDistribution_expectedvalue(self)
    def variance(self): return _PyStatistics.ExponentialDistribution_variance(self)
ExponentialDistribution_swigregister = _PyStatistics.ExponentialDistribution_swigregister
ExponentialDistribution_swigregister(ExponentialDistribution)

class GaussianDistribution(ProbabilityDistribution):
    __swig_setmethods__ = {}
    for _s in [ProbabilityDistribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [ProbabilityDistribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianDistribution, name)
    __repr__ = _swig_repr
    __swig_getmethods__["mu"] = _PyStatistics.GaussianDistribution_mu_get
    if _newclass:mu = _swig_property(_PyStatistics.GaussianDistribution_mu_get)
    __swig_getmethods__["sigma"] = _PyStatistics.GaussianDistribution_sigma_get
    if _newclass:sigma = _swig_property(_PyStatistics.GaussianDistribution_sigma_get)
    def __init__(self, *args): 
        this = _PyStatistics.new_GaussianDistribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PyStatistics.delete_GaussianDistribution
    __del__ = lambda self : None;
    def pdf(self, *args): return _PyStatistics.GaussianDistribution_pdf(self, *args)
    def cdf(self, *args): return _PyStatistics.GaussianDistribution_cdf(self, *args)
    def expectedvalue(self): return _PyStatistics.GaussianDistribution_expectedvalue(self)
    def variance(self): return _PyStatistics.GaussianDistribution_variance(self)
    def __str__(self): return _PyStatistics.GaussianDistribution___str__(self)
GaussianDistribution_swigregister = _PyStatistics.GaussianDistribution_swigregister
GaussianDistribution_swigregister(GaussianDistribution)


def __lshift__(*args):
  return _PyStatistics.__lshift__(*args)
__lshift__ = _PyStatistics.__lshift__
# This file is compatible with both classic and new-style classes.


