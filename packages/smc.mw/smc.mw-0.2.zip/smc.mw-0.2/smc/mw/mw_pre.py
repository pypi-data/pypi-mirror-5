#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import * # @UnusedWildImport
from grako.exceptions import * # @UnusedWildImport

__version__ = '13.249.00.34.49'

class mw_preParser(Parser):
    def __init__(self, whitespace='', nameguard=False, **kwargs):
        super(mw_preParser, self).__init__(whitespace=whitespace,
            nameguard=nameguard, **kwargs)

    @rule_def
    def blank(self):
        with self._optional():
            self._pattern(r'[ \t]+')

    @rule_def
    def multiline_blank(self):
        with self._optional():
            self._pattern(r'[ \t\n]+')

    @rule_def
    def end_of_open_tag(self):
        self._pattern(r'(\s(.|\n)*?)?(?=>|/>)')

    @rule_def
    def end_of_close_tag(self):
        self._pattern(r'(\s(.|\n)*?)?(?=>)')

    @rule_def
    def document(self):
        def block1():
            self.element()
            self._cut()
        self._closure(block1)
        self.ast['elements'] = self.last_node
        self._check_eof()

    @rule_def
    def element(self):
        with self._choice():
            with self._option():
                self.text()
            with self._option():
                self.link()
            with self._option():
                self.argument()
            with self._option():
                self.template()
            with self._option():
                self.comment()
            with self._option():
                self.noinclude()
            with self._option():
                self.includeonly()
            with self._option():
                self.onlyinclude()
            with self._option():
                self.ignore()
            with self._option():
                self._pattern(r'(.|\n)')
            self._error('expecting one of: (.|\n)')

    @rule_def
    def text(self):
        self._pattern(r'[^\n<{}|=\[\]]+')

    @rule_def
    def link(self):
        self._token('[[')
        self.link_content()
        self.ast['content'] = self.last_node
        self._token(']]')

    @rule_def
    def link_content(self):
        def block0():
            with self._ifnot():
                self._token(']]')
            self.element()
        self._closure(block0)

    @rule_def
    def template(self):
        with self._optional():
            self._pattern(r'(?<=^)|(?<=\n)')
            self.ast['bol'] = self.last_node
        self._token('{{')
        self.template_content()
        self.ast['name'] = self.last_node
        def block3():
            self.template_arg()
        self._closure(block3)
        self.ast['arguments'] = self.last_node
        self._token('}}')

    @rule_def
    def template_content(self):
        def block0():
            with self._ifnot():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('}}')
                        with self._option():
                            self._token('|')
                        self._error('expecting one of: | }}')
            self.element()
        self._closure(block0)

    @rule_def
    def template_arg(self):
        self._token('|')
        with self._group():
            with self._choice():
                with self._option():
                    self.template_named_arg()
                with self._option():
                    self.template_unnamed_arg()
                self._error('no available options')
        self.ast['@'] = self.last_node

    @rule_def
    def template_named_arg(self):
        self.template_arg_name_content()
        self.ast['name'] = self.last_node
        self._token('=')
        self.template_content()
        self.ast['content'] = self.last_node

    @rule_def
    def template_arg_name_content(self):
        def block0():
            with self._ifnot():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('}}')
                        with self._option():
                            self._token('|')
                        with self._option():
                            self._token('=')
                        self._error('expecting one of: | }} =')
            self.element()
        self._closure(block0)

    @rule_def
    def template_unnamed_arg(self):
        self.template_content()
        self.ast['content'] = self.last_node

    @rule_def
    def argument(self):
        self._token('{{{')
        self.argument_content()
        self.ast['name'] = self.last_node
        def block2():
            self.argument_default()
        self._closure(block2)
        self.ast['defaults'] = self.last_node
        self._token('}}}')

    @rule_def
    def argument_content(self):
        def block0():
            with self._ifnot():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('}}}')
                        with self._option():
                            self._token('|')
                        self._error('expecting one of: | }}}')
            self.element()
        self._closure(block0)

    @rule_def
    def argument_default(self):
        self._token('|')
        self.argument_content()
        self.ast['content'] = self.last_node

    @rule_def
    def comment(self):
        with self._choice():
            with self._option():
                self.comment_alone()
            with self._option():
                self.comment_plain()
            self._error('no available options')

    @rule_def
    def comment_alone(self):
        self._token('\n')
        self.blank()
        self.comment_plain()
        self.ast['comment'] = self.last_node
        self.blank()
        with self._if():
            self._token('\n')

    @rule_def
    def comment_plain(self):
        self._token('<!--')
        self._pattern(r'((?!-->).|\n)*')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('-->')
                with self._option():
                    self._check_eof()
                self._error('expecting one of: -->')

    @rule_def
    def noinclude(self):
        self._token('<noinclude')
        self.end_of_open_tag()
        self.ast['junk'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self.noinclude_content()
                    self.ast['content'] = self.last_node
                    with self._group():
                        with self._choice():
                            with self._option():
                                self.noinclude_end()
                            with self._option():
                                self._check_eof()
                            self._error('no available options')
                self._error('expecting one of: />')

    @rule_def
    def noinclude_content(self):
        def block0():
            with self._ifnot():
                self.noinclude_end()
            self.element()
        self._closure(block0)

    @rule_def
    def noinclude_end(self):
        self._token('</noinclude')
        self.end_of_close_tag()
        self._token('>')

    @rule_def
    def includeonly(self):
        self._token('<includeonly')
        self.end_of_open_tag()
        self.ast['junk'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self.includeonly_content()
                    self.ast['content'] = self.last_node
                    with self._group():
                        with self._choice():
                            with self._option():
                                self.includeonly_end()
                            with self._option():
                                self._check_eof()
                            self._error('no available options')
                self._error('expecting one of: />')

    @rule_def
    def includeonly_content(self):
        def block0():
            with self._ifnot():
                self.includeonly_end()
            self.element()
        self._closure(block0)

    @rule_def
    def includeonly_end(self):
        self._token('</includeonly')
        self.end_of_close_tag()
        self._token('>')

    @rule_def
    def onlyinclude(self):
        self._token('<onlyinclude')
        self.end_of_open_tag()
        self.ast['junk'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self.onlyinclude_content()
                    self.ast['content'] = self.last_node
                    with self._group():
                        with self._choice():
                            with self._option():
                                self.onlyinclude_end()
                            with self._option():
                                self._check_eof()
                            self._error('no available options')
                self._error('expecting one of: />')

    @rule_def
    def onlyinclude_content(self):
        def block0():
            with self._ifnot():
                self.onlyinclude_end()
            self.onlyinclude_element()
        self._closure(block0)

    @rule_def
    def onlyinclude_end(self):
        self._token('</onlyinclude')
        self.end_of_close_tag()
        self._token('>')

    @rule_def
    def onlyinclude_element(self):
        with self._choice():
            with self._option():
                with self._ifnot():
                    self.onlyinclude()
                self.element()
            with self._option():
                self._pattern(r'(.|\n)')
            self._error('expecting one of: (.|\n)')

    @rule_def
    def ignore(self):
        self._token('</')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('noinclude')
                with self._option():
                    self._token('includeonly')
                with self._option():
                    self._token('onlyinclude')
                self._error('expecting one of: onlyinclude noinclude includeonly')
        self.end_of_close_tag()
        self._token('>')



class mw_preSemanticParser(CheckSemanticsMixin, mw_preParser):
    pass


class mw_preSemantics(object):
    def blank(self, ast):
        return ast

    def multiline_blank(self, ast):
        return ast

    def end_of_open_tag(self, ast):
        return ast

    def end_of_close_tag(self, ast):
        return ast

    def document(self, ast):
        return ast

    def element(self, ast):
        return ast

    def text(self, ast):
        return ast

    def link(self, ast):
        return ast

    def link_content(self, ast):
        return ast

    def template(self, ast):
        return ast

    def template_content(self, ast):
        return ast

    def template_arg(self, ast):
        return ast

    def template_named_arg(self, ast):
        return ast

    def template_arg_name_content(self, ast):
        return ast

    def template_unnamed_arg(self, ast):
        return ast

    def argument(self, ast):
        return ast

    def argument_content(self, ast):
        return ast

    def argument_default(self, ast):
        return ast

    def comment(self, ast):
        return ast

    def comment_alone(self, ast):
        return ast

    def comment_plain(self, ast):
        return ast

    def noinclude(self, ast):
        return ast

    def noinclude_content(self, ast):
        return ast

    def noinclude_end(self, ast):
        return ast

    def includeonly(self, ast):
        return ast

    def includeonly_content(self, ast):
        return ast

    def includeonly_end(self, ast):
        return ast

    def onlyinclude(self, ast):
        return ast

    def onlyinclude_content(self, ast):
        return ast

    def onlyinclude_end(self, ast):
        return ast

    def onlyinclude_element(self, ast):
        return ast

    def ignore(self, ast):
        return ast

def main(filename, startrule, trace=False):
    import json
    with open(filename) as f:
        text = f.read()
    parser = mw_preParser(parseinfo=False)
    ast = parser.parse(text, startrule, filename=filename, trace=trace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import sys
    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in mw_preParser.rule_list():
                print(r)
            print()
            sys.exit(0)
    parser = argparse.ArgumentParser(description="Simple parser for mw_pre.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace)
