#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import * # @UnusedWildImport
from grako.exceptions import * # @UnusedWildImport

__version__ = '13.239.22.01.01'

class testspecParser(Parser):
    def __init__(self, whitespace='', nameguard=False, **kwargs):
        super(testspecParser, self).__init__(whitespace=whitespace,
            nameguard=nameguard, **kwargs)

    @rule_def
    def document(self):
        self.text()
        def block0():
            self.element()
        self._closure(block0)
        self.ast['@'] = self.last_node
        self._check_eof()

    @rule_def
    def element(self):
        with self._group():
            with self._choice():
                with self._option():
                    self.article()
                with self._option():
                    self.test()
                self._error('no available options')
        self.ast['@'] = self.last_node
        self.text()

    @rule_def
    def cmd(self):
        self._pattern(r'!![ \t]*')

    @rule_def
    def cmd_end(self):
        self._pattern(r':?[ \t]*\n')

    @rule_def
    def article(self):
        self.article_title()
        self.ast['title'] = self.last_node
        self.article_text()
        self.ast['text'] = self.last_node
        self.article_end()

    @rule_def
    def article_title(self):
        self.cmd()
        self._token('article')
        self.cmd_end()
        self.text_line()
        self.ast['@'] = self.last_node

    @rule_def
    def article_text(self):
        self.cmd()
        self._token('text')
        self.cmd_end()
        self.text()
        self.ast['@'] = self.last_node

    @rule_def
    def article_end(self):
        self.cmd()
        self._token('endarticle')
        self.cmd_end()

    @rule_def
    def test(self):
        self.test_description()
        self.ast['description'] = self.last_node
        with self._optional():
            self.test_options()
            self.ast['options'] = self.last_node
        with self._optional():
            self.test_config()
            self.ast['config'] = self.last_node
        self.test_input()
        self.ast['input'] = self.last_node
        with self._optional():
            self.test_config()
            self.ast['config'] = self.last_node
        self.test_result()
        self.ast['result'] = self.last_node
        self.test_end()

    @rule_def
    def test_description(self):
        self.cmd()
        self._token('test')
        self.cmd_end()
        self.text()
        self.ast['@'] = self.last_node

    @rule_def
    def test_options(self):
        self.cmd()
        self._token('options')
        self.cmd_end()
        self.text()
        self.ast['@'] = self.last_node

    @rule_def
    def test_config(self):
        self.cmd()
        self._token('config')
        self.cmd_end()
        self.text()
        self.ast['@'] = self.last_node

    @rule_def
    def test_input(self):
        self.cmd()
        self._token('input')
        self.cmd_end()
        self.text()
        self.ast['@'] = self.last_node

    @rule_def
    def test_result(self):
        self.cmd()
        self._token('result')
        self.cmd_end()
        self.text()
        self.ast['@'] = self.last_node

    @rule_def
    def test_end(self):
        self.cmd()
        self._token('end')
        self.cmd_end()

    @rule_def
    def text_line(self):
        with self._ifnot():
            self._token('!!')
        self._pattern(r'.*\n')

    @rule_def
    def text(self):
        def block0():
            self.text_line()
        self._closure(block0)



class testspecSemanticParser(CheckSemanticsMixin, testspecParser):
    pass


class testspecSemantics(object):
    def document(self, ast):
        return ast

    def element(self, ast):
        return ast

    def cmd(self, ast):
        return ast

    def cmd_end(self, ast):
        return ast

    def article(self, ast):
        return ast

    def article_title(self, ast):
        return ast

    def article_text(self, ast):
        return ast

    def article_end(self, ast):
        return ast

    def test(self, ast):
        return ast

    def test_description(self, ast):
        return ast

    def test_options(self, ast):
        return ast

    def test_config(self, ast):
        return ast

    def test_input(self, ast):
        return ast

    def test_result(self, ast):
        return ast

    def test_end(self, ast):
        return ast

    def text_line(self, ast):
        return ast

    def text(self, ast):
        return ast

def main(filename, startrule, trace=False):
    import json
    with open(filename) as f:
        text = f.read()
    parser = testspecParser(parseinfo=False)
    ast = parser.parse(text, startrule, filename=filename, trace=trace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import sys
    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in testspecParser.rule_list():
                print(r)
            print()
            sys.exit(0)
    parser = argparse.ArgumentParser(description="Simple parser for testspec.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace)
